// Code generated by MockGen. DO NOT EDIT.
// Source: chan.go

// Package mock_csp is a generated GoMock package.
package mock_csp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	csp "github.com/wetware/ww/pkg/csp"
)

// MockCloseServer is a mock of CloseServer interface.
type MockCloseServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloseServerMockRecorder
}

// MockCloseServerMockRecorder is the mock recorder for MockCloseServer.
type MockCloseServerMockRecorder struct {
	mock *MockCloseServer
}

// NewMockCloseServer creates a new mock instance.
func NewMockCloseServer(ctrl *gomock.Controller) *MockCloseServer {
	mock := &MockCloseServer{ctrl: ctrl}
	mock.recorder = &MockCloseServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloseServer) EXPECT() *MockCloseServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloseServer) Close(arg0 context.Context, arg1 csp.MethodClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloseServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloseServer)(nil).Close), arg0, arg1)
}

// MockSendServer is a mock of SendServer interface.
type MockSendServer struct {
	ctrl     *gomock.Controller
	recorder *MockSendServerMockRecorder
}

// MockSendServerMockRecorder is the mock recorder for MockSendServer.
type MockSendServerMockRecorder struct {
	mock *MockSendServer
}

// NewMockSendServer creates a new mock instance.
func NewMockSendServer(ctrl *gomock.Controller) *MockSendServer {
	mock := &MockSendServer{ctrl: ctrl}
	mock.recorder = &MockSendServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendServer) EXPECT() *MockSendServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendServer) Send(arg0 context.Context, arg1 csp.MethodSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSendServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendServer)(nil).Send), arg0, arg1)
}

// MockRecvServer is a mock of RecvServer interface.
type MockRecvServer struct {
	ctrl     *gomock.Controller
	recorder *MockRecvServerMockRecorder
}

// MockRecvServerMockRecorder is the mock recorder for MockRecvServer.
type MockRecvServerMockRecorder struct {
	mock *MockRecvServer
}

// NewMockRecvServer creates a new mock instance.
func NewMockRecvServer(ctrl *gomock.Controller) *MockRecvServer {
	mock := &MockRecvServer{ctrl: ctrl}
	mock.recorder = &MockRecvServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecvServer) EXPECT() *MockRecvServerMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockRecvServer) Recv(arg0 context.Context, arg1 csp.MethodRecv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv.
func (mr *MockRecvServerMockRecorder) Recv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRecvServer)(nil).Recv), arg0, arg1)
}

// MockPeekServer is a mock of PeekServer interface.
type MockPeekServer struct {
	ctrl     *gomock.Controller
	recorder *MockPeekServerMockRecorder
}

// MockPeekServerMockRecorder is the mock recorder for MockPeekServer.
type MockPeekServerMockRecorder struct {
	mock *MockPeekServer
}

// NewMockPeekServer creates a new mock instance.
func NewMockPeekServer(ctrl *gomock.Controller) *MockPeekServer {
	mock := &MockPeekServer{ctrl: ctrl}
	mock.recorder = &MockPeekServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeekServer) EXPECT() *MockPeekServerMockRecorder {
	return m.recorder
}

// Peek mocks base method.
func (m *MockPeekServer) Peek(arg0 context.Context, arg1 csp.MethodPeek) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockPeekServerMockRecorder) Peek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockPeekServer)(nil).Peek), arg0, arg1)
}

// MockSendCloseServer is a mock of SendCloseServer interface.
type MockSendCloseServer struct {
	ctrl     *gomock.Controller
	recorder *MockSendCloseServerMockRecorder
}

// MockSendCloseServerMockRecorder is the mock recorder for MockSendCloseServer.
type MockSendCloseServerMockRecorder struct {
	mock *MockSendCloseServer
}

// NewMockSendCloseServer creates a new mock instance.
func NewMockSendCloseServer(ctrl *gomock.Controller) *MockSendCloseServer {
	mock := &MockSendCloseServer{ctrl: ctrl}
	mock.recorder = &MockSendCloseServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendCloseServer) EXPECT() *MockSendCloseServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSendCloseServer) Close(arg0 context.Context, arg1 csp.MethodClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendCloseServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendCloseServer)(nil).Close), arg0, arg1)
}

// Send mocks base method.
func (m *MockSendCloseServer) Send(arg0 context.Context, arg1 csp.MethodSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSendCloseServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendCloseServer)(nil).Send), arg0, arg1)
}

// MockPeekRecvServer is a mock of PeekRecvServer interface.
type MockPeekRecvServer struct {
	ctrl     *gomock.Controller
	recorder *MockPeekRecvServerMockRecorder
}

// MockPeekRecvServerMockRecorder is the mock recorder for MockPeekRecvServer.
type MockPeekRecvServerMockRecorder struct {
	mock *MockPeekRecvServer
}

// NewMockPeekRecvServer creates a new mock instance.
func NewMockPeekRecvServer(ctrl *gomock.Controller) *MockPeekRecvServer {
	mock := &MockPeekRecvServer{ctrl: ctrl}
	mock.recorder = &MockPeekRecvServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeekRecvServer) EXPECT() *MockPeekRecvServerMockRecorder {
	return m.recorder
}

// Peek mocks base method.
func (m *MockPeekRecvServer) Peek(arg0 context.Context, arg1 csp.MethodPeek) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockPeekRecvServerMockRecorder) Peek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockPeekRecvServer)(nil).Peek), arg0, arg1)
}

// Recv mocks base method.
func (m *MockPeekRecvServer) Recv(arg0 context.Context, arg1 csp.MethodRecv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv.
func (mr *MockPeekRecvServerMockRecorder) Recv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPeekRecvServer)(nil).Recv), arg0, arg1)
}

// MockChanServer is a mock of ChanServer interface.
type MockChanServer struct {
	ctrl     *gomock.Controller
	recorder *MockChanServerMockRecorder
}

// MockChanServerMockRecorder is the mock recorder for MockChanServer.
type MockChanServerMockRecorder struct {
	mock *MockChanServer
}

// NewMockChanServer creates a new mock instance.
func NewMockChanServer(ctrl *gomock.Controller) *MockChanServer {
	mock := &MockChanServer{ctrl: ctrl}
	mock.recorder = &MockChanServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChanServer) EXPECT() *MockChanServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChanServer) Close(arg0 context.Context, arg1 csp.MethodClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChanServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChanServer)(nil).Close), arg0, arg1)
}

// Recv mocks base method.
func (m *MockChanServer) Recv(arg0 context.Context, arg1 csp.MethodRecv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv.
func (mr *MockChanServerMockRecorder) Recv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChanServer)(nil).Recv), arg0, arg1)
}

// Send mocks base method.
func (m *MockChanServer) Send(arg0 context.Context, arg1 csp.MethodSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChanServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChanServer)(nil).Send), arg0, arg1)
}

// MockPeekableServer is a mock of PeekableServer interface.
type MockPeekableServer struct {
	ctrl     *gomock.Controller
	recorder *MockPeekableServerMockRecorder
}

// MockPeekableServerMockRecorder is the mock recorder for MockPeekableServer.
type MockPeekableServerMockRecorder struct {
	mock *MockPeekableServer
}

// NewMockPeekableServer creates a new mock instance.
func NewMockPeekableServer(ctrl *gomock.Controller) *MockPeekableServer {
	mock := &MockPeekableServer{ctrl: ctrl}
	mock.recorder = &MockPeekableServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeekableServer) EXPECT() *MockPeekableServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPeekableServer) Close(arg0 context.Context, arg1 csp.MethodClose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPeekableServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPeekableServer)(nil).Close), arg0, arg1)
}

// Peek mocks base method.
func (m *MockPeekableServer) Peek(arg0 context.Context, arg1 csp.MethodPeek) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockPeekableServerMockRecorder) Peek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockPeekableServer)(nil).Peek), arg0, arg1)
}

// Recv mocks base method.
func (m *MockPeekableServer) Recv(arg0 context.Context, arg1 csp.MethodRecv) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv.
func (mr *MockPeekableServerMockRecorder) Recv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPeekableServer)(nil).Recv), arg0, arg1)
}

// Send mocks base method.
func (m *MockPeekableServer) Send(arg0 context.Context, arg1 csp.MethodSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPeekableServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPeekableServer)(nil).Send), arg0, arg1)
}
