// Code generated by MockGen. DO NOT EDIT.
// Source: host.go

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cluster "github.com/wetware/casm/pkg/cluster"
	debug "github.com/wetware/casm/pkg/debug"
	anchor "github.com/wetware/ww/pkg/anchor"
	pubsub "github.com/wetware/ww/pkg/pubsub"
)

// MockViewProvider is a mock of ViewProvider interface.
type MockViewProvider struct {
	ctrl     *gomock.Controller
	recorder *MockViewProviderMockRecorder
}

// MockViewProviderMockRecorder is the mock recorder for MockViewProvider.
type MockViewProviderMockRecorder struct {
	mock *MockViewProvider
}

// NewMockViewProvider creates a new mock instance.
func NewMockViewProvider(ctrl *gomock.Controller) *MockViewProvider {
	mock := &MockViewProvider{ctrl: ctrl}
	mock.recorder = &MockViewProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewProvider) EXPECT() *MockViewProviderMockRecorder {
	return m.recorder
}

// View mocks base method.
func (m *MockViewProvider) View() cluster.View {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View")
	ret0, _ := ret[0].(cluster.View)
	return ret0
}

// View indicates an expected call of View.
func (mr *MockViewProviderMockRecorder) View() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockViewProvider)(nil).View))
}

// MockPubSubProvider is a mock of PubSubProvider interface.
type MockPubSubProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubProviderMockRecorder
}

// MockPubSubProviderMockRecorder is the mock recorder for MockPubSubProvider.
type MockPubSubProviderMockRecorder struct {
	mock *MockPubSubProvider
}

// NewMockPubSubProvider creates a new mock instance.
func NewMockPubSubProvider(ctrl *gomock.Controller) *MockPubSubProvider {
	mock := &MockPubSubProvider{ctrl: ctrl}
	mock.recorder = &MockPubSubProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubProvider) EXPECT() *MockPubSubProviderMockRecorder {
	return m.recorder
}

// PubSub mocks base method.
func (m *MockPubSubProvider) PubSub() pubsub.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSub")
	ret0, _ := ret[0].(pubsub.Router)
	return ret0
}

// PubSub indicates an expected call of PubSub.
func (mr *MockPubSubProviderMockRecorder) PubSub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSub", reflect.TypeOf((*MockPubSubProvider)(nil).PubSub))
}

// MockAnchorProvider is a mock of AnchorProvider interface.
type MockAnchorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAnchorProviderMockRecorder
}

// MockAnchorProviderMockRecorder is the mock recorder for MockAnchorProvider.
type MockAnchorProviderMockRecorder struct {
	mock *MockAnchorProvider
}

// NewMockAnchorProvider creates a new mock instance.
func NewMockAnchorProvider(ctrl *gomock.Controller) *MockAnchorProvider {
	mock := &MockAnchorProvider{ctrl: ctrl}
	mock.recorder = &MockAnchorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnchorProvider) EXPECT() *MockAnchorProviderMockRecorder {
	return m.recorder
}

// Anchor mocks base method.
func (m *MockAnchorProvider) Anchor() anchor.Anchor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Anchor")
	ret0, _ := ret[0].(anchor.Anchor)
	return ret0
}

// Anchor indicates an expected call of Anchor.
func (mr *MockAnchorProviderMockRecorder) Anchor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Anchor", reflect.TypeOf((*MockAnchorProvider)(nil).Anchor))
}

// MockDebugProvider is a mock of DebugProvider interface.
type MockDebugProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDebugProviderMockRecorder
}

// MockDebugProviderMockRecorder is the mock recorder for MockDebugProvider.
type MockDebugProviderMockRecorder struct {
	mock *MockDebugProvider
}

// NewMockDebugProvider creates a new mock instance.
func NewMockDebugProvider(ctrl *gomock.Controller) *MockDebugProvider {
	mock := &MockDebugProvider{ctrl: ctrl}
	mock.recorder = &MockDebugProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugProvider) EXPECT() *MockDebugProviderMockRecorder {
	return m.recorder
}

// Debugger mocks base method.
func (m *MockDebugProvider) Debugger() debug.Debugger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debugger")
	ret0, _ := ret[0].(debug.Debugger)
	return ret0
}

// Debugger indicates an expected call of Debugger.
func (mr *MockDebugProviderMockRecorder) Debugger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugger", reflect.TypeOf((*MockDebugProvider)(nil).Debugger))
}
