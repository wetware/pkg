// Code generated by capnpc-go. DO NOT EDIT.

package anchor

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type Value struct{ capnp.Struct }
type Value_Which uint16

const (
	Value_Which_nil        Value_Which = 0
	Value_Which_capability Value_Which = 1
	Value_Which_chan       Value_Which = 2
)

func (w Value_Which) String() string {
	const s = "nilcapabilitychan"
	switch w {
	case Value_Which_nil:
		return s[0:3]
	case Value_Which_capability:
		return s[3:13]
	case Value_Which_chan:
		return s[13:17]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xcfaebe761f647d07

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xcfaebe761f647d07, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetNil() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Capability() *capnp.Client {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != capability")
	}
	p, _ := s.Struct.Ptr(0)
	return p.Interface().Client()
}

func (s Value) HasCapability() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetCapability(c *capnp.Client) error {
	s.Struct.SetUint16(0, 1)
	if !c.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return s.Struct.SetPtr(0, in.ToPtr())
}
func (s Value) Chan() channel.PeekableChan {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != chan")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.PeekableChan{Client: p.Interface().Client()}
}

func (s Value) HasChan() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetChan(v channel.PeekableChan) error {
	s.Struct.SetUint16(0, 2)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value]{List: l}, err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (p Value_Future) Struct() (Value, error) {
	s, err := p.Future.Struct()
	return Value{s}, err
}

func (p Value_Future) Capability() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Value_Future) Chan() channel.PeekableChan {
	return channel.PeekableChan{Client: p.Future.Field(0, nil).Client()}
}

type Loader struct{ Client *capnp.Client }

// Loader_TypeID is the unique identifier for the type Loader.
const Loader_TypeID = 0x8f85860d3c5e499a

func (c Loader) Load(ctx context.Context, params func(Loader_load_Params) error) (Loader_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Loader_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Loader_load_Results_Future{Future: ans.Future()}, release
}

func (c Loader) AddRef() Loader {
	return Loader{
		Client: c.Client.AddRef(),
	}
}

func (c Loader) Release() {
	c.Client.Release()
}

// A Loader_Server is a Loader with a local implementation.
type Loader_Server interface {
	Load(context.Context, Loader_load) error
}

// Loader_NewServer creates a new Server from an implementation of Loader_Server.
func Loader_NewServer(s Loader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Loader_Methods(nil, s), s, c, policy)
}

// Loader_ServerToClient creates a new Client from an implementation of Loader_Server.
// The caller is responsible for calling Release on the returned Client.
func Loader_ServerToClient(s Loader_Server, policy *server.Policy) Loader {
	return Loader{Client: capnp.NewClient(Loader_NewServer(s, policy))}
}

// Loader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Loader_Methods(methods []server.Method, s Loader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Loader_load{call})
		},
	})

	return methods
}

// Loader_load holds the state for a server call to Loader.load.
// See server.Call for documentation.
type Loader_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Loader_load) Args() Loader_load_Params {
	return Loader_load_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Loader_load) AllocResults() (Loader_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{Struct: r}, err
}

type Loader_load_Params struct{ capnp.Struct }

// Loader_load_Params_TypeID is the unique identifier for the type Loader_load_Params.
const Loader_load_Params_TypeID = 0xeed523cf9607ecc8

func NewLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func NewRootLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func ReadRootLoader_load_Params(msg *capnp.Message) (Loader_load_Params, error) {
	root, err := msg.Root()
	return Loader_load_Params{root.Struct()}, err
}

func (s Loader_load_Params) String() string {
	str, _ := text.Marshal(0xeed523cf9607ecc8, s.Struct)
	return str
}

// Loader_load_Params_List is a list of Loader_load_Params.
type Loader_load_Params_List = capnp.StructList[Loader_load_Params]

// NewLoader_load_Params creates a new list of Loader_load_Params.
func NewLoader_load_Params_List(s *capnp.Segment, sz int32) (Loader_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Loader_load_Params]{List: l}, err
}

// Loader_load_Params_Future is a wrapper for a Loader_load_Params promised by a client call.
type Loader_load_Params_Future struct{ *capnp.Future }

func (p Loader_load_Params_Future) Struct() (Loader_load_Params, error) {
	s, err := p.Future.Struct()
	return Loader_load_Params{s}, err
}

type Loader_load_Results struct{ capnp.Struct }

// Loader_load_Results_TypeID is the unique identifier for the type Loader_load_Results.
const Loader_load_Results_TypeID = 0x85962033efbe6161

func NewLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func NewRootLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func ReadRootLoader_load_Results(msg *capnp.Message) (Loader_load_Results, error) {
	root, err := msg.Root()
	return Loader_load_Results{root.Struct()}, err
}

func (s Loader_load_Results) String() string {
	str, _ := text.Marshal(0x85962033efbe6161, s.Struct)
	return str
}

func (s Loader_load_Results) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Loader_load_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Loader_load_Results) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Loader_load_Results) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Loader_load_Results_List is a list of Loader_load_Results.
type Loader_load_Results_List = capnp.StructList[Loader_load_Results]

// NewLoader_load_Results creates a new list of Loader_load_Results.
func NewLoader_load_Results_List(s *capnp.Segment, sz int32) (Loader_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Loader_load_Results]{List: l}, err
}

// Loader_load_Results_Future is a wrapper for a Loader_load_Results promised by a client call.
type Loader_load_Results_Future struct{ *capnp.Future }

func (p Loader_load_Results_Future) Struct() (Loader_load_Results, error) {
	s, err := p.Future.Struct()
	return Loader_load_Results{s}, err
}

func (p Loader_load_Results_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Storer struct{ Client *capnp.Client }

// Storer_TypeID is the unique identifier for the type Storer.
const Storer_TypeID = 0xd03a10b4ad79653b

func (c Storer) Store(ctx context.Context, params func(Storer_store_Params) error) (Storer_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storer_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storer_store_Results_Future{Future: ans.Future()}, release
}

func (c Storer) AddRef() Storer {
	return Storer{
		Client: c.Client.AddRef(),
	}
}

func (c Storer) Release() {
	c.Client.Release()
}

// A Storer_Server is a Storer with a local implementation.
type Storer_Server interface {
	Store(context.Context, Storer_store) error
}

// Storer_NewServer creates a new Server from an implementation of Storer_Server.
func Storer_NewServer(s Storer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Storer_Methods(nil, s), s, c, policy)
}

// Storer_ServerToClient creates a new Client from an implementation of Storer_Server.
// The caller is responsible for calling Release on the returned Client.
func Storer_ServerToClient(s Storer_Server, policy *server.Policy) Storer {
	return Storer{Client: capnp.NewClient(Storer_NewServer(s, policy))}
}

// Storer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Storer_Methods(methods []server.Method, s Storer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Storer_store{call})
		},
	})

	return methods
}

// Storer_store holds the state for a server call to Storer.store.
// See server.Call for documentation.
type Storer_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Storer_store) Args() Storer_store_Params {
	return Storer_store_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Storer_store) AllocResults() (Storer_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{Struct: r}, err
}

type Storer_store_Params struct{ capnp.Struct }

// Storer_store_Params_TypeID is the unique identifier for the type Storer_store_Params.
const Storer_store_Params_TypeID = 0x8f702043cf5adb9c

func NewStorer_store_Params(s *capnp.Segment) (Storer_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storer_store_Params{st}, err
}

func NewRootStorer_store_Params(s *capnp.Segment) (Storer_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storer_store_Params{st}, err
}

func ReadRootStorer_store_Params(msg *capnp.Message) (Storer_store_Params, error) {
	root, err := msg.Root()
	return Storer_store_Params{root.Struct()}, err
}

func (s Storer_store_Params) String() string {
	str, _ := text.Marshal(0x8f702043cf5adb9c, s.Struct)
	return str
}

func (s Storer_store_Params) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Storer_store_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Storer_store_Params) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Storer_store_Params) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Storer_store_Params_List is a list of Storer_store_Params.
type Storer_store_Params_List = capnp.StructList[Storer_store_Params]

// NewStorer_store_Params creates a new list of Storer_store_Params.
func NewStorer_store_Params_List(s *capnp.Segment, sz int32) (Storer_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storer_store_Params]{List: l}, err
}

// Storer_store_Params_Future is a wrapper for a Storer_store_Params promised by a client call.
type Storer_store_Params_Future struct{ *capnp.Future }

func (p Storer_store_Params_Future) Struct() (Storer_store_Params, error) {
	s, err := p.Future.Struct()
	return Storer_store_Params{s}, err
}

func (p Storer_store_Params_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Storer_store_Results struct{ capnp.Struct }

// Storer_store_Results_TypeID is the unique identifier for the type Storer_store_Results.
const Storer_store_Results_TypeID = 0xd3426cb2da908260

func NewStorer_store_Results(s *capnp.Segment) (Storer_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{st}, err
}

func NewRootStorer_store_Results(s *capnp.Segment) (Storer_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{st}, err
}

func ReadRootStorer_store_Results(msg *capnp.Message) (Storer_store_Results, error) {
	root, err := msg.Root()
	return Storer_store_Results{root.Struct()}, err
}

func (s Storer_store_Results) String() string {
	str, _ := text.Marshal(0xd3426cb2da908260, s.Struct)
	return str
}

// Storer_store_Results_List is a list of Storer_store_Results.
type Storer_store_Results_List = capnp.StructList[Storer_store_Results]

// NewStorer_store_Results creates a new list of Storer_store_Results.
func NewStorer_store_Results_List(s *capnp.Segment, sz int32) (Storer_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Storer_store_Results]{List: l}, err
}

// Storer_store_Results_Future is a wrapper for a Storer_store_Results promised by a client call.
type Storer_store_Results_Future struct{ *capnp.Future }

func (p Storer_store_Results_Future) Struct() (Storer_store_Results, error) {
	s, err := p.Future.Struct()
	return Storer_store_Results{s}, err
}

type Register struct{ Client *capnp.Client }

// Register_TypeID is the unique identifier for the type Register.
const Register_TypeID = 0xdbbdb0fd1b231b9a

func (c Register) Load(ctx context.Context, params func(Loader_load_Params) error) (Loader_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Loader_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Loader_load_Results_Future{Future: ans.Future()}, release
}
func (c Register) Store(ctx context.Context, params func(Storer_store_Params) error) (Storer_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storer_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storer_store_Results_Future{Future: ans.Future()}, release
}

func (c Register) AddRef() Register {
	return Register{
		Client: c.Client.AddRef(),
	}
}

func (c Register) Release() {
	c.Client.Release()
}

// A Register_Server is a Register with a local implementation.
type Register_Server interface {
	Load(context.Context, Loader_load) error

	Store(context.Context, Storer_store) error
}

// Register_NewServer creates a new Server from an implementation of Register_Server.
func Register_NewServer(s Register_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Register_Methods(nil, s), s, c, policy)
}

// Register_ServerToClient creates a new Client from an implementation of Register_Server.
// The caller is responsible for calling Release on the returned Client.
func Register_ServerToClient(s Register_Server, policy *server.Policy) Register {
	return Register{Client: capnp.NewClient(Register_NewServer(s, policy))}
}

// Register_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Register_Methods(methods []server.Method, s Register_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Loader_load{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Storer_store{call})
		},
	})

	return methods
}

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xe41237e4098ed922

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Child struct{ capnp.Struct }

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0xc718781cb2553199

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child{root.Struct()}, err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0xc718781cb2553199, s.Struct)
	return str
}

func (s Anchor_Child) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Child) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Child) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List = capnp.StructList[Anchor_Child]

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Child]{List: l}, err
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (p Anchor_Child_Future) Struct() (Anchor_Child, error) {
	s, err := p.Future.Struct()
	return Anchor_Child{s}, err
}

func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xc105d085735711e1

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xc105d085735711e1, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List = capnp.StructList[Anchor_ls_Params]

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_ls_Params]{List: l}, err
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xe325af947f127758

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xe325af947f127758, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Child_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List = capnp.StructList[Anchor_ls_Results]

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Results]{List: l}, err
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb90ffa2761585171

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb90ffa2761585171, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List = capnp.StructList[Anchor_walk_Params]

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Params]{List: l}, err
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xaec21d58779cc86c

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xaec21d58779cc86c, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List = capnp.StructList[Anchor_walk_Results]

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Results]{List: l}, err
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

const schema_efb5a91f96d44de3 = "x\xda\xa4TMh\\U\x18\xfd\xce\xbdo\xde\x8d:" +
	"\xe3\xe4\xce\x8bh\xad2\xa5MH-44\x89 D" +
	"%\xa9\xa5\xd4J\x0asS\xa3I\xa1\xe2u\xe6\xe1\x0c" +
	"\xbe\xccL\xdfL\x9av!\xa2\x10\x7f6VQ\x02\x8d" +
	"]e\xe7\xc2V\x82E\xbaH!n\xac\xbaH\xfd[" +
	"h7J\xbb)\x88E\x97\x85z\xe5\xbe\xe9\xf4=\xa7" +
	"\xa3.\xba\x9a7\xef\x9ew\xbe\xf3}\xdf\xb9g\xd7\x07" +
	"l\xc2\x19\xce|~\x0f1\xf5v\xca5Z\x9f\xbf6" +
	"\xbaei\x91d\x1f\x88R\x10D\xa3\xeb\xa9\xbbA\xf0" +
	"\xbeJ\x8d\x13\xcc\xa9K\x876\xf6l\xa9\x9fH\x02\xae" +
	"\xb6\x00\x7fD\x80\xe5\xfd/<\x91ys\xf1\x04\xc9\x0c" +
	"7\x97\x0f\xfc\xb0\x94\xff\xf8\xec5\"x\xd2]\xf16" +
	"\xb9\x82\xc8\xbb\xcf\xdd\xe7=i\x9fLp\xe1\xd4\xc2\xcc" +
	"\xc3_\x9cN\xb2\x0d\xb8\x11\xdbN\xd7\xb2\x1dQ3z" +
	"\xf0z\xf6\\\x12p\xc0e\x16\xa0\"\xc0\xaf\xf2\xf9\xc6" +
	"\xe2\xc5\xd4z\x0b\xe0X\xfa#\xee\x9f\xe4\x98\x93\xc3\xd3" +
	"\xab\x0f\x1d{\xe0K{`\xb6\xfe\xf4\xee]W\x1e\xcb" +
	"]\xa1\x14\xb3\x88i\xf7;OGR\x0e\xbb\x0b\x04#" +
	"^-\xe5\x8f\x9e?\xbdA*\x03\xc4\xa2\xf7Bp\"" +
	"\xef\x9c\xbb\xec\xadG\xe85\xf7\x0c\xc1<\xee\x1f\xff\xe4" +
	"\xb3\xde\xb1\x8b\xb7u8+V<-\"Z\xb1\xcf[" +
	"\xb4O\xe6\xc57\xde\xfby5x\xea\xfbX\xdf\xe8\x9c" +
	"\xc8\x81\x1c\xb3\xbcy\xdb\xe6\x1b\x9f\xae]\xba\x8dfZ" +
	"\xacz\x87#\x9aY!\xbcY1Hdf\x16r\xaf" +
	"}xf\xe0rb\x0e\x9e\x12\xd7#\xb4\x1d\xc3\xad\x06" +
	";\xc9\xde\x11+\xde\xfb\xe2~\"\xef\xa4x\xcb\xbb\x1a" +
	"i\xba\xf0\x9bX\xda\xd8\xf6\xe3\xef\x09M\xdf\x0a\x06\xfa" +
	"\xc5\xe8j\xb1\\\x0b\x87\x8a\\\xd7\xab\xf5\xb1\xc9\x9a." +
	"\xf9\xe1PP\xd3\xa5\xfe)\xbf1\x1f4\x1bD\xca\xe1" +
	"\x0e\x91\x03\"\x99\x19!R=\x1c\xaa\x8f!\x7fT\x07" +
	"\xf3>z\xe3Y\x12\xd0K\xe8\xa0<\xd8\xac\x85~8" +
	"\xd4\xb0?\xfd\x05\x1d\xea\xb9;\xa0D[\xa5(\xf9a" +
	"\x01P\x0eO%\xdaC\xdb\xccR\xee &S\"k" +
	";\x99@\x01\x9d\xaav\xb7\xfe-\xe8\xe0\x95\xee\x8d\x8e" +
	"\xc5\xaa\xc6[\x9fB\xc63'@\xd2\x7fq\xdel4" +
	"\xc9\xb8#f\xcc\xd6u\xb3\x8c41\xa4\x13,,\xc9" +
	"\x124\xfa\x0b\xf9\x88\xa4\xfb\xf9\x9er%@\xc9\x8e\xa0" +
	"\xe7V\x89Gl\x89~\x0e\xb5\x8bA\x02}\xb0/w" +
	"\xdaN\xb6s\xa8G\x19\xb2U=\xe7\xb7\xeb\xfe\x7f[" +
	"\xadi?\xa7\x03>\xef\xdbJi\xee\xa4\x8d\x89J\xed" +
	"\xddJ\xa4&8\xd4$C\x06\x7f\x99V\xad\xfd\x87\x88" +
	"\xd4\xd3\x1c\xeaY\x86\x0c\xbba\xfa\xc0\x88\xa4\xb2\xb2&" +
	"9\xd4\x0c\x83\xa8V\x02rMQ\xd7\xf5K\x95\xa0B" +
	"\xbcy\x1c9\x87\x13\x90#d\x8be]\x854\xc7^" +
	"_\xfb\xe8\xebo\x06\xcfv\xd7s\xb0Y\x13ar\xfb" +
	"\xed\x80B\xfb\xe6I9\x12m?\x1f\x99\xae\xdb\xfa\xff" +
	"a\xca\xd6\xfe\xd1\xe8\xa83\xe5\xbf\x9c\xaf4\x9aQ\xa5" +
	"\x02O\xa9\x1e$\xa2\x8e(\x0e\x05\xa2\x7f]\xe1\xd4x" +
	"\xcb[I\x1f<C\xa4\xd2\x1cj;\x83)\x96+A" +
	")\xf4\xabD\x84{\x09\x05\x0e\xf4\xc69F\xb0/;" +
	"d\xed\xae\x16E\xb9\x16*\x07H$\x1eF\xf2\xd6\x11" +
	"%\xd5\x13\x8d\xa4\x9d\x91h\xa7\x88\x1c~\x90\x98\x1c\x10" +
	"\x88\x03\x16\xed(\x96\x9b\xece\xc9\x08\x1e4&\x90\xb5" +
	"\xf6\xed6\xb2d4\xdct\xf7\xdf\x01\x00\x00\xff\xffI" +
	"(\xb9\xdf"

func init() {
	schemas.Register(schema_efb5a91f96d44de3,
		0x85962033efbe6161,
		0x8f702043cf5adb9c,
		0x8f85860d3c5e499a,
		0xaec21d58779cc86c,
		0xb90ffa2761585171,
		0xc105d085735711e1,
		0xc718781cb2553199,
		0xcfaebe761f647d07,
		0xd03a10b4ad79653b,
		0xd3426cb2da908260,
		0xdbbdb0fd1b231b9a,
		0xe325af947f127758,
		0xe41237e4098ed922,
		0xeed523cf9607ecc8)
}
