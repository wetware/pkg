// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	strconv "strconv"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Spawn(ctx context.Context, params func(Executor_spawn_Params) error) (Executor_spawn_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "spawn",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_spawn_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_spawn_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Spawn(context.Context, Executor_spawn) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "spawn",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Spawn(ctx, Executor_spawn{call})
		},
	})

	return methods
}

// Executor_spawn holds the state for a server call to Executor.spawn.
// See server.Call for documentation.
type Executor_spawn struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_spawn) Args() Executor_spawn_Params {
	return Executor_spawn_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_spawn) AllocResults() (Executor_spawn_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_spawn_Params capnp.Struct

// Executor_spawn_Params_TypeID is the unique identifier for the type Executor_spawn_Params.
const Executor_spawn_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func NewRootExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func ReadRootExecutor_spawn_Params(msg *capnp.Message) (Executor_spawn_Params, error) {
	root, err := msg.Root()
	return Executor_spawn_Params(root.Struct()), err
}

func (s Executor_spawn_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Params) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Params {
	return Executor_spawn_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Params) ByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_spawn_Params) HasByteCode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Params) SetByteCode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_spawn_Params) EntryPoint() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextDefault("run"), err
}

func (s Executor_spawn_Params) HasEntryPoint() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_spawn_Params) EntryPointBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytesDefault("run"), err
}

func (s Executor_spawn_Params) SetEntryPoint(v string) error {
	return capnp.Struct(s).SetNewText(1, v)
}

// Executor_spawn_Params_List is a list of Executor_spawn_Params.
type Executor_spawn_Params_List = capnp.StructList[Executor_spawn_Params]

// NewExecutor_spawn_Params creates a new list of Executor_spawn_Params.
func NewExecutor_spawn_Params_List(s *capnp.Segment, sz int32) (Executor_spawn_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_spawn_Params](l), err
}

// Executor_spawn_Params_Future is a wrapper for a Executor_spawn_Params promised by a client call.
type Executor_spawn_Params_Future struct{ *capnp.Future }

func (f Executor_spawn_Params_Future) Struct() (Executor_spawn_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Params(p.Struct()), err
}

type Executor_spawn_Results capnp.Struct

// Executor_spawn_Results_TypeID is the unique identifier for the type Executor_spawn_Results.
const Executor_spawn_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func NewRootExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func ReadRootExecutor_spawn_Results(msg *capnp.Message) (Executor_spawn_Results, error) {
	root, err := msg.Root()
	return Executor_spawn_Results(root.Struct()), err
}

func (s Executor_spawn_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Results) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Results {
	return Executor_spawn_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_spawn_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_spawn_Results_List is a list of Executor_spawn_Results.
type Executor_spawn_Results_List = capnp.StructList[Executor_spawn_Results]

// NewExecutor_spawn_Results creates a new list of Executor_spawn_Results.
func NewExecutor_spawn_Results_List(s *capnp.Segment, sz int32) (Executor_spawn_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_spawn_Results](l), err
}

// Executor_spawn_Results_Future is a wrapper for a Executor_spawn_Results promised by a client call.
type Executor_spawn_Results_Future struct{ *capnp.Future }

func (f Executor_spawn_Results_Future) Struct() (Executor_spawn_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Results(p.Struct()), err
}
func (p Executor_spawn_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Start(ctx context.Context, params func(Process_start_Params) error) (Process_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_start_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_start_Results_Future{Future: ans.Future()}, release
}
func (c Process) Stop(ctx context.Context, params func(Process_stop_Params) error) (Process_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_stop_Results_Future{Future: ans.Future()}, release
}
func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Start(context.Context, Process_start) error

	Stop(context.Context, Process_stop) error

	Wait(context.Context, Process_wait) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Process_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Process_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	return methods
}

// Process_start holds the state for a server call to Process.start.
// See server.Call for documentation.
type Process_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_start) Args() Process_start_Params {
	return Process_start_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_start) AllocResults() (Process_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(r), err
}

// Process_stop holds the state for a server call to Process.stop.
// See server.Call for documentation.
type Process_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stop) Args() Process_stop_Params {
	return Process_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_stop) AllocResults() (Process_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(r), err
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_start_Params capnp.Struct

// Process_start_Params_TypeID is the unique identifier for the type Process_start_Params.
const Process_start_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func NewRootProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func ReadRootProcess_start_Params(msg *capnp.Message) (Process_start_Params, error) {
	root, err := msg.Root()
	return Process_start_Params(root.Struct()), err
}

func (s Process_start_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_start_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Params) DecodeFromPtr(p capnp.Ptr) Process_start_Params {
	return Process_start_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Params_List is a list of Process_start_Params.
type Process_start_Params_List = capnp.StructList[Process_start_Params]

// NewProcess_start_Params creates a new list of Process_start_Params.
func NewProcess_start_Params_List(s *capnp.Segment, sz int32) (Process_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Params](l), err
}

// Process_start_Params_Future is a wrapper for a Process_start_Params promised by a client call.
type Process_start_Params_Future struct{ *capnp.Future }

func (f Process_start_Params_Future) Struct() (Process_start_Params, error) {
	p, err := f.Future.Ptr()
	return Process_start_Params(p.Struct()), err
}

type Process_start_Results capnp.Struct

// Process_start_Results_TypeID is the unique identifier for the type Process_start_Results.
const Process_start_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func NewRootProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func ReadRootProcess_start_Results(msg *capnp.Message) (Process_start_Results, error) {
	root, err := msg.Root()
	return Process_start_Results(root.Struct()), err
}

func (s Process_start_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_start_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Results) DecodeFromPtr(p capnp.Ptr) Process_start_Results {
	return Process_start_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Results_List is a list of Process_start_Results.
type Process_start_Results_List = capnp.StructList[Process_start_Results]

// NewProcess_start_Results creates a new list of Process_start_Results.
func NewProcess_start_Results_List(s *capnp.Segment, sz int32) (Process_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Results](l), err
}

// Process_start_Results_Future is a wrapper for a Process_start_Results promised by a client call.
type Process_start_Results_Future struct{ *capnp.Future }

func (f Process_start_Results_Future) Struct() (Process_start_Results, error) {
	p, err := f.Future.Ptr()
	return Process_start_Results(p.Struct()), err
}

type Process_stop_Params capnp.Struct

// Process_stop_Params_TypeID is the unique identifier for the type Process_stop_Params.
const Process_stop_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func NewRootProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func ReadRootProcess_stop_Params(msg *capnp.Message) (Process_stop_Params, error) {
	root, err := msg.Root()
	return Process_stop_Params(root.Struct()), err
}

func (s Process_stop_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Params) DecodeFromPtr(p capnp.Ptr) Process_stop_Params {
	return Process_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Params_List is a list of Process_stop_Params.
type Process_stop_Params_List = capnp.StructList[Process_stop_Params]

// NewProcess_stop_Params creates a new list of Process_stop_Params.
func NewProcess_stop_Params_List(s *capnp.Segment, sz int32) (Process_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Params](l), err
}

// Process_stop_Params_Future is a wrapper for a Process_stop_Params promised by a client call.
type Process_stop_Params_Future struct{ *capnp.Future }

func (f Process_stop_Params_Future) Struct() (Process_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Params(p.Struct()), err
}

type Process_stop_Results capnp.Struct

// Process_stop_Results_TypeID is the unique identifier for the type Process_stop_Results.
const Process_stop_Results_TypeID = 0xc53168b273d497ee

func NewProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func NewRootProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func ReadRootProcess_stop_Results(msg *capnp.Message) (Process_stop_Results, error) {
	root, err := msg.Root()
	return Process_stop_Results(root.Struct()), err
}

func (s Process_stop_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Results) DecodeFromPtr(p capnp.Ptr) Process_stop_Results {
	return Process_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Results_List is a list of Process_stop_Results.
type Process_stop_Results_List = capnp.StructList[Process_stop_Results]

// NewProcess_stop_Results creates a new list of Process_stop_Results.
func NewProcess_stop_Results_List(s *capnp.Segment, sz int32) (Process_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Results](l), err
}

// Process_stop_Results_Future is a wrapper for a Process_stop_Results promised by a client call.
type Process_stop_Results_Future struct{ *capnp.Future }

func (f Process_stop_Results_Future) Struct() (Process_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Results(p.Struct()), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) Error() (Error, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Error(p.Struct()), err
}

func (s Process_wait_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_wait_Results) SetError(v Error) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewError sets the error field to a newly
// allocated Error struct, preferring placement in s's segment.
func (s Process_wait_Results) NewError() (Error, error) {
	ss, err := NewError(capnp.Struct(s).Segment())
	if err != nil {
		return Error{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}
func (p Process_wait_Results_Future) Error() Error_Future {
	return Error_Future{Future: p.Future.Field(0, nil)}
}

type Error capnp.Struct
type Error_exitErr Error
type Error_Which uint16

const (
	Error_Which_none    Error_Which = 0
	Error_Which_msg     Error_Which = 1
	Error_Which_exitErr Error_Which = 2
)

func (w Error_Which) String() string {
	const s = "nonemsgexitErr"
	switch w {
	case Error_Which_none:
		return s[0:4]
	case Error_Which_msg:
		return s[4:7]
	case Error_Which_exitErr:
		return s[7:14]

	}
	return "Error_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Error_TypeID is the unique identifier for the type Error.
const Error_TypeID = 0xd6be5a33d8c2c538

func NewError(s *capnp.Segment) (Error, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Error(st), err
}

func NewRootError(s *capnp.Segment) (Error, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Error(st), err
}

func ReadRootError(msg *capnp.Message) (Error, error) {
	root, err := msg.Root()
	return Error(root.Struct()), err
}

func (s Error) String() string {
	str, _ := text.Marshal(0xd6be5a33d8c2c538, capnp.Struct(s))
	return str
}

func (s Error) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Error) DecodeFromPtr(p capnp.Ptr) Error {
	return Error(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Error) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Error) Which() Error_Which {
	return Error_Which(capnp.Struct(s).Uint16(0))
}
func (s Error) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Error) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Error) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Error) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Error) Msg() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != msg")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Error) HasMsg() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Error) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Error) SetMsg(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s Error) ExitErr() Error_exitErr { return Error_exitErr(s) }

func (s Error) SetExitErr() {
	capnp.Struct(s).SetUint16(0, 2)
}

func (s Error_exitErr) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Error_exitErr) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Error_exitErr) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Error_exitErr) Code() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Error_exitErr) SetCode(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Error_exitErr) Module() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Error_exitErr) HasModule() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Error_exitErr) ModuleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Error_exitErr) SetModule(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Error_List is a list of Error.
type Error_List = capnp.StructList[Error]

// NewError creates a new list of Error.
func NewError_List(s *capnp.Segment, sz int32) (Error_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Error](l), err
}

// Error_Future is a wrapper for a Error promised by a client call.
type Error_Future struct{ *capnp.Future }

func (f Error_Future) Struct() (Error, error) {
	p, err := f.Future.Ptr()
	return Error(p.Struct()), err
}
func (p Error_Future) ExitErr() Error_exitErr_Future { return Error_exitErr_Future{p.Future} }

// Error_exitErr_Future is a wrapper for a Error_exitErr promised by a client call.
type Error_exitErr_Future struct{ *capnp.Future }

func (f Error_exitErr_Future) Struct() (Error_exitErr, error) {
	p, err := f.Future.Ptr()
	return Error_exitErr(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda|\x94_\x88\x1bU\x14\xc6\xcfw\xef$\x93b" +
	"\xd2\xec\xed\xa4\x15\xfb\x12\xba\xaeh#M\x93\xae\x82-" +
	"\x96\x8d\xd5a\xb1X\x9c+\xf8R\xa8t\xcc\x0e\x1aH" +
	"2\xe1\xce\x84l\x9f\x8a \xf4]\x11A\x11K\xa1\xd4" +
	"\x82kK\xf5iEAa\xf1UVqE\x1f\x84\x15" +
	"A|XT\xf0aA\xbdr'\x7f\xd7\xec\xee[n" +
	"N\xeew~\xe7\xfb\xceM\xe5\x06jV5w-E" +
	"L\xd6Ri\xbd\x91\xfa+\\\xf1\xff~\x9dd\x01\xd0" +
	"O\xac}\xf9\xfd\xfc\xc5\xcf\xbf\xa3\xc3\xb0A\xe4\xdcf" +
	"\x9b\x04g\x85\xf5\x08\xfa\xd1\xcb\xd7\xdfw\xe3\xcb\xef\x91" +
	"8\x02\xa2\x14l\xa2\xf9\x03\xfc(\x08\x8e\xe0\x0b\x04\xbd" +
	"\xde}\xed\xe6\xeaK\xe5;$\x0er]\xef=\xdc\xab" +
	"\xfe\"\xdf!\x82S\xe5\xab\xcein\x139\x8f\xf3E" +
	"\xe7\x92\xf9\xa4\xdf\xfdz\xfd\xd6\xdd#\xcf\x7fJ\xe2\xfe" +
	"\x91\x9a\xcbKF\xedB\xa2\xb6\xf5\xf6\xb7\xd1\xbdW\xab" +
	"k\xfdv\x96\xa9\xb7L7K\xffz\xed\x8b\xf4O\xdd" +
	"\x93\xeb\x13\x95\x17\xf9!S\x19\xe1\xcb\x83\xc0\x18\xc1\x85" +
	"\xcd\x89\x9c\xb3\xfc\x86\xe3&\x18O\xf1;\x04\xfd\xe1b" +
	"e\xee\xfa'\xa5\x8d\x09\x9d\xcf\xf8\xac\xd1\x99O?\xf4" +
	"\xc17\xbf?\xf8\xc3\xd4$7\xf9=g%\x91\xb8\xcd" +
	"\xbfr\x8e\x99;z\xf1\xd2\xc9\xbb\x0f|tkkB" +
	"\xe6\x80\x95\xe0\x1cz\xf3\x8d\xb7~;{\xdf\x9f\x83\x19" +
	"\x99)\xfda:\xc0\xd9\xe6\xc6\xd2\x9f?\xfe1\xb3y" +
	"\xbe\xb1=q\xd5\xb7\x8e\x82*\xba\xa3\xc2z\x10Ee" +
	"V\xf7;\xed\xce\x19W\xa9P\x95\x83\xe5Fl\xbbJ" +
	"\xc9\x0c\xb7fP\x00#\x12\xc7KDr\x8eCV\x18" +
	"\x80\x028\x918q\x86H>\xc2!\x1fc\xc8\xd7\xc3" +
	"\xa5\x00\x19b\xc8\x10\x16Z\xe1R\xb7\x19 K\x0cY" +
	"\xc2\xa8\x0b\xefw\xf1\x06\xc7\x9e\xdf\x88\xe7^\x08\xa2n" +
	"\x93\xc7\x91\xb4\xb8Ed\x81H\xe4N\x11\xc9\x0c\x87," +
	"0\x14\x03\x83\x84\x99\xb1\xe7\x04\xccLhb@\xbe\xbc" +
	"\x10\xd4\xbbq\xa8<@Z<E4\xb2\x05\xc3\x1d\x10" +
	"\xe2\x141\x91\xb2\x8bQ\xc7\xef\xb5k\xf00\x85\xe6." +
	"\xf7U\xca\xc9O\x0c\\\xbe\xdb\xdc\x09wn\x0cwu" +
	"p\x1bb\x1c%\x01b\xef\x91\xa38\xec\x8cF\xde\xd7" +
	"\x17\xcfW~\x0b\xd1\xd4\x9c\xcaV\xfd!\xb3\xdc\xcaj" +
	"\x9d0\xb9&\x9c\x1a\x87|\x8e!\x87\x7fu\x01\xe6\xdb" +
	"gg\x89\xe43\x1c\xd2c\xc8\xb1\x7f40~\x85\xe2" +
	"\xc29b\xf9v\xd8\x0e(m\xb7\xa2W\x86Q]5" +
	"\xd9\xbbJ\xed\xcd\xef\xab~fv3\x9e\x82\xf3T1" +
	"9\xf7\xf1L\x06\xc3\xcd\xc3\xf0\x11\x08i2pm`" +
	"\xb4\xd0\x18>Aq\xbaDL\x9c\xb0\xc1Fo\x0f\xc3" +
	"\x7f\x03q\xcc\xd4\x0e\xdb\xc5\x84\xa0\x86\xbcq\xb2\x86\xbc" +
	"\xf1j\xd7$w8\xfe\x7f3wO\xdb\xf3\x95\xed\xb7" +
	"\"\xb3\xf6\x83\xb0\x8f\x9f\x1fo\xb80k\x0f@T/" +
	"\x12\xc9\x0a\x87|\x92A\xbf|%\x0e\x9e\x0e\x97\x02\"" +
	"B\x8e\x18r\x04\x1d\xb4cu\xc5\x0b\x1b\xc4\xdb\xf1\xc0" +
	"X\x12\x98\xb5U\xb7\xbd\xbf\xaf\x06\x93\xb7\xa2\xff\x02\x00" +
	"\x00\xff\xff\xa8.}\xb7"

func init() {
	schemas.Register(schema_9a51e53177277763,
		0x84fc61ad6ff505d7,
		0x9d6074459fa0602b,
		0xaf2e5ebaa58175d2,
		0xbb4f16b0a7d2d09b,
		0xc53168b273d497ee,
		0xd22f75df06c187e8,
		0xd6be5a33d8c2c538,
		0xd72ab4a0243047ac,
		0xda23f0d3a8250633,
		0xeea7ae19b02f5d47,
		0xf20b3dea95929312,
		0xf9694ae208dbb3e3)
}
