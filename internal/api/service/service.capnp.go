// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	pubsub "github.com/wetware/ww/internal/api/pubsub"
	strconv "strconv"
)

type Registry capnp.Client

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xfdee076f6379cb46

func (c Registry) Provide(ctx context.Context, params func(Registry_provide_Params) error) (Registry_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      0,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_provide_Results_Future{Future: ans.Future()}, release
}
func (c Registry) FindProviders(ctx context.Context, params func(Registry_findProviders_Params) error) (Registry_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      1,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registry) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registry) AddRef() Registry {
	return Registry(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registry) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registry) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registry) DecodeFromPtr(p capnp.Ptr) Registry {
	return Registry(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registry) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registry) IsSame(other Registry) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registry) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registry) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	Provide(context.Context, Registry_provide) error

	FindProviders(context.Context, Registry_findProviders) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server) Registry {
	return Registry(capnp.NewClient(Registry_NewServer(s)))
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      0,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Registry_provide{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      1,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Registry_findProviders{call})
		},
	})

	return methods
}

// Registry_provide holds the state for a server call to Registry.provide.
// See server.Call for documentation.
type Registry_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_provide) Args() Registry_provide_Params {
	return Registry_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_provide) AllocResults() (Registry_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(r), err
}

// Registry_findProviders holds the state for a server call to Registry.findProviders.
// See server.Call for documentation.
type Registry_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_findProviders) Args() Registry_findProviders_Params {
	return Registry_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_findProviders) AllocResults() (Registry_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(r), err
}

// Registry_List is a list of Registry.
type Registry_List = capnp.CapList[Registry]

// NewRegistry creates a new list of Registry.
func NewRegistry_List(s *capnp.Segment, sz int32) (Registry_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registry](l), err
}

type Registry_provide_Params capnp.Struct

// Registry_provide_Params_TypeID is the unique identifier for the type Registry_provide_Params.
const Registry_provide_Params_TypeID = 0xbf9edfd4684337f6

func NewRegistry_provide_Params(s *capnp.Segment) (Registry_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_provide_Params(st), err
}

func NewRootRegistry_provide_Params(s *capnp.Segment) (Registry_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_provide_Params(st), err
}

func ReadRootRegistry_provide_Params(msg *capnp.Message) (Registry_provide_Params, error) {
	root, err := msg.Root()
	return Registry_provide_Params(root.Struct()), err
}

func (s Registry_provide_Params) String() string {
	str, _ := text.Marshal(0xbf9edfd4684337f6, capnp.Struct(s))
	return str
}

func (s Registry_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_provide_Params) DecodeFromPtr(p capnp.Ptr) Registry_provide_Params {
	return Registry_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_provide_Params) Topic() pubsub.Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Topic(p.Interface().Client())
}

func (s Registry_provide_Params) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_provide_Params) SetTopic(v pubsub.Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registry_provide_Params) Location() (SignedLocation, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SignedLocation(p.Struct()), err
}

func (s Registry_provide_Params) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registry_provide_Params) SetLocation(v SignedLocation) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Registry_provide_Params) NewLocation() (SignedLocation, error) {
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Registry_provide_Params_List is a list of Registry_provide_Params.
type Registry_provide_Params_List = capnp.StructList[Registry_provide_Params]

// NewRegistry_provide_Params creates a new list of Registry_provide_Params.
func NewRegistry_provide_Params_List(s *capnp.Segment, sz int32) (Registry_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registry_provide_Params](l), err
}

// Registry_provide_Params_Future is a wrapper for a Registry_provide_Params promised by a client call.
type Registry_provide_Params_Future struct{ *capnp.Future }

func (f Registry_provide_Params_Future) Struct() (Registry_provide_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_provide_Params(p.Struct()), err
}
func (p Registry_provide_Params_Future) Topic() pubsub.Topic {
	return pubsub.Topic(p.Future.Field(0, nil).Client())
}

func (p Registry_provide_Params_Future) Location() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(1, nil)}
}

type Registry_provide_Results capnp.Struct

// Registry_provide_Results_TypeID is the unique identifier for the type Registry_provide_Results.
const Registry_provide_Results_TypeID = 0xd9ef66060e1157d3

func NewRegistry_provide_Results(s *capnp.Segment) (Registry_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(st), err
}

func NewRootRegistry_provide_Results(s *capnp.Segment) (Registry_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(st), err
}

func ReadRootRegistry_provide_Results(msg *capnp.Message) (Registry_provide_Results, error) {
	root, err := msg.Root()
	return Registry_provide_Results(root.Struct()), err
}

func (s Registry_provide_Results) String() string {
	str, _ := text.Marshal(0xd9ef66060e1157d3, capnp.Struct(s))
	return str
}

func (s Registry_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_provide_Results) DecodeFromPtr(p capnp.Ptr) Registry_provide_Results {
	return Registry_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registry_provide_Results_List is a list of Registry_provide_Results.
type Registry_provide_Results_List = capnp.StructList[Registry_provide_Results]

// NewRegistry_provide_Results creates a new list of Registry_provide_Results.
func NewRegistry_provide_Results_List(s *capnp.Segment, sz int32) (Registry_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registry_provide_Results](l), err
}

// Registry_provide_Results_Future is a wrapper for a Registry_provide_Results promised by a client call.
type Registry_provide_Results_Future struct{ *capnp.Future }

func (f Registry_provide_Results_Future) Struct() (Registry_provide_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_provide_Results(p.Struct()), err
}

type Registry_findProviders_Params capnp.Struct

// Registry_findProviders_Params_TypeID is the unique identifier for the type Registry_findProviders_Params.
const Registry_findProviders_Params_TypeID = 0xd589c56f3d6a445e

func NewRegistry_findProviders_Params(s *capnp.Segment) (Registry_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_findProviders_Params(st), err
}

func NewRootRegistry_findProviders_Params(s *capnp.Segment) (Registry_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_findProviders_Params(st), err
}

func ReadRootRegistry_findProviders_Params(msg *capnp.Message) (Registry_findProviders_Params, error) {
	root, err := msg.Root()
	return Registry_findProviders_Params(root.Struct()), err
}

func (s Registry_findProviders_Params) String() string {
	str, _ := text.Marshal(0xd589c56f3d6a445e, capnp.Struct(s))
	return str
}

func (s Registry_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Registry_findProviders_Params {
	return Registry_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_findProviders_Params) Topic() pubsub.Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Topic(p.Interface().Client())
}

func (s Registry_findProviders_Params) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_findProviders_Params) SetTopic(v pubsub.Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registry_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(1)
	return channel.Sender(p.Interface().Client())
}

func (s Registry_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registry_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Registry_findProviders_Params_List is a list of Registry_findProviders_Params.
type Registry_findProviders_Params_List = capnp.StructList[Registry_findProviders_Params]

// NewRegistry_findProviders_Params creates a new list of Registry_findProviders_Params.
func NewRegistry_findProviders_Params_List(s *capnp.Segment, sz int32) (Registry_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registry_findProviders_Params](l), err
}

// Registry_findProviders_Params_Future is a wrapper for a Registry_findProviders_Params promised by a client call.
type Registry_findProviders_Params_Future struct{ *capnp.Future }

func (f Registry_findProviders_Params_Future) Struct() (Registry_findProviders_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_findProviders_Params(p.Struct()), err
}
func (p Registry_findProviders_Params_Future) Topic() pubsub.Topic {
	return pubsub.Topic(p.Future.Field(0, nil).Client())
}

func (p Registry_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(1, nil).Client())
}

type Registry_findProviders_Results capnp.Struct

// Registry_findProviders_Results_TypeID is the unique identifier for the type Registry_findProviders_Results.
const Registry_findProviders_Results_TypeID = 0xd86baa632daef690

func NewRegistry_findProviders_Results(s *capnp.Segment) (Registry_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(st), err
}

func NewRootRegistry_findProviders_Results(s *capnp.Segment) (Registry_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(st), err
}

func ReadRootRegistry_findProviders_Results(msg *capnp.Message) (Registry_findProviders_Results, error) {
	root, err := msg.Root()
	return Registry_findProviders_Results(root.Struct()), err
}

func (s Registry_findProviders_Results) String() string {
	str, _ := text.Marshal(0xd86baa632daef690, capnp.Struct(s))
	return str
}

func (s Registry_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Registry_findProviders_Results {
	return Registry_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registry_findProviders_Results_List is a list of Registry_findProviders_Results.
type Registry_findProviders_Results_List = capnp.StructList[Registry_findProviders_Results]

// NewRegistry_findProviders_Results creates a new list of Registry_findProviders_Results.
func NewRegistry_findProviders_Results_List(s *capnp.Segment, sz int32) (Registry_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registry_findProviders_Results](l), err
}

// Registry_findProviders_Results_Future is a wrapper for a Registry_findProviders_Results promised by a client call.
type Registry_findProviders_Results_Future struct{ *capnp.Future }

func (f Registry_findProviders_Results_Future) Struct() (Registry_findProviders_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_findProviders_Results(p.Struct()), err
}

type SignedLocation capnp.Struct

// SignedLocation_TypeID is the unique identifier for the type SignedLocation.
const SignedLocation_TypeID = 0x95d97bd68e78b8dc

func NewSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func NewRootSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func ReadRootSignedLocation(msg *capnp.Message) (SignedLocation, error) {
	root, err := msg.Root()
	return SignedLocation(root.Struct()), err
}

func (s SignedLocation) String() string {
	str, _ := text.Marshal(0x95d97bd68e78b8dc, capnp.Struct(s))
	return str
}

func (s SignedLocation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SignedLocation) DecodeFromPtr(p capnp.Ptr) SignedLocation {
	return SignedLocation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SignedLocation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SignedLocation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SignedLocation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SignedLocation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SignedLocation) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedLocation) HasSignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SignedLocation) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SignedLocation) Location() (Location, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Location(p.Struct()), err
}

func (s SignedLocation) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SignedLocation) SetLocation(v Location) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated Location struct, preferring placement in s's segment.
func (s SignedLocation) NewLocation() (Location, error) {
	ss, err := NewLocation(capnp.Struct(s).Segment())
	if err != nil {
		return Location{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SignedLocation_List is a list of SignedLocation.
type SignedLocation_List = capnp.StructList[SignedLocation]

// NewSignedLocation creates a new list of SignedLocation.
func NewSignedLocation_List(s *capnp.Segment, sz int32) (SignedLocation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SignedLocation](l), err
}

// SignedLocation_Future is a wrapper for a SignedLocation promised by a client call.
type SignedLocation_Future struct{ *capnp.Future }

func (f SignedLocation_Future) Struct() (SignedLocation, error) {
	p, err := f.Future.Ptr()
	return SignedLocation(p.Struct()), err
}
func (p SignedLocation_Future) Location() Location_Future {
	return Location_Future{Future: p.Future.Field(1, nil)}
}

type Location capnp.Struct
type Location_Which uint16

const (
	Location_Which_maddrs Location_Which = 0
	Location_Which_anchor Location_Which = 1
	Location_Which_custom Location_Which = 2
)

func (w Location_Which) String() string {
	const s = "maddrsanchorcustom"
	switch w {
	case Location_Which_maddrs:
		return s[0:6]
	case Location_Which_anchor:
		return s[6:12]
	case Location_Which_custom:
		return s[12:18]

	}
	return "Location_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0xe61540af32cf81b6

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0xe61540af32cf81b6, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Location) Which() Location_Which {
	return Location_Which(capnp.Struct(s).Uint16(0))
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Service() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location) HasService() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) ServiceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location) SetService(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Location) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Location) Maddrs() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != maddrs")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Location) HasMaddrs() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetMaddrs(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMaddrs sets the maddrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Location) NewMaddrs(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(0, 0)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Location) Anchor() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Location) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) AnchorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Location) SetAnchor(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(2, v)
}

func (s Location) Custom() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != custom")
	}
	return capnp.Struct(s).Ptr(2)
}

func (s Location) HasCustom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetCustom(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(2, v)
}
func (s Location) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Location) HasMeta() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Location) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Location) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Custom() *capnp.Future {
	return p.Future.Field(2, nil)
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) SetRequest() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Message) Response() (SignedLocation, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SignedLocation(p.Struct()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v SignedLocation) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Message) NewResponse() (SignedLocation, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Response() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcba4f486a351ac3 = "x\xda\x8cTM\x88\x1cE\x18\xfd^U\xff\xac\xb03" +
	"\xb3\x95\x1e\x8d\x06\x86\xb9\xac\x90\x88\x89\xbb\x1b\xc5\xb0(" +
	"3\xc4\x1fD\"N\x8d\x87\xe0Eh{*\xb3\xbd\xd9" +
	"\xe9\x1e\xbb{\xa2\xc1\xc3\xe2IrP\x14\x14\"\xa8\x18" +
	"\xf0\xa2\x07\x13\xc4\xc8f5\xa8\x88\x07\xf1 h\x14\x03" +
	"\x82'\x7fXHD\x84\x80\xe0\xa6\xa4\xb6\xe7\xcf\x09\x9a" +
	"\xbd\x15_\xbd\xfa\xde\xfb\xde+\xbe\xb9\x84\xd5\xad\xf9\x82" +
	"\xbe\x81\x98\xcclG\xff\xb8\xf6\xcc\x8b\xdf?{\xf1U" +
	"\x12E\xe8\xcfw\xdd\xb5\xfc\xd0\xa3\xeb\x7f\x93\xcd\\\"" +
	"\xefgk\xc3\xfb\xc32\xa7K\xd6\xd3\x04}\xe5\xee\xfb" +
	"\x96.\xfc\xf4\xe6'$v\x82r\xcc~i/\x80\xe0" +
	"=n\x1b@\xf5\xcb\xee\xca\x9f\x1b\xa7\xbf!Y\xc4X" +
	"\xb7\x07\xe02\"\xef\x9c\xfd\xbe\xf7\x99m\xda\x9d\xdfB" +
	"?q\xff\xf2\xbd\xf1\x17'\xbe\x1boWq\x9e4\xed" +
	"\xf68\x06\xf0\xd2\x95\xf7\xf6\x06\xef\x1e\xfd!\x07\x18!" +
	"\xfb\xcf:\xcb K\x7f{X\x14\x9d#\xbf_\x1c\xbb" +
	"9\xe5,\x9a\x9b\x0f\x9f\xfbz\xe1t\xfd\xc6_&%" +
	"X.'\xf2N8\xeb\xde\xcb\x8e\x81\xbf\xe0\x1c\x06A" +
	"?\xf8\xd5\xf1 v/o\x92(\xf2\x11\x9a\xe0\xfd\xe5" +
	"\xae{\x982b7\xdd\xe7=9\xe5\xd2\xaf:U\xc9" +
	"\xb10P\xfbX\xe0w\xa3\xee\xe2ca;R\xadC" +
	"q\xe0\x97\xb20\x8e\x1a\x80\x9c\xe2\x16\x91\x05\"\xb1\xa7" +
	"I$ws\xc8;\x19\x04P\x86)\xce?L$\xe7" +
	"8\xe4=\x0c:\x0d\xdb\x91\x9f\xf5\x12\x82B\x81\x18\x0a" +
	"\x04\xbd\x12\x07\xbe\xe9ED\x98\x19\xcdB\xc0\x0ca\xc8" +
	"\xcfs\xfe\xa6j\x87i\x96\x1c\xdf\xd7M\xe2caK" +
	"\xcd6\xaa~\xe2w\xd2q\x15\x0bDr\x96C\xce\x8d" +
	"\xa9\xd8kT\xdc\xce!\x0f0T\xb3\xb8\x1b\x06\x10\xfa" +
	"\xcc\xd1\x99;v\xbf\x13\x9d4\\\xe2\x1a%\xc3_2" +
	"\xa1\x04\xb9\x92GT5M\xfd\xb6\xea[0\xadu\xce" +
	"~p\xc4^\xc0U}-\xfdj\xa2\x9e\xea\xa94#" +
	"G'*\xed\xc6Q\xaa\xfe\x9f\xd0\x9a\x18\xfdH\x18\xb5" +
	"\x1a\xf9\xf8I:\xdb\xf0\x13w;\x06\xdc\xd6\xcf\xa6\xf5" +
	"\xdf\x06\x94\x82%?\x82\xd0\x97o\xda8P\xbe\xf4\xd1" +
	"oDT\x87@UZ\x0c\xe3E\x81\x9d\xd2\x02\x80\x06" +
	"\xc7\x84n\xb1m\xddM\x95\x96z+Yz\xdd\x84\x9b" +
	"5\x95\xfe\x0b\xd8\x0f\xe0P\\\xcb\xe32\x09\xdc<\x9c" +
	"\xfe5\x13\xc0+\x1c\xf2\xad\xb1\xe9\xdf\xd8E$Or" +
	"\xc8\xb7\x19*LkV\x06#\x12\xa7\x16\x89\xe4\xeb\x1c" +
	"r\x8d\xa1\xc2\xaf\x9a2'\x12gM\xf9\x0c\x87\xfc\x98" +
	"\xa1bm\x9a\xb2E$\xce\x99\xf2\x07\x1c\xf2S\x06a" +
	"\xf32l\"q\xde\xf8\xba\xc6!/0\xac\xf6\x15b" +
	"\x9a\x18\xa6\x09<l\x0d\x8e\xb5\x8e\xdfj%)\x8a\xb4" +
	"e\x9a\xf9\xfbEB\xcd\x8f\x82\xa58\x19\x82\x82^\x9a" +
	"\xc5\x1d\xec \x86\x1d\x84RGe\xfe\xe0\xc5t\xfeb" +
	"\xd2\x84\xa6\xaa\xe5v\xe5\xdf\xd0&\x1an,\x0c\x16\x86" +
	"\x98?HL\xdc\xeab\xb4~0X3\xe2\x96\x84\x98" +
	"\x10\xeej\xdf\xed:\xf4 &\xaan\x05UG\x03\xf8" +
	"'\x00\x00\xff\xff<\xe9n\xa5"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x95d97bd68e78b8dc,
		0xbf9edfd4684337f6,
		0xd2afeaf36c70c91f,
		0xd589c56f3d6a445e,
		0xd86baa632daef690,
		0xd9ef66060e1157d3,
		0xe61540af32cf81b6,
		0xfdee076f6379cb46)
}
