// Code generated by capnpc-go. DO NOT EDIT.

package discovery

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type ServiceDiscovery capnp.Client

// ServiceDiscovery_TypeID is the unique identifier for the type ServiceDiscovery.
const ServiceDiscovery_TypeID = 0x9b3bf79b776887bc

func (c ServiceDiscovery) Provider(ctx context.Context, params func(ServiceDiscovery_provider_Params) error) (ServiceDiscovery_provider_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b3bf79b776887bc,
			MethodID:      0,
			InterfaceName: "service.capnp:ServiceDiscovery",
			MethodName:    "provider",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceDiscovery_provider_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceDiscovery_provider_Results_Future{Future: ans.Future()}, release
}
func (c ServiceDiscovery) Locator(ctx context.Context, params func(ServiceDiscovery_locator_Params) error) (ServiceDiscovery_locator_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b3bf79b776887bc,
			MethodID:      1,
			InterfaceName: "service.capnp:ServiceDiscovery",
			MethodName:    "locator",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceDiscovery_locator_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceDiscovery_locator_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServiceDiscovery) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServiceDiscovery) AddRef() ServiceDiscovery {
	return ServiceDiscovery(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServiceDiscovery) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServiceDiscovery) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServiceDiscovery) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServiceDiscovery) DecodeFromPtr(p capnp.Ptr) ServiceDiscovery {
	return ServiceDiscovery(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServiceDiscovery) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServiceDiscovery) IsSame(other ServiceDiscovery) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServiceDiscovery) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServiceDiscovery) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A ServiceDiscovery_Server is a ServiceDiscovery with a local implementation.
type ServiceDiscovery_Server interface {
	Provider(context.Context, ServiceDiscovery_provider) error

	Locator(context.Context, ServiceDiscovery_locator) error
}

// ServiceDiscovery_NewServer creates a new Server from an implementation of ServiceDiscovery_Server.
func ServiceDiscovery_NewServer(s ServiceDiscovery_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceDiscovery_Methods(nil, s), s, c)
}

// ServiceDiscovery_ServerToClient creates a new Client from an implementation of ServiceDiscovery_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceDiscovery_ServerToClient(s ServiceDiscovery_Server) ServiceDiscovery {
	return ServiceDiscovery(capnp.NewClient(ServiceDiscovery_NewServer(s)))
}

// ServiceDiscovery_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceDiscovery_Methods(methods []server.Method, s ServiceDiscovery_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b3bf79b776887bc,
			MethodID:      0,
			InterfaceName: "service.capnp:ServiceDiscovery",
			MethodName:    "provider",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provider(ctx, ServiceDiscovery_provider{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b3bf79b776887bc,
			MethodID:      1,
			InterfaceName: "service.capnp:ServiceDiscovery",
			MethodName:    "locator",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locator(ctx, ServiceDiscovery_locator{call})
		},
	})

	return methods
}

// ServiceDiscovery_provider holds the state for a server call to ServiceDiscovery.provider.
// See server.Call for documentation.
type ServiceDiscovery_provider struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceDiscovery_provider) Args() ServiceDiscovery_provider_Params {
	return ServiceDiscovery_provider_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceDiscovery_provider) AllocResults() (ServiceDiscovery_provider_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_provider_Results(r), err
}

// ServiceDiscovery_locator holds the state for a server call to ServiceDiscovery.locator.
// See server.Call for documentation.
type ServiceDiscovery_locator struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceDiscovery_locator) Args() ServiceDiscovery_locator_Params {
	return ServiceDiscovery_locator_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceDiscovery_locator) AllocResults() (ServiceDiscovery_locator_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_locator_Results(r), err
}

// ServiceDiscovery_List is a list of ServiceDiscovery.
type ServiceDiscovery_List = capnp.CapList[ServiceDiscovery]

// NewServiceDiscovery creates a new list of ServiceDiscovery.
func NewServiceDiscovery_List(s *capnp.Segment, sz int32) (ServiceDiscovery_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceDiscovery](l), err
}

type ServiceDiscovery_provider_Params capnp.Struct

// ServiceDiscovery_provider_Params_TypeID is the unique identifier for the type ServiceDiscovery_provider_Params.
const ServiceDiscovery_provider_Params_TypeID = 0x9de065d2fff0345d

func NewServiceDiscovery_provider_Params(s *capnp.Segment) (ServiceDiscovery_provider_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_provider_Params(st), err
}

func NewRootServiceDiscovery_provider_Params(s *capnp.Segment) (ServiceDiscovery_provider_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_provider_Params(st), err
}

func ReadRootServiceDiscovery_provider_Params(msg *capnp.Message) (ServiceDiscovery_provider_Params, error) {
	root, err := msg.Root()
	return ServiceDiscovery_provider_Params(root.Struct()), err
}

func (s ServiceDiscovery_provider_Params) String() string {
	str, _ := text.Marshal(0x9de065d2fff0345d, capnp.Struct(s))
	return str
}

func (s ServiceDiscovery_provider_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceDiscovery_provider_Params) DecodeFromPtr(p capnp.Ptr) ServiceDiscovery_provider_Params {
	return ServiceDiscovery_provider_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceDiscovery_provider_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceDiscovery_provider_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceDiscovery_provider_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceDiscovery_provider_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceDiscovery_provider_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceDiscovery_provider_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceDiscovery_provider_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceDiscovery_provider_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ServiceDiscovery_provider_Params_List is a list of ServiceDiscovery_provider_Params.
type ServiceDiscovery_provider_Params_List = capnp.StructList[ServiceDiscovery_provider_Params]

// NewServiceDiscovery_provider_Params creates a new list of ServiceDiscovery_provider_Params.
func NewServiceDiscovery_provider_Params_List(s *capnp.Segment, sz int32) (ServiceDiscovery_provider_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceDiscovery_provider_Params](l), err
}

// ServiceDiscovery_provider_Params_Future is a wrapper for a ServiceDiscovery_provider_Params promised by a client call.
type ServiceDiscovery_provider_Params_Future struct{ *capnp.Future }

func (f ServiceDiscovery_provider_Params_Future) Struct() (ServiceDiscovery_provider_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceDiscovery_provider_Params(p.Struct()), err
}

type ServiceDiscovery_provider_Results capnp.Struct

// ServiceDiscovery_provider_Results_TypeID is the unique identifier for the type ServiceDiscovery_provider_Results.
const ServiceDiscovery_provider_Results_TypeID = 0xe77e8c1d6491055d

func NewServiceDiscovery_provider_Results(s *capnp.Segment) (ServiceDiscovery_provider_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_provider_Results(st), err
}

func NewRootServiceDiscovery_provider_Results(s *capnp.Segment) (ServiceDiscovery_provider_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_provider_Results(st), err
}

func ReadRootServiceDiscovery_provider_Results(msg *capnp.Message) (ServiceDiscovery_provider_Results, error) {
	root, err := msg.Root()
	return ServiceDiscovery_provider_Results(root.Struct()), err
}

func (s ServiceDiscovery_provider_Results) String() string {
	str, _ := text.Marshal(0xe77e8c1d6491055d, capnp.Struct(s))
	return str
}

func (s ServiceDiscovery_provider_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceDiscovery_provider_Results) DecodeFromPtr(p capnp.Ptr) ServiceDiscovery_provider_Results {
	return ServiceDiscovery_provider_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceDiscovery_provider_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceDiscovery_provider_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceDiscovery_provider_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceDiscovery_provider_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceDiscovery_provider_Results) Provider() Provider {
	p, _ := capnp.Struct(s).Ptr(0)
	return Provider(p.Interface().Client())
}

func (s ServiceDiscovery_provider_Results) HasProvider() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceDiscovery_provider_Results) SetProvider(v Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ServiceDiscovery_provider_Results_List is a list of ServiceDiscovery_provider_Results.
type ServiceDiscovery_provider_Results_List = capnp.StructList[ServiceDiscovery_provider_Results]

// NewServiceDiscovery_provider_Results creates a new list of ServiceDiscovery_provider_Results.
func NewServiceDiscovery_provider_Results_List(s *capnp.Segment, sz int32) (ServiceDiscovery_provider_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceDiscovery_provider_Results](l), err
}

// ServiceDiscovery_provider_Results_Future is a wrapper for a ServiceDiscovery_provider_Results promised by a client call.
type ServiceDiscovery_provider_Results_Future struct{ *capnp.Future }

func (f ServiceDiscovery_provider_Results_Future) Struct() (ServiceDiscovery_provider_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceDiscovery_provider_Results(p.Struct()), err
}
func (p ServiceDiscovery_provider_Results_Future) Provider() Provider {
	return Provider(p.Future.Field(0, nil).Client())
}

type ServiceDiscovery_locator_Params capnp.Struct

// ServiceDiscovery_locator_Params_TypeID is the unique identifier for the type ServiceDiscovery_locator_Params.
const ServiceDiscovery_locator_Params_TypeID = 0xce508202049cd284

func NewServiceDiscovery_locator_Params(s *capnp.Segment) (ServiceDiscovery_locator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_locator_Params(st), err
}

func NewRootServiceDiscovery_locator_Params(s *capnp.Segment) (ServiceDiscovery_locator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_locator_Params(st), err
}

func ReadRootServiceDiscovery_locator_Params(msg *capnp.Message) (ServiceDiscovery_locator_Params, error) {
	root, err := msg.Root()
	return ServiceDiscovery_locator_Params(root.Struct()), err
}

func (s ServiceDiscovery_locator_Params) String() string {
	str, _ := text.Marshal(0xce508202049cd284, capnp.Struct(s))
	return str
}

func (s ServiceDiscovery_locator_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceDiscovery_locator_Params) DecodeFromPtr(p capnp.Ptr) ServiceDiscovery_locator_Params {
	return ServiceDiscovery_locator_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceDiscovery_locator_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceDiscovery_locator_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceDiscovery_locator_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceDiscovery_locator_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceDiscovery_locator_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceDiscovery_locator_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceDiscovery_locator_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceDiscovery_locator_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ServiceDiscovery_locator_Params_List is a list of ServiceDiscovery_locator_Params.
type ServiceDiscovery_locator_Params_List = capnp.StructList[ServiceDiscovery_locator_Params]

// NewServiceDiscovery_locator_Params creates a new list of ServiceDiscovery_locator_Params.
func NewServiceDiscovery_locator_Params_List(s *capnp.Segment, sz int32) (ServiceDiscovery_locator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceDiscovery_locator_Params](l), err
}

// ServiceDiscovery_locator_Params_Future is a wrapper for a ServiceDiscovery_locator_Params promised by a client call.
type ServiceDiscovery_locator_Params_Future struct{ *capnp.Future }

func (f ServiceDiscovery_locator_Params_Future) Struct() (ServiceDiscovery_locator_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceDiscovery_locator_Params(p.Struct()), err
}

type ServiceDiscovery_locator_Results capnp.Struct

// ServiceDiscovery_locator_Results_TypeID is the unique identifier for the type ServiceDiscovery_locator_Results.
const ServiceDiscovery_locator_Results_TypeID = 0xca877ab1b7ab9f57

func NewServiceDiscovery_locator_Results(s *capnp.Segment) (ServiceDiscovery_locator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_locator_Results(st), err
}

func NewRootServiceDiscovery_locator_Results(s *capnp.Segment) (ServiceDiscovery_locator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceDiscovery_locator_Results(st), err
}

func ReadRootServiceDiscovery_locator_Results(msg *capnp.Message) (ServiceDiscovery_locator_Results, error) {
	root, err := msg.Root()
	return ServiceDiscovery_locator_Results(root.Struct()), err
}

func (s ServiceDiscovery_locator_Results) String() string {
	str, _ := text.Marshal(0xca877ab1b7ab9f57, capnp.Struct(s))
	return str
}

func (s ServiceDiscovery_locator_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceDiscovery_locator_Results) DecodeFromPtr(p capnp.Ptr) ServiceDiscovery_locator_Results {
	return ServiceDiscovery_locator_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceDiscovery_locator_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceDiscovery_locator_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceDiscovery_locator_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceDiscovery_locator_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceDiscovery_locator_Results) Locator() Locator {
	p, _ := capnp.Struct(s).Ptr(0)
	return Locator(p.Interface().Client())
}

func (s ServiceDiscovery_locator_Results) HasLocator() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceDiscovery_locator_Results) SetLocator(v Locator) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ServiceDiscovery_locator_Results_List is a list of ServiceDiscovery_locator_Results.
type ServiceDiscovery_locator_Results_List = capnp.StructList[ServiceDiscovery_locator_Results]

// NewServiceDiscovery_locator_Results creates a new list of ServiceDiscovery_locator_Results.
func NewServiceDiscovery_locator_Results_List(s *capnp.Segment, sz int32) (ServiceDiscovery_locator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceDiscovery_locator_Results](l), err
}

// ServiceDiscovery_locator_Results_Future is a wrapper for a ServiceDiscovery_locator_Results promised by a client call.
type ServiceDiscovery_locator_Results_Future struct{ *capnp.Future }

func (f ServiceDiscovery_locator_Results_Future) Struct() (ServiceDiscovery_locator_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceDiscovery_locator_Results(p.Struct()), err
}
func (p ServiceDiscovery_locator_Results_Future) Locator() Locator {
	return Locator(p.Future.Field(0, nil).Client())
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcdc156a3faea6ebf

func (c Provider) Provide(ctx context.Context, params func(Provider_provide_Params) error) (Provider_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "service.capnp:Provider",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_provide_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Provide(context.Context, Provider_provide) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "service.capnp:Provider",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Provider_provide{call})
		},
	})

	return methods
}

// Provider_provide holds the state for a server call to Provider.provide.
// See server.Call for documentation.
type Provider_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_provide) Args() Provider_provide_Params {
	return Provider_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_provide) AllocResults() (Provider_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_provide_Params capnp.Struct

// Provider_provide_Params_TypeID is the unique identifier for the type Provider_provide_Params.
const Provider_provide_Params_TypeID = 0xd80e24dbc41b1f0d

func NewProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func NewRootProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func ReadRootProvider_provide_Params(msg *capnp.Message) (Provider_provide_Params, error) {
	root, err := msg.Root()
	return Provider_provide_Params(root.Struct()), err
}

func (s Provider_provide_Params) String() string {
	str, _ := text.Marshal(0xd80e24dbc41b1f0d, capnp.Struct(s))
	return str
}

func (s Provider_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Params) DecodeFromPtr(p capnp.Ptr) Provider_provide_Params {
	return Provider_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_provide_Params) Location() (SignedLocation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SignedLocation(p.Struct()), err
}

func (s Provider_provide_Params) HasLocation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_provide_Params) SetLocation(v SignedLocation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Provider_provide_Params) NewLocation() (SignedLocation, error) {
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_provide_Params_List is a list of Provider_provide_Params.
type Provider_provide_Params_List = capnp.StructList[Provider_provide_Params]

// NewProvider_provide_Params creates a new list of Provider_provide_Params.
func NewProvider_provide_Params_List(s *capnp.Segment, sz int32) (Provider_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_provide_Params](l), err
}

// Provider_provide_Params_Future is a wrapper for a Provider_provide_Params promised by a client call.
type Provider_provide_Params_Future struct{ *capnp.Future }

func (f Provider_provide_Params_Future) Struct() (Provider_provide_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Params(p.Struct()), err
}
func (p Provider_provide_Params_Future) Location() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(0, nil)}
}

type Provider_provide_Results capnp.Struct

// Provider_provide_Results_TypeID is the unique identifier for the type Provider_provide_Results.
const Provider_provide_Results_TypeID = 0x9f93db577b084c4b

func NewProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func NewRootProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func ReadRootProvider_provide_Results(msg *capnp.Message) (Provider_provide_Results, error) {
	root, err := msg.Root()
	return Provider_provide_Results(root.Struct()), err
}

func (s Provider_provide_Results) String() string {
	str, _ := text.Marshal(0x9f93db577b084c4b, capnp.Struct(s))
	return str
}

func (s Provider_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Results) DecodeFromPtr(p capnp.Ptr) Provider_provide_Results {
	return Provider_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Provider_provide_Results_List is a list of Provider_provide_Results.
type Provider_provide_Results_List = capnp.StructList[Provider_provide_Results]

// NewProvider_provide_Results creates a new list of Provider_provide_Results.
func NewProvider_provide_Results_List(s *capnp.Segment, sz int32) (Provider_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Provider_provide_Results](l), err
}

// Provider_provide_Results_Future is a wrapper for a Provider_provide_Results promised by a client call.
type Provider_provide_Results_Future struct{ *capnp.Future }

func (f Provider_provide_Results_Future) Struct() (Provider_provide_Results, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Results(p.Struct()), err
}

type Locator capnp.Client

// Locator_TypeID is the unique identifier for the type Locator.
const Locator_TypeID = 0xd8eba41bb8f5845d

func (c Locator) FindProviders(ctx context.Context, params func(Locator_findProviders_Params) error) (Locator_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "service.capnp:Locator",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Locator_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Locator_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Locator) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Locator) AddRef() Locator {
	return Locator(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Locator) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Locator) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Locator) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Locator) DecodeFromPtr(p capnp.Ptr) Locator {
	return Locator(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Locator) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Locator) IsSame(other Locator) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Locator) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Locator) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Locator_Server is a Locator with a local implementation.
type Locator_Server interface {
	FindProviders(context.Context, Locator_findProviders) error
}

// Locator_NewServer creates a new Server from an implementation of Locator_Server.
func Locator_NewServer(s Locator_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Locator_Methods(nil, s), s, c)
}

// Locator_ServerToClient creates a new Client from an implementation of Locator_Server.
// The caller is responsible for calling Release on the returned Client.
func Locator_ServerToClient(s Locator_Server) Locator {
	return Locator(capnp.NewClient(Locator_NewServer(s)))
}

// Locator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Locator_Methods(methods []server.Method, s Locator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "service.capnp:Locator",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Locator_findProviders{call})
		},
	})

	return methods
}

// Locator_findProviders holds the state for a server call to Locator.findProviders.
// See server.Call for documentation.
type Locator_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Locator_findProviders) Args() Locator_findProviders_Params {
	return Locator_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Locator_findProviders) AllocResults() (Locator_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(r), err
}

// Locator_List is a list of Locator.
type Locator_List = capnp.CapList[Locator]

// NewLocator creates a new list of Locator.
func NewLocator_List(s *capnp.Segment, sz int32) (Locator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Locator](l), err
}

type Locator_findProviders_Params capnp.Struct

// Locator_findProviders_Params_TypeID is the unique identifier for the type Locator_findProviders_Params.
const Locator_findProviders_Params_TypeID = 0xa94bdd0b5449db25

func NewLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func NewRootLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func ReadRootLocator_findProviders_Params(msg *capnp.Message) (Locator_findProviders_Params, error) {
	root, err := msg.Root()
	return Locator_findProviders_Params(root.Struct()), err
}

func (s Locator_findProviders_Params) String() string {
	str, _ := text.Marshal(0xa94bdd0b5449db25, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Params {
	return Locator_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Locator_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Locator_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Locator_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Locator_findProviders_Params_List is a list of Locator_findProviders_Params.
type Locator_findProviders_Params_List = capnp.StructList[Locator_findProviders_Params]

// NewLocator_findProviders_Params creates a new list of Locator_findProviders_Params.
func NewLocator_findProviders_Params_List(s *capnp.Segment, sz int32) (Locator_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Locator_findProviders_Params](l), err
}

// Locator_findProviders_Params_Future is a wrapper for a Locator_findProviders_Params promised by a client call.
type Locator_findProviders_Params_Future struct{ *capnp.Future }

func (f Locator_findProviders_Params_Future) Struct() (Locator_findProviders_Params, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Params(p.Struct()), err
}
func (p Locator_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Locator_findProviders_Results capnp.Struct

// Locator_findProviders_Results_TypeID is the unique identifier for the type Locator_findProviders_Results.
const Locator_findProviders_Results_TypeID = 0xa33c37f7a390a3bf

func NewLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func NewRootLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func ReadRootLocator_findProviders_Results(msg *capnp.Message) (Locator_findProviders_Results, error) {
	root, err := msg.Root()
	return Locator_findProviders_Results(root.Struct()), err
}

func (s Locator_findProviders_Results) String() string {
	str, _ := text.Marshal(0xa33c37f7a390a3bf, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Results {
	return Locator_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Locator_findProviders_Results_List is a list of Locator_findProviders_Results.
type Locator_findProviders_Results_List = capnp.StructList[Locator_findProviders_Results]

// NewLocator_findProviders_Results creates a new list of Locator_findProviders_Results.
func NewLocator_findProviders_Results_List(s *capnp.Segment, sz int32) (Locator_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Locator_findProviders_Results](l), err
}

// Locator_findProviders_Results_Future is a wrapper for a Locator_findProviders_Results promised by a client call.
type Locator_findProviders_Results_Future struct{ *capnp.Future }

func (f Locator_findProviders_Results_Future) Struct() (Locator_findProviders_Results, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Results(p.Struct()), err
}

type SignedLocation capnp.Struct

// SignedLocation_TypeID is the unique identifier for the type SignedLocation.
const SignedLocation_TypeID = 0x95d97bd68e78b8dc

func NewSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func NewRootSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func ReadRootSignedLocation(msg *capnp.Message) (SignedLocation, error) {
	root, err := msg.Root()
	return SignedLocation(root.Struct()), err
}

func (s SignedLocation) String() string {
	str, _ := text.Marshal(0x95d97bd68e78b8dc, capnp.Struct(s))
	return str
}

func (s SignedLocation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SignedLocation) DecodeFromPtr(p capnp.Ptr) SignedLocation {
	return SignedLocation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SignedLocation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SignedLocation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SignedLocation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SignedLocation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SignedLocation) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedLocation) HasSignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SignedLocation) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SignedLocation) Location() (Location, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Location(p.Struct()), err
}

func (s SignedLocation) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SignedLocation) SetLocation(v Location) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated Location struct, preferring placement in s's segment.
func (s SignedLocation) NewLocation() (Location, error) {
	ss, err := NewLocation(capnp.Struct(s).Segment())
	if err != nil {
		return Location{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SignedLocation_List is a list of SignedLocation.
type SignedLocation_List = capnp.StructList[SignedLocation]

// NewSignedLocation creates a new list of SignedLocation.
func NewSignedLocation_List(s *capnp.Segment, sz int32) (SignedLocation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SignedLocation](l), err
}

// SignedLocation_Future is a wrapper for a SignedLocation promised by a client call.
type SignedLocation_Future struct{ *capnp.Future }

func (f SignedLocation_Future) Struct() (SignedLocation, error) {
	p, err := f.Future.Ptr()
	return SignedLocation(p.Struct()), err
}
func (p SignedLocation_Future) Location() Location_Future {
	return Location_Future{Future: p.Future.Field(1, nil)}
}

type Location capnp.Struct
type Location_Which uint16

const (
	Location_Which_maddrs Location_Which = 0
	Location_Which_anchor Location_Which = 1
	Location_Which_custom Location_Which = 2
)

func (w Location_Which) String() string {
	const s = "maddrsanchorcustom"
	switch w {
	case Location_Which_maddrs:
		return s[0:6]
	case Location_Which_anchor:
		return s[6:12]
	case Location_Which_custom:
		return s[12:18]

	}
	return "Location_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0xe61540af32cf81b6

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0xe61540af32cf81b6, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Location) Which() Location_Which {
	return Location_Which(capnp.Struct(s).Uint16(0))
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location) Maddrs() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != maddrs")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s Location) HasMaddrs() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetMaddrs(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMaddrs sets the maddrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Location) NewMaddrs(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(0, 0)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Location) Anchor() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Location) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) AnchorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Location) SetAnchor(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(1, v)
}

func (s Location) Custom() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != custom")
	}
	return capnp.Struct(s).Ptr(1)
}

func (s Location) HasCustom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetCustom(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(1, v)
}
func (s Location) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Location) HasMeta() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Location) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Custom() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Request() (Message_Request, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Request(p.Struct()), err
}

func (s Message) HasRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetRequest(v Message_Request) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Message_Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Message_Request, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewMessage_Request(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Request{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() (Message_Response, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Response(p.Struct()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v Message_Response) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Message_Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Message_Response, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewMessage_Response(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Response{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Request() Message_Request_Future {
	return Message_Request_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_Response_Future {
	return Message_Response_Future{Future: p.Future.Field(0, nil)}
}

type Message_Request capnp.Struct

// Message_Request_TypeID is the unique identifier for the type Message_Request.
const Message_Request_TypeID = 0x9fe65a406fba5583

func NewMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func NewRootMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func ReadRootMessage_Request(msg *capnp.Message) (Message_Request, error) {
	root, err := msg.Root()
	return Message_Request(root.Struct()), err
}

func (s Message_Request) String() string {
	str, _ := text.Marshal(0x9fe65a406fba5583, capnp.Struct(s))
	return str
}

func (s Message_Request) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Request) DecodeFromPtr(p capnp.Ptr) Message_Request {
	return Message_Request(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Request) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Request) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Request) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Request) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Message_Request_List is a list of Message_Request.
type Message_Request_List = capnp.StructList[Message_Request]

// NewMessage_Request creates a new list of Message_Request.
func NewMessage_Request_List(s *capnp.Segment, sz int32) (Message_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Message_Request](l), err
}

// Message_Request_Future is a wrapper for a Message_Request promised by a client call.
type Message_Request_Future struct{ *capnp.Future }

func (f Message_Request_Future) Struct() (Message_Request, error) {
	p, err := f.Future.Ptr()
	return Message_Request(p.Struct()), err
}

type Message_Response capnp.Struct

// Message_Response_TypeID is the unique identifier for the type Message_Response.
const Message_Response_TypeID = 0xf42beb36cd723e35

func NewMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func NewRootMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func ReadRootMessage_Response(msg *capnp.Message) (Message_Response, error) {
	root, err := msg.Root()
	return Message_Response(root.Struct()), err
}

func (s Message_Response) String() string {
	str, _ := text.Marshal(0xf42beb36cd723e35, capnp.Struct(s))
	return str
}

func (s Message_Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Response) DecodeFromPtr(p capnp.Ptr) Message_Response {
	return Message_Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_Response) Location() (SignedLocation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SignedLocation(p.Struct()), err
}

func (s Message_Response) HasLocation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_Response) SetLocation(v SignedLocation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Message_Response) NewLocation() (SignedLocation, error) {
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_Response_List is a list of Message_Response.
type Message_Response_List = capnp.StructList[Message_Response]

// NewMessage_Response creates a new list of Message_Response.
func NewMessage_Response_List(s *capnp.Segment, sz int32) (Message_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Message_Response](l), err
}

// Message_Response_Future is a wrapper for a Message_Response promised by a client call.
type Message_Response_Future struct{ *capnp.Future }

func (f Message_Response_Future) Struct() (Message_Response, error) {
	p, err := f.Future.Ptr()
	return Message_Response(p.Struct()), err
}
func (p Message_Response_Future) Location() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcba4f486a351ac3 = "x\xda\x94U]h\x1cU\x14>\xe7\xde;;\x09f" +
	"7{;i\xab-\xcb\xbeD\xb4jC\xd34Zb" +
	"uCh\x89m#\xee]\xad\xc5B\xc1qwLV" +
	"\xb2\xbb\xe9\xccnZ[kH\x0d\x04A\xa4E\x0b-" +
	"m\x88\x12_\xa4H\xb1\xf8S\xa3PD}P\x88b" +
	"\x1e\xa4%\x0a\xbeX5E\xf1\x97B\xb0\xbdrgv" +
	"v\xa6\x9b\xd4\xda\xb7\xbbw\xcf\xfd\xbe\xf3\x9d\xef\x9c3" +
	"\xebN\x91n\xd6\x1e\xedm\x00\"\x9e\xd4\"\xf2\xdb\xb3" +
	"\xfb^\xfe\xe6\xc0\x85\xa3\xc0c(?Y\xd5\xf9\xccC" +
	"\x8fL\xff\x03\x1a\xd1\x01\x8cF6o,g\xea\xc4\xd9" +
	"^@\xf9\xd1\xf8\xc0\xde\x13\x97\xef?\x01<F\x83X" +
	"@\xa3\xc2\x16\x8cQ7\xf0 \x1b7\xbeV'\xb9{" +
	"\xc3or\xd6\xfa~\x02x\x12\x014\xd4\x01:>`" +
	"\xfb\x11\xd0\xf8\x8c\xa5\x00\xe5\xf6\xbe\x86\x03;\xe7^\x99" +
	"\x04\xbe\x12\x01\xd4\x9b\x8e\x1fX\x17\x02\x93/\xec\x98." +
	"u\xef\xba8\x09|\x05\xca\xe4\xe7C\x83\x7f\xce\x9f\x9e" +
	"u#\x8c\x19\xf6\x87q\x81\xe9@\xe5\xb9\xa9\xc3S\x97" +
	"\xef\xdb4\xa5\x82\xaa\xcf\xdfeO\xa9\xe7\xb7\xcfm}" +
	"\xec\x96\xef\xb6\xbf\xe9\xfd\xe31\xbf\xcev)\xe6\xb7\\" +
	"\xe6\x9d\x93\xa7\xde\x7f{\xff\xf8\x17\xe1\xd4\xaex\xa95" +
	"j*\xe0\\q~a\xea\xf1\x8fg\x16\x09]\xa3M" +
	"\x1b\xed\x9aJd\xad\xd6k\xecP'96{\x92\x91" +
	"C\xe9/\xc3h\x0fh\xb6B\xdb\xea\xa2\xd5\x14\x88\x18" +
	"\x86j\xbc\x05u\x02`\xe4\xb53\xc6\x1e\xed\x0e\x00\xe3" +
	"EM\x159\x9a\\\xfd\xe9\\k\xec\xbcW\x16\x0f\xee" +
	"gm\xbd\x82\xfb\xdd\x85\xdb=\xf6\xf7\xd9\xd5o\\:" +
	"\xbf(\xb9\xe5\x913F\"\xa2\x92\xbb-\xd2klQ" +
	"'\xf9\xde\xe8W\xebOw/\xbfX\xcfMu\xaaD" +
	"D\xa6\x8dN\x15\xd7\xd1\x1eI\xa2\xc2\xd6\x8e\xe4\x12/" +
	"=\xffcX\x8b\xa9\x1fR\xe4\x05]\x91w>h\xcf" +
	"\xdc{\xe9\xee\xbf\xae\xb5\xc6\x0d4\x8e\xe8\x0b\xc6\x84\xae" +
	"N\xc7\xf5\x14<!\x1d\xcb\x1e\xceg\xad6\x925\x87" +
	"\x8aC]\x8f\xe6\xfb\x8bV\xae\xaf\x945\x9b\xcb\xf9R" +
	"1\x8d(\x1a(\x03`\x08\xc0\xd7d\x00\xc4\x9d\x14\xc5" +
	"\x06\x82\x1c\xb1\x05\xd5e\xfb6\x00\xb1\x8e\xa2\xd8DP" +
	":\xf9\xfe\xa2Y\xae\xd8\x80\x16F\x81`\x14P\x0e\x96" +
	"\xb2\xa6\xc2\x02\x00\x8c\x07Z\x011\x0e\xb8\x88\xdf\xfb\xb9" +
	"9\xef\xa4\xb2\xa5a\xcb~\xd6\xcb@\x0b\xf5*\xfa\xfa" +
	"\x155\xe1kt\xc4\x9a\xbd\xe8w\x0dO\xf4\x00\xe1\\" +
	"\x97Cvi8\x9f\xb3l\x00\xe8\xc6\x117\x97\x92\xdd" +
	"\x8di\x0c\xa8Y=\xb5\xc7\xdc\xe6?mM\xa5M\xdb" +
	",8\x82\xd5*\x11\xbd\x0b@4P\x14-\x04\x9b\x8b" +
	"f\xc1\xc2& \xd8\x14\xd2C=\xd0t\x15\xc3\x07k" +
	"\xcd\xa4,\xa72Xv\xea\x85?l9\x8e\xd9o\xb5" +
	"e\xac\xe4\x9e\x8a\xe5\x94\x97H\xb0\xcfK\xbe\xed\xe9|" +
	"1\xe7\xe3:\xad\x19\xcb\xa9\xe8a\xc0\xff\x8cVJ\xe8" +
	"\xd2R6\x13l\xce\x0e\x98E\xe4\xf2\xd7\x15\xf3\x1b[" +
	"~\xf9\xf0'\xb7h\x1c\x93\x82\x11\x0c_r\\)\x18" +
	"\"b\x9a\"\xc6\x83\xf5\x04\x88\x1cn\\\xd8\xaa\x0b\xb5" +
	"Z\x84\xb3\xe9\x09\x0a\xeb\xbb\x85<\x18\xa7:\x06\xf4\xab" +
	"\x9c\xf2\x04\xaanan\xb7\xf8\x13\x8a\xfe\x06\xe3\\u" +
	"\x84\xa6\x8fT\x9d\xf8\x7f=\xe0\xa7\x9aN\xde|\x0b\xa0" +
	"\xefl\xd2\xb5V4 \x86\xb6fcOhN\xb5m" +
	"#\x19\xcb\xf5]f,g\xa8Tt,p\xe1Y\x93" +
	"\x94\xde\xec\xa9\xc2\xb4R\x14\xeb\x08F\xf1\xaa\xf4\x86o" +
	"\xad\x1a\xbe{(\x8a\x8d\x04Gl\x0f\x01\xe3\x01Ku" +
	"\xc8\xec\x00\x13\xe3\x01m\xdd\x08^\xafe\x97\xd0\xaeh" +
	"\x9b(\x8a[I\xfd|\x87{!\xbe\xb8\x18}\xa5\xa4" +
	"[\xd0\xc0(\xffC\x80\xfe\xb7\x82s\x1b\x08o\xd4\xa5" +
	"\xdf\xb9\x90t{\xf7Z\xc3jx)\x8f]\x01\xb6\xd4" +
	"\x12<\xb8\x0a@\xec\xa3(\xc6\x08&P\xca\xea\xae\x1a" +
	"\xed\x02\x10\xcfQ\x14\xc7\x08&\xc8UuM\x00\xf8Q" +
	"u}\x98\xa28I0A\xaf\xa8k\x0a\xc0\x8f\xab\xeb" +
	"W)\x8a\xd7\x08rFZ\x90\x01\xf0\x09e\xfb1\x8a" +
	"\xe2\x1d\x824\x9f\xf3MO\x15\xcc\\\xcev0\x06\xee" +
	"L\xa8\xdd\x17\x03L\x99\xc5\xec@\xc9\xae\x05e+N" +
	"\xb9T\xc0e@p\x19`s\xc1*\x9b\xfe\x8b&\xef" +
	"EM\x9fv\xa3\xa5\x94\xf1f\x07\xaegKh\xf1!" +
	"\x0f>\x96u\x03\xb4h\xfb\xa4\xbcN\xf1\xfc\xb9y\xbf" +
	"\xff\x0d\x00\x00\xff\xff\xfe\xfd~\xc9"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x95d97bd68e78b8dc,
		0x9b3bf79b776887bc,
		0x9de065d2fff0345d,
		0x9f93db577b084c4b,
		0x9fe65a406fba5583,
		0xa33c37f7a390a3bf,
		0xa94bdd0b5449db25,
		0xca877ab1b7ab9f57,
		0xcdc156a3faea6ebf,
		0xce508202049cd284,
		0xd2afeaf36c70c91f,
		0xd80e24dbc41b1f0d,
		0xd8eba41bb8f5845d,
		0xe61540af32cf81b6,
		0xe77e8c1d6491055d,
		0xf42beb36cd723e35)
}
