// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type DiscoveryService capnp.Client

// DiscoveryService_TypeID is the unique identifier for the type DiscoveryService.
const DiscoveryService_TypeID = 0xe4a48c5d3f25d6d0

func (c DiscoveryService) Provider(ctx context.Context, params func(DiscoveryService_provider_Params) error) (DiscoveryService_provider_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "service.capnp:DiscoveryService",
			MethodName:    "provider",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_provider_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_provider_Results_Future{Future: ans.Future()}, release
}
func (c DiscoveryService) Locator(ctx context.Context, params func(DiscoveryService_locator_Params) error) (DiscoveryService_locator_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "service.capnp:DiscoveryService",
			MethodName:    "locator",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_locator_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_locator_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c DiscoveryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c DiscoveryService) AddRef() DiscoveryService {
	return DiscoveryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c DiscoveryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c DiscoveryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c DiscoveryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (DiscoveryService) DecodeFromPtr(p capnp.Ptr) DiscoveryService {
	return DiscoveryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c DiscoveryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c DiscoveryService) IsSame(other DiscoveryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c DiscoveryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c DiscoveryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A DiscoveryService_Server is a DiscoveryService with a local implementation.
type DiscoveryService_Server interface {
	Provider(context.Context, DiscoveryService_provider) error

	Locator(context.Context, DiscoveryService_locator) error
}

// DiscoveryService_NewServer creates a new Server from an implementation of DiscoveryService_Server.
func DiscoveryService_NewServer(s DiscoveryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DiscoveryService_Methods(nil, s), s, c)
}

// DiscoveryService_ServerToClient creates a new Client from an implementation of DiscoveryService_Server.
// The caller is responsible for calling Release on the returned Client.
func DiscoveryService_ServerToClient(s DiscoveryService_Server) DiscoveryService {
	return DiscoveryService(capnp.NewClient(DiscoveryService_NewServer(s)))
}

// DiscoveryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DiscoveryService_Methods(methods []server.Method, s DiscoveryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "service.capnp:DiscoveryService",
			MethodName:    "provider",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provider(ctx, DiscoveryService_provider{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "service.capnp:DiscoveryService",
			MethodName:    "locator",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locator(ctx, DiscoveryService_locator{call})
		},
	})

	return methods
}

// DiscoveryService_provider holds the state for a server call to DiscoveryService.provider.
// See server.Call for documentation.
type DiscoveryService_provider struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_provider) Args() DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_provider) AllocResults() (DiscoveryService_provider_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(r), err
}

// DiscoveryService_locator holds the state for a server call to DiscoveryService.locator.
// See server.Call for documentation.
type DiscoveryService_locator struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_locator) Args() DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_locator) AllocResults() (DiscoveryService_locator_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(r), err
}

// DiscoveryService_List is a list of DiscoveryService.
type DiscoveryService_List = capnp.CapList[DiscoveryService]

// NewDiscoveryService creates a new list of DiscoveryService.
func NewDiscoveryService_List(s *capnp.Segment, sz int32) (DiscoveryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[DiscoveryService](l), err
}

type DiscoveryService_provider_Params capnp.Struct

// DiscoveryService_provider_Params_TypeID is the unique identifier for the type DiscoveryService_provider_Params.
const DiscoveryService_provider_Params_TypeID = 0xf8e8ab21195eede9

func NewDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func NewRootDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func ReadRootDiscoveryService_provider_Params(msg *capnp.Message) (DiscoveryService_provider_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Params(root.Struct()), err
}

func (s DiscoveryService_provider_Params) String() string {
	str, _ := text.Marshal(0xf8e8ab21195eede9, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_provider_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_provider_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_provider_Params_List is a list of DiscoveryService_provider_Params.
type DiscoveryService_provider_Params_List = capnp.StructList[DiscoveryService_provider_Params]

// NewDiscoveryService_provider_Params creates a new list of DiscoveryService_provider_Params.
func NewDiscoveryService_provider_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Params](l), err
}

// DiscoveryService_provider_Params_Future is a wrapper for a DiscoveryService_provider_Params promised by a client call.
type DiscoveryService_provider_Params_Future struct{ *capnp.Future }

func (p DiscoveryService_provider_Params_Future) Struct() (DiscoveryService_provider_Params, error) {
	s, err := p.Future.Struct()
	return DiscoveryService_provider_Params(s), err
}

type DiscoveryService_provider_Results capnp.Struct

// DiscoveryService_provider_Results_TypeID is the unique identifier for the type DiscoveryService_provider_Results.
const DiscoveryService_provider_Results_TypeID = 0xb14b5203df9fa7c8

func NewDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func NewRootDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func ReadRootDiscoveryService_provider_Results(msg *capnp.Message) (DiscoveryService_provider_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Results(root.Struct()), err
}

func (s DiscoveryService_provider_Results) String() string {
	str, _ := text.Marshal(0xb14b5203df9fa7c8, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Results {
	return DiscoveryService_provider_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Results) Provider() Provider {
	p, _ := capnp.Struct(s).Ptr(0)
	return Provider(p.Interface().Client())
}

func (s DiscoveryService_provider_Results) HasProvider() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Results) SetProvider(v Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_provider_Results_List is a list of DiscoveryService_provider_Results.
type DiscoveryService_provider_Results_List = capnp.StructList[DiscoveryService_provider_Results]

// NewDiscoveryService_provider_Results creates a new list of DiscoveryService_provider_Results.
func NewDiscoveryService_provider_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Results](l), err
}

// DiscoveryService_provider_Results_Future is a wrapper for a DiscoveryService_provider_Results promised by a client call.
type DiscoveryService_provider_Results_Future struct{ *capnp.Future }

func (p DiscoveryService_provider_Results_Future) Struct() (DiscoveryService_provider_Results, error) {
	s, err := p.Future.Struct()
	return DiscoveryService_provider_Results(s), err
}

func (p DiscoveryService_provider_Results_Future) Provider() Provider {
	return Provider(p.Future.Field(0, nil).Client())
}

type DiscoveryService_locator_Params capnp.Struct

// DiscoveryService_locator_Params_TypeID is the unique identifier for the type DiscoveryService_locator_Params.
const DiscoveryService_locator_Params_TypeID = 0xd40e2f0673af616c

func NewDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func NewRootDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func ReadRootDiscoveryService_locator_Params(msg *capnp.Message) (DiscoveryService_locator_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Params(root.Struct()), err
}

func (s DiscoveryService_locator_Params) String() string {
	str, _ := text.Marshal(0xd40e2f0673af616c, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_locator_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_locator_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_locator_Params_List is a list of DiscoveryService_locator_Params.
type DiscoveryService_locator_Params_List = capnp.StructList[DiscoveryService_locator_Params]

// NewDiscoveryService_locator_Params creates a new list of DiscoveryService_locator_Params.
func NewDiscoveryService_locator_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Params](l), err
}

// DiscoveryService_locator_Params_Future is a wrapper for a DiscoveryService_locator_Params promised by a client call.
type DiscoveryService_locator_Params_Future struct{ *capnp.Future }

func (p DiscoveryService_locator_Params_Future) Struct() (DiscoveryService_locator_Params, error) {
	s, err := p.Future.Struct()
	return DiscoveryService_locator_Params(s), err
}

type DiscoveryService_locator_Results capnp.Struct

// DiscoveryService_locator_Results_TypeID is the unique identifier for the type DiscoveryService_locator_Results.
const DiscoveryService_locator_Results_TypeID = 0xda5a597d0c3a72a4

func NewDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func NewRootDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func ReadRootDiscoveryService_locator_Results(msg *capnp.Message) (DiscoveryService_locator_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Results(root.Struct()), err
}

func (s DiscoveryService_locator_Results) String() string {
	str, _ := text.Marshal(0xda5a597d0c3a72a4, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Results {
	return DiscoveryService_locator_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Results) Locator() Locator {
	p, _ := capnp.Struct(s).Ptr(0)
	return Locator(p.Interface().Client())
}

func (s DiscoveryService_locator_Results) HasLocator() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Results) SetLocator(v Locator) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_locator_Results_List is a list of DiscoveryService_locator_Results.
type DiscoveryService_locator_Results_List = capnp.StructList[DiscoveryService_locator_Results]

// NewDiscoveryService_locator_Results creates a new list of DiscoveryService_locator_Results.
func NewDiscoveryService_locator_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Results](l), err
}

// DiscoveryService_locator_Results_Future is a wrapper for a DiscoveryService_locator_Results promised by a client call.
type DiscoveryService_locator_Results_Future struct{ *capnp.Future }

func (p DiscoveryService_locator_Results_Future) Struct() (DiscoveryService_locator_Results, error) {
	s, err := p.Future.Struct()
	return DiscoveryService_locator_Results(s), err
}

func (p DiscoveryService_locator_Results_Future) Locator() Locator {
	return Locator(p.Future.Field(0, nil).Client())
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcdc156a3faea6ebf

func (c Provider) Provide(ctx context.Context, params func(Provider_provide_Params) error) (Provider_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "service.capnp:Provider",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_provide_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Provide(context.Context, Provider_provide) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "service.capnp:Provider",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Provider_provide{call})
		},
	})

	return methods
}

// Provider_provide holds the state for a server call to Provider.provide.
// See server.Call for documentation.
type Provider_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_provide) Args() Provider_provide_Params {
	return Provider_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_provide) AllocResults() (Provider_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_provide_Params capnp.Struct

// Provider_provide_Params_TypeID is the unique identifier for the type Provider_provide_Params.
const Provider_provide_Params_TypeID = 0xd80e24dbc41b1f0d

func NewProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func NewRootProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func ReadRootProvider_provide_Params(msg *capnp.Message) (Provider_provide_Params, error) {
	root, err := msg.Root()
	return Provider_provide_Params(root.Struct()), err
}

func (s Provider_provide_Params) String() string {
	str, _ := text.Marshal(0xd80e24dbc41b1f0d, capnp.Struct(s))
	return str
}

func (s Provider_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Params) DecodeFromPtr(p capnp.Ptr) Provider_provide_Params {
	return Provider_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_provide_Params) Addrs() (AddrInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AddrInfo_List(p.List()), err
}

func (s Provider_provide_Params) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_provide_Params) SetAddrs(v AddrInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated AddrInfo_List, preferring placement in s's segment.
func (s Provider_provide_Params) NewAddrs(n int32) (AddrInfo_List, error) {
	l, err := NewAddrInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AddrInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Provider_provide_Params_List is a list of Provider_provide_Params.
type Provider_provide_Params_List = capnp.StructList[Provider_provide_Params]

// NewProvider_provide_Params creates a new list of Provider_provide_Params.
func NewProvider_provide_Params_List(s *capnp.Segment, sz int32) (Provider_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_provide_Params](l), err
}

// Provider_provide_Params_Future is a wrapper for a Provider_provide_Params promised by a client call.
type Provider_provide_Params_Future struct{ *capnp.Future }

func (p Provider_provide_Params_Future) Struct() (Provider_provide_Params, error) {
	s, err := p.Future.Struct()
	return Provider_provide_Params(s), err
}

type Provider_provide_Results capnp.Struct

// Provider_provide_Results_TypeID is the unique identifier for the type Provider_provide_Results.
const Provider_provide_Results_TypeID = 0x9f93db577b084c4b

func NewProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func NewRootProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func ReadRootProvider_provide_Results(msg *capnp.Message) (Provider_provide_Results, error) {
	root, err := msg.Root()
	return Provider_provide_Results(root.Struct()), err
}

func (s Provider_provide_Results) String() string {
	str, _ := text.Marshal(0x9f93db577b084c4b, capnp.Struct(s))
	return str
}

func (s Provider_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Results) DecodeFromPtr(p capnp.Ptr) Provider_provide_Results {
	return Provider_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Provider_provide_Results_List is a list of Provider_provide_Results.
type Provider_provide_Results_List = capnp.StructList[Provider_provide_Results]

// NewProvider_provide_Results creates a new list of Provider_provide_Results.
func NewProvider_provide_Results_List(s *capnp.Segment, sz int32) (Provider_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Provider_provide_Results](l), err
}

// Provider_provide_Results_Future is a wrapper for a Provider_provide_Results promised by a client call.
type Provider_provide_Results_Future struct{ *capnp.Future }

func (p Provider_provide_Results_Future) Struct() (Provider_provide_Results, error) {
	s, err := p.Future.Struct()
	return Provider_provide_Results(s), err
}

type Locator capnp.Client

// Locator_TypeID is the unique identifier for the type Locator.
const Locator_TypeID = 0xd8eba41bb8f5845d

func (c Locator) FindProviders(ctx context.Context, params func(Locator_findProviders_Params) error) (Locator_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "service.capnp:Locator",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Locator_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Locator_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Locator) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Locator) AddRef() Locator {
	return Locator(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Locator) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Locator) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Locator) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Locator) DecodeFromPtr(p capnp.Ptr) Locator {
	return Locator(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Locator) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Locator) IsSame(other Locator) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Locator) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Locator) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Locator_Server is a Locator with a local implementation.
type Locator_Server interface {
	FindProviders(context.Context, Locator_findProviders) error
}

// Locator_NewServer creates a new Server from an implementation of Locator_Server.
func Locator_NewServer(s Locator_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Locator_Methods(nil, s), s, c)
}

// Locator_ServerToClient creates a new Client from an implementation of Locator_Server.
// The caller is responsible for calling Release on the returned Client.
func Locator_ServerToClient(s Locator_Server) Locator {
	return Locator(capnp.NewClient(Locator_NewServer(s)))
}

// Locator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Locator_Methods(methods []server.Method, s Locator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "service.capnp:Locator",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Locator_findProviders{call})
		},
	})

	return methods
}

// Locator_findProviders holds the state for a server call to Locator.findProviders.
// See server.Call for documentation.
type Locator_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Locator_findProviders) Args() Locator_findProviders_Params {
	return Locator_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Locator_findProviders) AllocResults() (Locator_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(r), err
}

// Locator_List is a list of Locator.
type Locator_List = capnp.CapList[Locator]

// NewLocator creates a new list of Locator.
func NewLocator_List(s *capnp.Segment, sz int32) (Locator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Locator](l), err
}

type Locator_findProviders_Params capnp.Struct

// Locator_findProviders_Params_TypeID is the unique identifier for the type Locator_findProviders_Params.
const Locator_findProviders_Params_TypeID = 0xa94bdd0b5449db25

func NewLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func NewRootLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func ReadRootLocator_findProviders_Params(msg *capnp.Message) (Locator_findProviders_Params, error) {
	root, err := msg.Root()
	return Locator_findProviders_Params(root.Struct()), err
}

func (s Locator_findProviders_Params) String() string {
	str, _ := text.Marshal(0xa94bdd0b5449db25, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Params {
	return Locator_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Locator_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Locator_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Locator_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Locator_findProviders_Params_List is a list of Locator_findProviders_Params.
type Locator_findProviders_Params_List = capnp.StructList[Locator_findProviders_Params]

// NewLocator_findProviders_Params creates a new list of Locator_findProviders_Params.
func NewLocator_findProviders_Params_List(s *capnp.Segment, sz int32) (Locator_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Locator_findProviders_Params](l), err
}

// Locator_findProviders_Params_Future is a wrapper for a Locator_findProviders_Params promised by a client call.
type Locator_findProviders_Params_Future struct{ *capnp.Future }

func (p Locator_findProviders_Params_Future) Struct() (Locator_findProviders_Params, error) {
	s, err := p.Future.Struct()
	return Locator_findProviders_Params(s), err
}

func (p Locator_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Locator_findProviders_Results capnp.Struct

// Locator_findProviders_Results_TypeID is the unique identifier for the type Locator_findProviders_Results.
const Locator_findProviders_Results_TypeID = 0xa33c37f7a390a3bf

func NewLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func NewRootLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func ReadRootLocator_findProviders_Results(msg *capnp.Message) (Locator_findProviders_Results, error) {
	root, err := msg.Root()
	return Locator_findProviders_Results(root.Struct()), err
}

func (s Locator_findProviders_Results) String() string {
	str, _ := text.Marshal(0xa33c37f7a390a3bf, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Results {
	return Locator_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Locator_findProviders_Results_List is a list of Locator_findProviders_Results.
type Locator_findProviders_Results_List = capnp.StructList[Locator_findProviders_Results]

// NewLocator_findProviders_Results creates a new list of Locator_findProviders_Results.
func NewLocator_findProviders_Results_List(s *capnp.Segment, sz int32) (Locator_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Locator_findProviders_Results](l), err
}

// Locator_findProviders_Results_Future is a wrapper for a Locator_findProviders_Results promised by a client call.
type Locator_findProviders_Results_Future struct{ *capnp.Future }

func (p Locator_findProviders_Results_Future) Struct() (Locator_findProviders_Results, error) {
	s, err := p.Future.Struct()
	return Locator_findProviders_Results(s), err
}

type AddrInfo capnp.Struct

// AddrInfo_TypeID is the unique identifier for the type AddrInfo.
const AddrInfo_TypeID = 0xeb56805616fef06f

func NewAddrInfo(s *capnp.Segment) (AddrInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AddrInfo(st), err
}

func NewRootAddrInfo(s *capnp.Segment) (AddrInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AddrInfo(st), err
}

func ReadRootAddrInfo(msg *capnp.Message) (AddrInfo, error) {
	root, err := msg.Root()
	return AddrInfo(root.Struct()), err
}

func (s AddrInfo) String() string {
	str, _ := text.Marshal(0xeb56805616fef06f, capnp.Struct(s))
	return str
}

func (s AddrInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AddrInfo) DecodeFromPtr(p capnp.Ptr) AddrInfo {
	return AddrInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AddrInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AddrInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AddrInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AddrInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AddrInfo) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AddrInfo) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AddrInfo) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AddrInfo) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AddrInfo) Addrs() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s AddrInfo) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AddrInfo) SetAddrs(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s AddrInfo) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// AddrInfo_List is a list of AddrInfo.
type AddrInfo_List = capnp.StructList[AddrInfo]

// NewAddrInfo creates a new list of AddrInfo.
func NewAddrInfo_List(s *capnp.Segment, sz int32) (AddrInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AddrInfo](l), err
}

// AddrInfo_Future is a wrapper for a AddrInfo promised by a client call.
type AddrInfo_Future struct{ *capnp.Future }

func (p AddrInfo_Future) Struct() (AddrInfo, error) {
	s, err := p.Future.Struct()
	return AddrInfo(s), err
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Request() (Message_Request, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Request(p.Struct()), err
}

func (s Message) HasRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetRequest(v Message_Request) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Message_Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Message_Request, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewMessage_Request(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Request{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() (Message_Response, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Response(p.Struct()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v Message_Response) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Message_Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Message_Response, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewMessage_Response(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Response{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (p Message_Future) Struct() (Message, error) {
	s, err := p.Future.Struct()
	return Message(s), err
}

func (p Message_Future) Request() Message_Request_Future {
	return Message_Request_Future{Future: p.Future.Field(0, nil)}
}

func (p Message_Future) Response() Message_Response_Future {
	return Message_Response_Future{Future: p.Future.Field(0, nil)}
}

type Message_Request capnp.Struct

// Message_Request_TypeID is the unique identifier for the type Message_Request.
const Message_Request_TypeID = 0x9fe65a406fba5583

func NewMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func NewRootMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func ReadRootMessage_Request(msg *capnp.Message) (Message_Request, error) {
	root, err := msg.Root()
	return Message_Request(root.Struct()), err
}

func (s Message_Request) String() string {
	str, _ := text.Marshal(0x9fe65a406fba5583, capnp.Struct(s))
	return str
}

func (s Message_Request) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Request) DecodeFromPtr(p capnp.Ptr) Message_Request {
	return Message_Request(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Request) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Request) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Request) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Request) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Message_Request_List is a list of Message_Request.
type Message_Request_List = capnp.StructList[Message_Request]

// NewMessage_Request creates a new list of Message_Request.
func NewMessage_Request_List(s *capnp.Segment, sz int32) (Message_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Message_Request](l), err
}

// Message_Request_Future is a wrapper for a Message_Request promised by a client call.
type Message_Request_Future struct{ *capnp.Future }

func (p Message_Request_Future) Struct() (Message_Request, error) {
	s, err := p.Future.Struct()
	return Message_Request(s), err
}

type Message_Response capnp.Struct

// Message_Response_TypeID is the unique identifier for the type Message_Response.
const Message_Response_TypeID = 0xf42beb36cd723e35

func NewMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func NewRootMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func ReadRootMessage_Response(msg *capnp.Message) (Message_Response, error) {
	root, err := msg.Root()
	return Message_Response(root.Struct()), err
}

func (s Message_Response) String() string {
	str, _ := text.Marshal(0xf42beb36cd723e35, capnp.Struct(s))
	return str
}

func (s Message_Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Response) DecodeFromPtr(p capnp.Ptr) Message_Response {
	return Message_Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_Response) Addrs() (AddrInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AddrInfo_List(p.List()), err
}

func (s Message_Response) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_Response) SetAddrs(v AddrInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated AddrInfo_List, preferring placement in s's segment.
func (s Message_Response) NewAddrs(n int32) (AddrInfo_List, error) {
	l, err := NewAddrInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AddrInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Message_Response_List is a list of Message_Response.
type Message_Response_List = capnp.StructList[Message_Response]

// NewMessage_Response creates a new list of Message_Response.
func NewMessage_Response_List(s *capnp.Segment, sz int32) (Message_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Message_Response](l), err
}

// Message_Response_Future is a wrapper for a Message_Response promised by a client call.
type Message_Response_Future struct{ *capnp.Future }

func (p Message_Response_Future) Struct() (Message_Response, error) {
	s, err := p.Future.Struct()
	return Message_Response(s), err
}

const schema_fcba4f486a351ac3 = "x\xda\xa4T]h\x1cU\x14>\xe7\xce\x9d\xd9-\xee" +
	"ns\xb9!\xd5\x962\x08[t\xd5\xc6\xa6R-A" +
	"\x9dm\xa8\xd4\xfc\x88;\xab\x8d\x18\xa80\xeeN\xed\xca" +
	"vg;\x93DZ\x91\x88?\xf8\xe2\x83\xe0\x93O\xa1" +
	"$E\x82Hi\x9f4\"E\xb4\xa0\x0f\x05+*\xc5" +
	"\x10|Q\xa9\x09\x11\x7f\xa9\x04\xe9\x95{ggg\x92" +
	"]\xad\xe0\xdbp\xef7\xdf\xf9\xce\xf9\xbe{\xf64I" +
	"\x91\x0ed\xaf\xa5\x81\xd8\xc7tC\x8c\x8e\xa5\x9f\x7fb" +
	"\xe9\xcdY`\xdb\x10\x80\xa6\x00\xeeq\xe8 \x02\x15/" +
	"\x1f^\xf4\x8a\x13?\xcc\x02\xebCa~\xd6\xac\xff\xb6" +
	"r\xf6\x0b\x85\xe0\xc3\xf4W~\x98\xa6@\x13\x17\xe6\xde" +
	"\x98\xbbv\xdf\xfds\x12\xd4\xfa}\x80>-\x7f\xdf\xb5" +
	"4\xfc\xf8M\xcb\xa3\x0b\xe1\x8d\x8e\xf2j'\x9d@@" +
	"^\xa0\x16\xa0\xf8\xf4\xed\xd9o\xb5\xf2\xe89`f\x1b" +
	"p\x92\xbe$\x01\xaf*\xc0\x85\xc6\xca\xfa\xdc\xf8G\x97" +
	"\x80\xe54\xf1\xf1\xf6}\xcf>\xfc\xe8\xe2_\x00\xc8\x17" +
	"\xe8\"?\xa7\x84\xbcK\x0f\xf1\xaf\xe4W,\xd0\xce!" +
	"\xc6\xe8\x870E\x00\xf8\x87\xf4<\xbfHo\x03\xe0\xcb" +
	"\xf49@Qw\xce\x06\xc6\xdd\xb9/\x93\xb5\x1f\xd0}" +
	"Y{X\x97\xb5\xb3\xe6\x8eO\x96\xf2\xb9+\xe1XB" +
	"@M\xdf+\x01'\x14\xe0\xc8+\x7f\xbc\xb7c~\xf5" +
	"J\x87\xb8\xd3\xfay\xbe\xa0Kqg\xf4C\xfc\xb2\xfc" +
	"\x12\xf3\xfe`\xe6\x85''\xbeI\x96{_?%\xd9" +
	".*\xb6\xcf\xbf\xdee\x1dy}\xfe\xbb\x0e\xb6\xef\xf5" +
	"u\xfe\x8bb[\xd3_\xe3\x07\x0c\xc9\xe6\xfd|\xbdo" +
	"\xfc\xc5\xf1U`\xb9D\xa7:\x91\xa8\x82\xb1\xc8\x07$" +
	"\x8a\xef6d\xa3\xfb\x1e\xf4/\xdd\xbbz\xe7\xef\x1bM" +
	"T\x0a\xf8[\xc6:?\xa3\xb0\xa7\x0d)\xe2\xc7\xb5\xa7" +
	"n\xb9\xf5\x9d\xab\x7f&U^6\x94\xcae\xc3\x82S" +
	"\"p\xfd\xe9Z\xc5\xed\xd7*N\xb3\xd1\x1c,\xf9\xde" +
	"t\xad\xea\xfa\xfd\xcd\xf0#_\xb6\xdc`\xaa>\x19\xb4" +
	"\x81$\x04>\xe2\x06\x81\xf3\x8c\xdb_v\xcd\x13Sn" +
	"0YBlCh\x08\x19\xf3*\xce\xa4\xe7\xf7\x1f\xad" +
	"5\xaa\x11o\x90/\xbb\xc1T*I\xf8\xaf\xe8\x92\xe3" +
	";\xda\xf1\xc0\xa6\x1a\x05\xa0\x08\xc0\xb2w\x00\xd8i\x0d" +
	"\xed\x83\x04\xb7V\x8e9\x0dd\xe2\xa7\xbe\x95\xfd\xbdk" +
	"\x1f\\\x05\x80\"24mJ0y\xc8p\x9bM\x11" +
	"\x11K\x1abO<l@d\x10\xeb\xd6C%\x07k" +
	"A\xc5\x9bv\xfd\x93\x8f\xb5\xce[\xb3\xf0\x95\xf6\xfad" +
	"\x00I9#\x00vFC\xfbf\x82\"\x02\x02\x00\xb2" +
	"8\xeb\x9b\xca`4j+D\x97\x10m\xaa\xe9\x00\xed" +
	"\x84b\xf4\x82\x19\x1b\x02\xc2\xf4\xd4L\x8b\xb9\x88\xc99" +
	"cd\x85\xa9\xbc\xb0\xd3\x88\x89\x17\xbee(\x91\x14}" +
	"d\xa6\xec*\xa3D\xd9\x0d\x9a^#pA\xcd\x91f" +
	"\x84P\x8d\x14\x86\x00\xec\xbc\x86\xf6\x1e\x82Y\xbc.z" +
	"Q\x9e\xee\x96\xed\xdd\xa5\xa1\xbd\x9f\xe0\x8c\x1f2`O" +
	"\\\x05\x10{\x00\x85\x1fsbO\\\xb6u\xbb\xc9\xe9" +
	"\x8e\xf9\xd6C\xeb\xf3%\xd3\xf1\x9d\xeef\xf7\x12\xdc\xda" +
	"p\x8e\xbb\x98\x01\x82\x99\x04\xe7?\xe5\xb6\x0b\xd7\xde\x16" +
	"W\x9e\xa0\xe9T\xab~\x809\xe8\x92\x88\\\xa7Uc" +
	"\x9e\xa9\x14\xc6NE\x9b\x10\xa3e\xc9\x98\x0f\x84mI" +
	"\x89(\xbf`\xaa\x04ot\xecF\x13\x88^[R\xf6" +
	"P<\x82\x99\x16\x0eY\xbc\xab6\x85\x8bl\xae`\x85" +
	"\x17RzZI\x8fV\x02F\xcb\x9a\x0d\x8c\x00a\x85" +
	"\x14\xc6;\x14\xa3\xed\xc6v\xca\x00\xb2T2\xda\xc5\xb6" +
	"\x8e\xaeq<P\xb5\xaa\xfep\xe3\xa8\x17\x96\x8c\xfa(" +
	"l\x8f\xf3\xc5\x10[\xf1\x92\x9e\xdc\x1e>f\xadV\x8d" +
	"\xdc\xddhO\x16\xc8\x06S:6\x90\x15\x86/t\xe7" +
	"\xff\xd8Mo\xb4\x00\xac\xd2\x7fN\xe8\xdf\x01\x00\x00\xff" +
	"\xffa\xa33\xa0"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x9f93db577b084c4b,
		0x9fe65a406fba5583,
		0xa33c37f7a390a3bf,
		0xa94bdd0b5449db25,
		0xb14b5203df9fa7c8,
		0xcdc156a3faea6ebf,
		0xd2afeaf36c70c91f,
		0xd40e2f0673af616c,
		0xd80e24dbc41b1f0d,
		0xd8eba41bb8f5845d,
		0xda5a597d0c3a72a4,
		0xe4a48c5d3f25d6d0,
		0xeb56805616fef06f,
		0xf42beb36cd723e35,
		0xf8e8ab21195eede9)
}
