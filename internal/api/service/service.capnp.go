// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	pubsub "github.com/wetware/ww/internal/api/pubsub"
	strconv "strconv"
)

type Registry capnp.Client

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xfdee076f6379cb46

func (c Registry) Provide(ctx context.Context, params func(Registry_provide_Params) error) (Registry_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      0,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_provide_Results_Future{Future: ans.Future()}, release
}
func (c Registry) FindProviders(ctx context.Context, params func(Registry_findProviders_Params) error) (Registry_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      1,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registry) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registry) AddRef() Registry {
	return Registry(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registry) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registry) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registry) DecodeFromPtr(p capnp.Ptr) Registry {
	return Registry(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registry) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registry) IsSame(other Registry) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registry) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registry) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	Provide(context.Context, Registry_provide) error

	FindProviders(context.Context, Registry_findProviders) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server) Registry {
	return Registry(capnp.NewClient(Registry_NewServer(s)))
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      0,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Registry_provide{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdee076f6379cb46,
			MethodID:      1,
			InterfaceName: "service.capnp:Registry",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Registry_findProviders{call})
		},
	})

	return methods
}

// Registry_provide holds the state for a server call to Registry.provide.
// See server.Call for documentation.
type Registry_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_provide) Args() Registry_provide_Params {
	return Registry_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_provide) AllocResults() (Registry_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(r), err
}

// Registry_findProviders holds the state for a server call to Registry.findProviders.
// See server.Call for documentation.
type Registry_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_findProviders) Args() Registry_findProviders_Params {
	return Registry_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_findProviders) AllocResults() (Registry_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(r), err
}

// Registry_List is a list of Registry.
type Registry_List = capnp.CapList[Registry]

// NewRegistry creates a new list of Registry.
func NewRegistry_List(s *capnp.Segment, sz int32) (Registry_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registry](l), err
}

type Registry_provide_Params capnp.Struct

// Registry_provide_Params_TypeID is the unique identifier for the type Registry_provide_Params.
const Registry_provide_Params_TypeID = 0xbf9edfd4684337f6

func NewRegistry_provide_Params(s *capnp.Segment) (Registry_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_provide_Params(st), err
}

func NewRootRegistry_provide_Params(s *capnp.Segment) (Registry_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_provide_Params(st), err
}

func ReadRootRegistry_provide_Params(msg *capnp.Message) (Registry_provide_Params, error) {
	root, err := msg.Root()
	return Registry_provide_Params(root.Struct()), err
}

func (s Registry_provide_Params) String() string {
	str, _ := text.Marshal(0xbf9edfd4684337f6, capnp.Struct(s))
	return str
}

func (s Registry_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_provide_Params) DecodeFromPtr(p capnp.Ptr) Registry_provide_Params {
	return Registry_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_provide_Params) Topic() pubsub.Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Topic(p.Interface().Client())
}

func (s Registry_provide_Params) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_provide_Params) SetTopic(v pubsub.Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registry_provide_Params) Envelope() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Registry_provide_Params) HasEnvelope() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registry_provide_Params) SetEnvelope(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Registry_provide_Params_List is a list of Registry_provide_Params.
type Registry_provide_Params_List = capnp.StructList[Registry_provide_Params]

// NewRegistry_provide_Params creates a new list of Registry_provide_Params.
func NewRegistry_provide_Params_List(s *capnp.Segment, sz int32) (Registry_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registry_provide_Params](l), err
}

// Registry_provide_Params_Future is a wrapper for a Registry_provide_Params promised by a client call.
type Registry_provide_Params_Future struct{ *capnp.Future }

func (f Registry_provide_Params_Future) Struct() (Registry_provide_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_provide_Params(p.Struct()), err
}
func (p Registry_provide_Params_Future) Topic() pubsub.Topic {
	return pubsub.Topic(p.Future.Field(0, nil).Client())
}

type Registry_provide_Results capnp.Struct

// Registry_provide_Results_TypeID is the unique identifier for the type Registry_provide_Results.
const Registry_provide_Results_TypeID = 0xd9ef66060e1157d3

func NewRegistry_provide_Results(s *capnp.Segment) (Registry_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(st), err
}

func NewRootRegistry_provide_Results(s *capnp.Segment) (Registry_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_provide_Results(st), err
}

func ReadRootRegistry_provide_Results(msg *capnp.Message) (Registry_provide_Results, error) {
	root, err := msg.Root()
	return Registry_provide_Results(root.Struct()), err
}

func (s Registry_provide_Results) String() string {
	str, _ := text.Marshal(0xd9ef66060e1157d3, capnp.Struct(s))
	return str
}

func (s Registry_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_provide_Results) DecodeFromPtr(p capnp.Ptr) Registry_provide_Results {
	return Registry_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registry_provide_Results_List is a list of Registry_provide_Results.
type Registry_provide_Results_List = capnp.StructList[Registry_provide_Results]

// NewRegistry_provide_Results creates a new list of Registry_provide_Results.
func NewRegistry_provide_Results_List(s *capnp.Segment, sz int32) (Registry_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registry_provide_Results](l), err
}

// Registry_provide_Results_Future is a wrapper for a Registry_provide_Results promised by a client call.
type Registry_provide_Results_Future struct{ *capnp.Future }

func (f Registry_provide_Results_Future) Struct() (Registry_provide_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_provide_Results(p.Struct()), err
}

type Registry_findProviders_Params capnp.Struct

// Registry_findProviders_Params_TypeID is the unique identifier for the type Registry_findProviders_Params.
const Registry_findProviders_Params_TypeID = 0xd589c56f3d6a445e

func NewRegistry_findProviders_Params(s *capnp.Segment) (Registry_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_findProviders_Params(st), err
}

func NewRootRegistry_findProviders_Params(s *capnp.Segment) (Registry_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registry_findProviders_Params(st), err
}

func ReadRootRegistry_findProviders_Params(msg *capnp.Message) (Registry_findProviders_Params, error) {
	root, err := msg.Root()
	return Registry_findProviders_Params(root.Struct()), err
}

func (s Registry_findProviders_Params) String() string {
	str, _ := text.Marshal(0xd589c56f3d6a445e, capnp.Struct(s))
	return str
}

func (s Registry_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Registry_findProviders_Params {
	return Registry_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_findProviders_Params) Topic() pubsub.Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Topic(p.Interface().Client())
}

func (s Registry_findProviders_Params) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_findProviders_Params) SetTopic(v pubsub.Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registry_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(1)
	return channel.Sender(p.Interface().Client())
}

func (s Registry_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registry_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Registry_findProviders_Params_List is a list of Registry_findProviders_Params.
type Registry_findProviders_Params_List = capnp.StructList[Registry_findProviders_Params]

// NewRegistry_findProviders_Params creates a new list of Registry_findProviders_Params.
func NewRegistry_findProviders_Params_List(s *capnp.Segment, sz int32) (Registry_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registry_findProviders_Params](l), err
}

// Registry_findProviders_Params_Future is a wrapper for a Registry_findProviders_Params promised by a client call.
type Registry_findProviders_Params_Future struct{ *capnp.Future }

func (f Registry_findProviders_Params_Future) Struct() (Registry_findProviders_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_findProviders_Params(p.Struct()), err
}
func (p Registry_findProviders_Params_Future) Topic() pubsub.Topic {
	return pubsub.Topic(p.Future.Field(0, nil).Client())
}

func (p Registry_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(1, nil).Client())
}

type Registry_findProviders_Results capnp.Struct

// Registry_findProviders_Results_TypeID is the unique identifier for the type Registry_findProviders_Results.
const Registry_findProviders_Results_TypeID = 0xd86baa632daef690

func NewRegistry_findProviders_Results(s *capnp.Segment) (Registry_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(st), err
}

func NewRootRegistry_findProviders_Results(s *capnp.Segment) (Registry_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_findProviders_Results(st), err
}

func ReadRootRegistry_findProviders_Results(msg *capnp.Message) (Registry_findProviders_Results, error) {
	root, err := msg.Root()
	return Registry_findProviders_Results(root.Struct()), err
}

func (s Registry_findProviders_Results) String() string {
	str, _ := text.Marshal(0xd86baa632daef690, capnp.Struct(s))
	return str
}

func (s Registry_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Registry_findProviders_Results {
	return Registry_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registry_findProviders_Results_List is a list of Registry_findProviders_Results.
type Registry_findProviders_Results_List = capnp.StructList[Registry_findProviders_Results]

// NewRegistry_findProviders_Results creates a new list of Registry_findProviders_Results.
func NewRegistry_findProviders_Results_List(s *capnp.Segment, sz int32) (Registry_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registry_findProviders_Results](l), err
}

// Registry_findProviders_Results_Future is a wrapper for a Registry_findProviders_Results promised by a client call.
type Registry_findProviders_Results_Future struct{ *capnp.Future }

func (f Registry_findProviders_Results_Future) Struct() (Registry_findProviders_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_findProviders_Results(p.Struct()), err
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) SetRequest() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Message) Response() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v []byte) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetData(0, v)
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type Location capnp.Struct
type Location_Which uint16

const (
	Location_Which_maddrs Location_Which = 0
	Location_Which_anchor Location_Which = 1
	Location_Which_custom Location_Which = 2
)

func (w Location_Which) String() string {
	const s = "maddrsanchorcustom"
	switch w {
	case Location_Which_maddrs:
		return s[0:6]
	case Location_Which_anchor:
		return s[6:12]
	case Location_Which_custom:
		return s[12:18]

	}
	return "Location_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0xe61540af32cf81b6

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0xe61540af32cf81b6, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Location) Which() Location_Which {
	return Location_Which(capnp.Struct(s).Uint16(0))
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Service() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location) HasService() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) ServiceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location) SetService(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Location) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Location) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Location) Maddrs() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != maddrs")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Location) HasMaddrs() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetMaddrs(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMaddrs sets the maddrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Location) NewMaddrs(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(0, 0)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Location) Anchor() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Location) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) AnchorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Location) SetAnchor(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(2, v)
}

func (s Location) Custom() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != custom")
	}
	return capnp.Struct(s).Ptr(2)
}

func (s Location) HasCustom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetCustom(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(2, v)
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Custom() *capnp.Future {
	return p.Future.Field(2, nil)
}

const schema_fcba4f486a351ac3 = "x\xda\x8cS]HdU\x1c\xff\xff\xce\xb9wn\x82" +
	"3v\xbcSR0\x0c\x81\x82F\x9a\x8eD\"\xc4\x0c" +
	"\xf6AD\xd1\x9cy\xe9-\xb8\xdd9\xea\xa8s\xef\xed" +
	"\xde\xd1\x12\x12\x11\x8a\xe8\xcd\x1e\x02\x9fz\x0a\xca\xa8\x94" +
	"\x88 {\x88\x88\x1e\xa2\x87\xa0\x0f\xa8\xa7\xdev\x17a" +
	"]\x96e\x85\x85\xd5\xb3\x9c\xf9\xd0Y\xdde}\xfd\xfd" +
	"\x7f\xf7\xfe>\xfe\xe7?^`%k\"\xfdy\x0f1" +
	"\x19\xd9)}\xf8\xec\xf3\xf3\x7f\xff\xff\xe9O$\x06@" +
	"d3\x87h\xf2\x07\xab\x00\x82\xfb\xb3\xf5\x0eA\xe7\x7f" +
	"\x8b\x96n\xec\xef\xfcI2\x03\xe8_\x1e\x7ff\xe1\xe5" +
	"\xd7\xf7n\xd3\x8bp\x18\x91\xfb\x84\xfd\xad;b;D" +
	"\xee\x90m\xd8o\xbe\xb0\xf0\\\xf8\xebG\xfft\xff\xee" +
	"\x03\xfb-\xf3\xbb\x8f\x9b\x84\xcd\xc3oF\xfd/\x17\xff" +
	"m\x11,3\xcf\xa5\x16@\x96\xfe\xeb\x0d\x91I\xcd^" +
	"\xfb\xafk\xd2\x93\x9a6\x93\xef7\xfe(\xec\x94\x1e\xb9" +
	"t\xd6\x02w8\x91{\xdd\xdeso\x19\x0b\x937\xed" +
	"<\x08\xfa\xa5\xdfW\xfd\xd098\"\x91\xe1\xa7l\x82" +
	";\xe4\xec\xb9\xa3\x8e1;\xe2|\xe8\xae9\x0e]\xd6" +
	"\x89\x8aWj\xbe\x1a\xe3\xbe\x17\x05\xd1tE\xcd\xd5\x92" +
	"F\xbc:\x16\xc5\xe1J\xad\xaa\x06\xcby/\xf6\xea\x89" +
	"|\x88[D\x16\x88\xc4H\x81H\x0er\xc8q\x06\x01" +
	"da\xc0\xd1W\x88\xe4S\x1cr\x8a!\xdf\x08\xa3\x9a" +
	"\x0f\xa1w\x17\x1f~zx;\xd8\"\x02\x04A\xab`" +
	"E-\x85\x91\"\"\xa4\x89!M8\xd1GK\xff5" +
	"\x95O\x12oN\x95\x01#\xd9\xabuKs\xe6T3" +
	"\x8dc}^t=Vo/\xab\xa4A)\x1d\xab$" +
	"\x0a\x83\xe4\x9e2\xd6\x99\x98\xb3\xb5\xa0ZnE\x8d\x93" +
	"\xc1\xb2\x17;\x17\x09\xfb$\x91\x1c\xe6\x90\xd5\xfb\x87\xed" +
	"\xf3\xe7\xbd\x00B\x1f<\xba?\x95\xbd\xfa\xe3\x15\"*" +
	"A /-\x86nP`@Z\x00P\xe6h\xba\x15" +
	"\x17v[QI\xdf\xf2R#y\xe0\x0e+E\x95\xdc" +
	"El\x97\xfdjX\xf4\xbdF-\x0cL\xdb\xd9\x93\xcc" +
	"k\xa6\xecw9\xe4\xfb]\x997L\xe6\xf78\xe4\x16" +
	"C\x8ei\xcd\xb2`D\xe2\x93i\"\xb9\xc9!\xbfb" +
	"\xc8\xf1c\x03s\"\xb1m\xe0\xcf8\xe4.C\xce:" +
	"2\xb0E$\xbe6\xf0\x17\x1c\xf2;\x86\xf5\xb6\x19\xf4" +
	"\x12C/\xa1\xaf\xae\x1a\x1e2\xd4,\xc2`\x19B\xb1" +
	"\xeeU\xabq\xd2A\xd3m\xd4\x0b\xfc\xf90\xee|X" +
	"\xf4\x97\x93FXG?1\xf4\x9f\x7fQ\x15Ul\xd5" +
	"\xd1zR6\xd1\xc9\xcd\xa3srbb\x86\x98\x18r" +
	"pz\xc0\xe8\x1c\xaax,&&\x84\xb3\xden\xb3\x04" +
	"\xddY\x03\xe5\x9b\x8b(\xa1\x0c\xdc\x09\x00\x00\xff\xff\xc9" +
	"\x04%\x96"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0xbf9edfd4684337f6,
		0xd2afeaf36c70c91f,
		0xd589c56f3d6a445e,
		0xd86baa632daef690,
		0xd9ef66060e1157d3,
		0xe61540af32cf81b6,
		0xfdee076f6379cb46)
}
