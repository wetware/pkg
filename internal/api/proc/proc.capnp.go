// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type UnixExecutor struct{ Client *capnp.Client }

// UnixExecutor_TypeID is the unique identifier for the type UnixExecutor.
const UnixExecutor_TypeID = 0x808180da028ec18f

func (c UnixExecutor) Command(ctx context.Context, params func(UnixExecutor_command_Params) error) (UnixExecutor_command_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x808180da028ec18f,
			MethodID:      0,
			InterfaceName: "proc.capnp:UnixExecutor",
			MethodName:    "command",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UnixExecutor_command_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return UnixExecutor_command_Results_Future{Future: ans.Future()}, release
}

func (c UnixExecutor) AddRef() UnixExecutor {
	return UnixExecutor{
		Client: c.Client.AddRef(),
	}
}

func (c UnixExecutor) Release() {
	c.Client.Release()
}

// A UnixExecutor_Server is a UnixExecutor with a local implementation.
type UnixExecutor_Server interface {
	Command(context.Context, UnixExecutor_command) error
}

// UnixExecutor_NewServer creates a new Server from an implementation of UnixExecutor_Server.
func UnixExecutor_NewServer(s UnixExecutor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UnixExecutor_Methods(nil, s), s, c, policy)
}

// UnixExecutor_ServerToClient creates a new Client from an implementation of UnixExecutor_Server.
// The caller is responsible for calling Release on the returned Client.
func UnixExecutor_ServerToClient(s UnixExecutor_Server, policy *server.Policy) UnixExecutor {
	return UnixExecutor{Client: capnp.NewClient(UnixExecutor_NewServer(s, policy))}
}

// UnixExecutor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UnixExecutor_Methods(methods []server.Method, s UnixExecutor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x808180da028ec18f,
			MethodID:      0,
			InterfaceName: "proc.capnp:UnixExecutor",
			MethodName:    "command",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Command(ctx, UnixExecutor_command{call})
		},
	})

	return methods
}

// UnixExecutor_command holds the state for a server call to UnixExecutor.command.
// See server.Call for documentation.
type UnixExecutor_command struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UnixExecutor_command) Args() UnixExecutor_command_Params {
	return UnixExecutor_command_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c UnixExecutor_command) AllocResults() (UnixExecutor_command_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{Struct: r}, err
}

type UnixExecutor_command_Params struct{ capnp.Struct }

// UnixExecutor_command_Params_TypeID is the unique identifier for the type UnixExecutor_command_Params.
const UnixExecutor_command_Params_TypeID = 0xc34c7e36b62d7264

func NewUnixExecutor_command_Params(s *capnp.Segment) (UnixExecutor_command_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixExecutor_command_Params{st}, err
}

func NewRootUnixExecutor_command_Params(s *capnp.Segment) (UnixExecutor_command_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixExecutor_command_Params{st}, err
}

func ReadRootUnixExecutor_command_Params(msg *capnp.Message) (UnixExecutor_command_Params, error) {
	root, err := msg.Root()
	return UnixExecutor_command_Params{root.Struct()}, err
}

func (s UnixExecutor_command_Params) String() string {
	str, _ := text.Marshal(0xc34c7e36b62d7264, s.Struct)
	return str
}

func (s UnixExecutor_command_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UnixExecutor_command_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s UnixExecutor_command_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UnixExecutor_command_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UnixExecutor_command_Params) Arg() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s UnixExecutor_command_Params) HasArg() bool {
	return s.Struct.HasPtr(1)
}

func (s UnixExecutor_command_Params) SetArg(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArg sets the arg field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s UnixExecutor_command_Params) NewArg(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// UnixExecutor_command_Params_List is a list of UnixExecutor_command_Params.
type UnixExecutor_command_Params_List = capnp.StructList[UnixExecutor_command_Params]

// NewUnixExecutor_command_Params creates a new list of UnixExecutor_command_Params.
func NewUnixExecutor_command_Params_List(s *capnp.Segment, sz int32) (UnixExecutor_command_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UnixExecutor_command_Params]{l}, err
}

// UnixExecutor_command_Params_Future is a wrapper for a UnixExecutor_command_Params promised by a client call.
type UnixExecutor_command_Params_Future struct{ *capnp.Future }

func (p UnixExecutor_command_Params_Future) Struct() (UnixExecutor_command_Params, error) {
	s, err := p.Future.Struct()
	return UnixExecutor_command_Params{s}, err
}

type UnixExecutor_command_Results struct{ capnp.Struct }

// UnixExecutor_command_Results_TypeID is the unique identifier for the type UnixExecutor_command_Results.
const UnixExecutor_command_Results_TypeID = 0xb647077be7d9c5d3

func NewUnixExecutor_command_Results(s *capnp.Segment) (UnixExecutor_command_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{st}, err
}

func NewRootUnixExecutor_command_Results(s *capnp.Segment) (UnixExecutor_command_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{st}, err
}

func ReadRootUnixExecutor_command_Results(msg *capnp.Message) (UnixExecutor_command_Results, error) {
	root, err := msg.Root()
	return UnixExecutor_command_Results{root.Struct()}, err
}

func (s UnixExecutor_command_Results) String() string {
	str, _ := text.Marshal(0xb647077be7d9c5d3, s.Struct)
	return str
}

func (s UnixExecutor_command_Results) Cmd() Cmd {
	p, _ := s.Struct.Ptr(0)
	return Cmd{Client: p.Interface().Client()}
}

func (s UnixExecutor_command_Results) HasCmd() bool {
	return s.Struct.HasPtr(0)
}

func (s UnixExecutor_command_Results) SetCmd(v Cmd) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// UnixExecutor_command_Results_List is a list of UnixExecutor_command_Results.
type UnixExecutor_command_Results_List = capnp.StructList[UnixExecutor_command_Results]

// NewUnixExecutor_command_Results creates a new list of UnixExecutor_command_Results.
func NewUnixExecutor_command_Results_List(s *capnp.Segment, sz int32) (UnixExecutor_command_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UnixExecutor_command_Results]{l}, err
}

// UnixExecutor_command_Results_Future is a wrapper for a UnixExecutor_command_Results promised by a client call.
type UnixExecutor_command_Results_Future struct{ *capnp.Future }

func (p UnixExecutor_command_Results_Future) Struct() (UnixExecutor_command_Results, error) {
	s, err := p.Future.Struct()
	return UnixExecutor_command_Results{s}, err
}

func (p UnixExecutor_command_Results_Future) Cmd() Cmd {
	return Cmd{Client: p.Future.Field(0, nil).Client()}
}

type Cmd struct{ Client *capnp.Client }

// Cmd_TypeID is the unique identifier for the type Cmd.
const Cmd_TypeID = 0xd503d05399426c88

func (c Cmd) Start(ctx context.Context, params func(Cmd_start_Params) error) (Cmd_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      0,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_start_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_start_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) Wait(ctx context.Context, params func(Cmd_wait_Params) error) (Cmd_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      1,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_wait_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StderrPipe(ctx context.Context, params func(Cmd_stderrPipe_Params) error) (Cmd_stderrPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      2,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stderrPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stderrPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stderrPipe_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StdinPipe(ctx context.Context, params func(Cmd_stdinPipe_Params) error) (Cmd_stdinPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      3,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdinPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stdinPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stdinPipe_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StdoutPipe(ctx context.Context, params func(Cmd_stdoutPipe_Params) error) (Cmd_stdoutPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      4,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdoutPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stdoutPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stdoutPipe_Results_Future{Future: ans.Future()}, release
}

func (c Cmd) AddRef() Cmd {
	return Cmd{
		Client: c.Client.AddRef(),
	}
}

func (c Cmd) Release() {
	c.Client.Release()
}

// A Cmd_Server is a Cmd with a local implementation.
type Cmd_Server interface {
	Start(context.Context, Cmd_start) error

	Wait(context.Context, Cmd_wait) error

	StderrPipe(context.Context, Cmd_stderrPipe) error

	StdinPipe(context.Context, Cmd_stdinPipe) error

	StdoutPipe(context.Context, Cmd_stdoutPipe) error
}

// Cmd_NewServer creates a new Server from an implementation of Cmd_Server.
func Cmd_NewServer(s Cmd_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cmd_Methods(nil, s), s, c, policy)
}

// Cmd_ServerToClient creates a new Client from an implementation of Cmd_Server.
// The caller is responsible for calling Release on the returned Client.
func Cmd_ServerToClient(s Cmd_Server, policy *server.Policy) Cmd {
	return Cmd{Client: capnp.NewClient(Cmd_NewServer(s, policy))}
}

// Cmd_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cmd_Methods(methods []server.Method, s Cmd_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      0,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Cmd_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      1,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Cmd_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      2,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stderrPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StderrPipe(ctx, Cmd_stderrPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      3,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdinPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdinPipe(ctx, Cmd_stdinPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      4,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdoutPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdoutPipe(ctx, Cmd_stdoutPipe{call})
		},
	})

	return methods
}

// Cmd_start holds the state for a server call to Cmd.start.
// See server.Call for documentation.
type Cmd_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_start) Args() Cmd_start_Params {
	return Cmd_start_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_start) AllocResults() (Cmd_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_start_Results{Struct: r}, err
}

// Cmd_wait holds the state for a server call to Cmd.wait.
// See server.Call for documentation.
type Cmd_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_wait) Args() Cmd_wait_Params {
	return Cmd_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_wait) AllocResults() (Cmd_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_wait_Results{Struct: r}, err
}

// Cmd_stderrPipe holds the state for a server call to Cmd.stderrPipe.
// See server.Call for documentation.
type Cmd_stderrPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stderrPipe) Args() Cmd_stderrPipe_Params {
	return Cmd_stderrPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stderrPipe) AllocResults() (Cmd_stderrPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{Struct: r}, err
}

// Cmd_stdinPipe holds the state for a server call to Cmd.stdinPipe.
// See server.Call for documentation.
type Cmd_stdinPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stdinPipe) Args() Cmd_stdinPipe_Params {
	return Cmd_stdinPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stdinPipe) AllocResults() (Cmd_stdinPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{Struct: r}, err
}

// Cmd_stdoutPipe holds the state for a server call to Cmd.stdoutPipe.
// See server.Call for documentation.
type Cmd_stdoutPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stdoutPipe) Args() Cmd_stdoutPipe_Params {
	return Cmd_stdoutPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stdoutPipe) AllocResults() (Cmd_stdoutPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{Struct: r}, err
}

type Cmd_start_Params struct{ capnp.Struct }

// Cmd_start_Params_TypeID is the unique identifier for the type Cmd_start_Params.
const Cmd_start_Params_TypeID = 0xbfa53a265f4fa1f4

func NewCmd_start_Params(s *capnp.Segment) (Cmd_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Params{st}, err
}

func NewRootCmd_start_Params(s *capnp.Segment) (Cmd_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Params{st}, err
}

func ReadRootCmd_start_Params(msg *capnp.Message) (Cmd_start_Params, error) {
	root, err := msg.Root()
	return Cmd_start_Params{root.Struct()}, err
}

func (s Cmd_start_Params) String() string {
	str, _ := text.Marshal(0xbfa53a265f4fa1f4, s.Struct)
	return str
}

// Cmd_start_Params_List is a list of Cmd_start_Params.
type Cmd_start_Params_List = capnp.StructList[Cmd_start_Params]

// NewCmd_start_Params creates a new list of Cmd_start_Params.
func NewCmd_start_Params_List(s *capnp.Segment, sz int32) (Cmd_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_start_Params]{l}, err
}

// Cmd_start_Params_Future is a wrapper for a Cmd_start_Params promised by a client call.
type Cmd_start_Params_Future struct{ *capnp.Future }

func (p Cmd_start_Params_Future) Struct() (Cmd_start_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_start_Params{s}, err
}

type Cmd_start_Results struct{ capnp.Struct }

// Cmd_start_Results_TypeID is the unique identifier for the type Cmd_start_Results.
const Cmd_start_Results_TypeID = 0xea499ec43bd19f91

func NewCmd_start_Results(s *capnp.Segment) (Cmd_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_start_Results{st}, err
}

func NewRootCmd_start_Results(s *capnp.Segment) (Cmd_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_start_Results{st}, err
}

func ReadRootCmd_start_Results(msg *capnp.Message) (Cmd_start_Results, error) {
	root, err := msg.Root()
	return Cmd_start_Results{root.Struct()}, err
}

func (s Cmd_start_Results) String() string {
	str, _ := text.Marshal(0xea499ec43bd19f91, s.Struct)
	return str
}

func (s Cmd_start_Results) Err() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cmd_start_Results) HasErr() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_start_Results) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cmd_start_Results) SetErr(v string) error {
	return s.Struct.SetText(0, v)
}

// Cmd_start_Results_List is a list of Cmd_start_Results.
type Cmd_start_Results_List = capnp.StructList[Cmd_start_Results]

// NewCmd_start_Results creates a new list of Cmd_start_Results.
func NewCmd_start_Results_List(s *capnp.Segment, sz int32) (Cmd_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_start_Results]{l}, err
}

// Cmd_start_Results_Future is a wrapper for a Cmd_start_Results promised by a client call.
type Cmd_start_Results_Future struct{ *capnp.Future }

func (p Cmd_start_Results_Future) Struct() (Cmd_start_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_start_Results{s}, err
}

type Cmd_wait_Params struct{ capnp.Struct }

// Cmd_wait_Params_TypeID is the unique identifier for the type Cmd_wait_Params.
const Cmd_wait_Params_TypeID = 0xebd0b3816ff47540

func NewCmd_wait_Params(s *capnp.Segment) (Cmd_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Params{st}, err
}

func NewRootCmd_wait_Params(s *capnp.Segment) (Cmd_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Params{st}, err
}

func ReadRootCmd_wait_Params(msg *capnp.Message) (Cmd_wait_Params, error) {
	root, err := msg.Root()
	return Cmd_wait_Params{root.Struct()}, err
}

func (s Cmd_wait_Params) String() string {
	str, _ := text.Marshal(0xebd0b3816ff47540, s.Struct)
	return str
}

// Cmd_wait_Params_List is a list of Cmd_wait_Params.
type Cmd_wait_Params_List = capnp.StructList[Cmd_wait_Params]

// NewCmd_wait_Params creates a new list of Cmd_wait_Params.
func NewCmd_wait_Params_List(s *capnp.Segment, sz int32) (Cmd_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_wait_Params]{l}, err
}

// Cmd_wait_Params_Future is a wrapper for a Cmd_wait_Params promised by a client call.
type Cmd_wait_Params_Future struct{ *capnp.Future }

func (p Cmd_wait_Params_Future) Struct() (Cmd_wait_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_wait_Params{s}, err
}

type Cmd_wait_Results struct{ capnp.Struct }

// Cmd_wait_Results_TypeID is the unique identifier for the type Cmd_wait_Results.
const Cmd_wait_Results_TypeID = 0xa4489f77fff767e0

func NewCmd_wait_Results(s *capnp.Segment) (Cmd_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_wait_Results{st}, err
}

func NewRootCmd_wait_Results(s *capnp.Segment) (Cmd_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_wait_Results{st}, err
}

func ReadRootCmd_wait_Results(msg *capnp.Message) (Cmd_wait_Results, error) {
	root, err := msg.Root()
	return Cmd_wait_Results{root.Struct()}, err
}

func (s Cmd_wait_Results) String() string {
	str, _ := text.Marshal(0xa4489f77fff767e0, s.Struct)
	return str
}

func (s Cmd_wait_Results) Err() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cmd_wait_Results) HasErr() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_wait_Results) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cmd_wait_Results) SetErr(v string) error {
	return s.Struct.SetText(0, v)
}

// Cmd_wait_Results_List is a list of Cmd_wait_Results.
type Cmd_wait_Results_List = capnp.StructList[Cmd_wait_Results]

// NewCmd_wait_Results creates a new list of Cmd_wait_Results.
func NewCmd_wait_Results_List(s *capnp.Segment, sz int32) (Cmd_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_wait_Results]{l}, err
}

// Cmd_wait_Results_Future is a wrapper for a Cmd_wait_Results promised by a client call.
type Cmd_wait_Results_Future struct{ *capnp.Future }

func (p Cmd_wait_Results_Future) Struct() (Cmd_wait_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_wait_Results{s}, err
}

type Cmd_stderrPipe_Params struct{ capnp.Struct }

// Cmd_stderrPipe_Params_TypeID is the unique identifier for the type Cmd_stderrPipe_Params.
const Cmd_stderrPipe_Params_TypeID = 0xf07df1c4ebb1c4a4

func NewCmd_stderrPipe_Params(s *capnp.Segment) (Cmd_stderrPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stderrPipe_Params{st}, err
}

func NewRootCmd_stderrPipe_Params(s *capnp.Segment) (Cmd_stderrPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stderrPipe_Params{st}, err
}

func ReadRootCmd_stderrPipe_Params(msg *capnp.Message) (Cmd_stderrPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stderrPipe_Params{root.Struct()}, err
}

func (s Cmd_stderrPipe_Params) String() string {
	str, _ := text.Marshal(0xf07df1c4ebb1c4a4, s.Struct)
	return str
}

// Cmd_stderrPipe_Params_List is a list of Cmd_stderrPipe_Params.
type Cmd_stderrPipe_Params_List = capnp.StructList[Cmd_stderrPipe_Params]

// NewCmd_stderrPipe_Params creates a new list of Cmd_stderrPipe_Params.
func NewCmd_stderrPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stderrPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stderrPipe_Params]{l}, err
}

// Cmd_stderrPipe_Params_Future is a wrapper for a Cmd_stderrPipe_Params promised by a client call.
type Cmd_stderrPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stderrPipe_Params_Future) Struct() (Cmd_stderrPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stderrPipe_Params{s}, err
}

type Cmd_stderrPipe_Results struct{ capnp.Struct }

// Cmd_stderrPipe_Results_TypeID is the unique identifier for the type Cmd_stderrPipe_Results.
const Cmd_stderrPipe_Results_TypeID = 0xbcf68a5e761fb628

func NewCmd_stderrPipe_Results(s *capnp.Segment) (Cmd_stderrPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{st}, err
}

func NewRootCmd_stderrPipe_Results(s *capnp.Segment) (Cmd_stderrPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{st}, err
}

func ReadRootCmd_stderrPipe_Results(msg *capnp.Message) (Cmd_stderrPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stderrPipe_Results{root.Struct()}, err
}

func (s Cmd_stderrPipe_Results) String() string {
	str, _ := text.Marshal(0xbcf68a5e761fb628, s.Struct)
	return str
}

func (s Cmd_stderrPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Cmd_stderrPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stderrPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stderrPipe_Results_List is a list of Cmd_stderrPipe_Results.
type Cmd_stderrPipe_Results_List = capnp.StructList[Cmd_stderrPipe_Results]

// NewCmd_stderrPipe_Results creates a new list of Cmd_stderrPipe_Results.
func NewCmd_stderrPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stderrPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stderrPipe_Results]{l}, err
}

// Cmd_stderrPipe_Results_Future is a wrapper for a Cmd_stderrPipe_Results promised by a client call.
type Cmd_stderrPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stderrPipe_Results_Future) Struct() (Cmd_stderrPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stderrPipe_Results{s}, err
}

func (p Cmd_stderrPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type Cmd_stdinPipe_Params struct{ capnp.Struct }

// Cmd_stdinPipe_Params_TypeID is the unique identifier for the type Cmd_stdinPipe_Params.
const Cmd_stdinPipe_Params_TypeID = 0xe456479b51266803

func NewCmd_stdinPipe_Params(s *capnp.Segment) (Cmd_stdinPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdinPipe_Params{st}, err
}

func NewRootCmd_stdinPipe_Params(s *capnp.Segment) (Cmd_stdinPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdinPipe_Params{st}, err
}

func ReadRootCmd_stdinPipe_Params(msg *capnp.Message) (Cmd_stdinPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stdinPipe_Params{root.Struct()}, err
}

func (s Cmd_stdinPipe_Params) String() string {
	str, _ := text.Marshal(0xe456479b51266803, s.Struct)
	return str
}

// Cmd_stdinPipe_Params_List is a list of Cmd_stdinPipe_Params.
type Cmd_stdinPipe_Params_List = capnp.StructList[Cmd_stdinPipe_Params]

// NewCmd_stdinPipe_Params creates a new list of Cmd_stdinPipe_Params.
func NewCmd_stdinPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stdinPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stdinPipe_Params]{l}, err
}

// Cmd_stdinPipe_Params_Future is a wrapper for a Cmd_stdinPipe_Params promised by a client call.
type Cmd_stdinPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stdinPipe_Params_Future) Struct() (Cmd_stdinPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stdinPipe_Params{s}, err
}

type Cmd_stdinPipe_Results struct{ capnp.Struct }

// Cmd_stdinPipe_Results_TypeID is the unique identifier for the type Cmd_stdinPipe_Results.
const Cmd_stdinPipe_Results_TypeID = 0xe660907e6226a974

func NewCmd_stdinPipe_Results(s *capnp.Segment) (Cmd_stdinPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{st}, err
}

func NewRootCmd_stdinPipe_Results(s *capnp.Segment) (Cmd_stdinPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{st}, err
}

func ReadRootCmd_stdinPipe_Results(msg *capnp.Message) (Cmd_stdinPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stdinPipe_Results{root.Struct()}, err
}

func (s Cmd_stdinPipe_Results) String() string {
	str, _ := text.Marshal(0xe660907e6226a974, s.Struct)
	return str
}

func (s Cmd_stdinPipe_Results) Wc() WriteCloser {
	p, _ := s.Struct.Ptr(0)
	return WriteCloser{Client: p.Interface().Client()}
}

func (s Cmd_stdinPipe_Results) HasWc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stdinPipe_Results) SetWc(v WriteCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stdinPipe_Results_List is a list of Cmd_stdinPipe_Results.
type Cmd_stdinPipe_Results_List = capnp.StructList[Cmd_stdinPipe_Results]

// NewCmd_stdinPipe_Results creates a new list of Cmd_stdinPipe_Results.
func NewCmd_stdinPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stdinPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stdinPipe_Results]{l}, err
}

// Cmd_stdinPipe_Results_Future is a wrapper for a Cmd_stdinPipe_Results promised by a client call.
type Cmd_stdinPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stdinPipe_Results_Future) Struct() (Cmd_stdinPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stdinPipe_Results{s}, err
}

func (p Cmd_stdinPipe_Results_Future) Wc() WriteCloser {
	return WriteCloser{Client: p.Future.Field(0, nil).Client()}
}

type Cmd_stdoutPipe_Params struct{ capnp.Struct }

// Cmd_stdoutPipe_Params_TypeID is the unique identifier for the type Cmd_stdoutPipe_Params.
const Cmd_stdoutPipe_Params_TypeID = 0xbdae1d3b8723c47b

func NewCmd_stdoutPipe_Params(s *capnp.Segment) (Cmd_stdoutPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdoutPipe_Params{st}, err
}

func NewRootCmd_stdoutPipe_Params(s *capnp.Segment) (Cmd_stdoutPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdoutPipe_Params{st}, err
}

func ReadRootCmd_stdoutPipe_Params(msg *capnp.Message) (Cmd_stdoutPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stdoutPipe_Params{root.Struct()}, err
}

func (s Cmd_stdoutPipe_Params) String() string {
	str, _ := text.Marshal(0xbdae1d3b8723c47b, s.Struct)
	return str
}

// Cmd_stdoutPipe_Params_List is a list of Cmd_stdoutPipe_Params.
type Cmd_stdoutPipe_Params_List = capnp.StructList[Cmd_stdoutPipe_Params]

// NewCmd_stdoutPipe_Params creates a new list of Cmd_stdoutPipe_Params.
func NewCmd_stdoutPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stdoutPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stdoutPipe_Params]{l}, err
}

// Cmd_stdoutPipe_Params_Future is a wrapper for a Cmd_stdoutPipe_Params promised by a client call.
type Cmd_stdoutPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stdoutPipe_Params_Future) Struct() (Cmd_stdoutPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stdoutPipe_Params{s}, err
}

type Cmd_stdoutPipe_Results struct{ capnp.Struct }

// Cmd_stdoutPipe_Results_TypeID is the unique identifier for the type Cmd_stdoutPipe_Results.
const Cmd_stdoutPipe_Results_TypeID = 0xb706f28b7791424c

func NewCmd_stdoutPipe_Results(s *capnp.Segment) (Cmd_stdoutPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{st}, err
}

func NewRootCmd_stdoutPipe_Results(s *capnp.Segment) (Cmd_stdoutPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{st}, err
}

func ReadRootCmd_stdoutPipe_Results(msg *capnp.Message) (Cmd_stdoutPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stdoutPipe_Results{root.Struct()}, err
}

func (s Cmd_stdoutPipe_Results) String() string {
	str, _ := text.Marshal(0xb706f28b7791424c, s.Struct)
	return str
}

func (s Cmd_stdoutPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Cmd_stdoutPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stdoutPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stdoutPipe_Results_List is a list of Cmd_stdoutPipe_Results.
type Cmd_stdoutPipe_Results_List = capnp.StructList[Cmd_stdoutPipe_Results]

// NewCmd_stdoutPipe_Results creates a new list of Cmd_stdoutPipe_Results.
func NewCmd_stdoutPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stdoutPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stdoutPipe_Results]{l}, err
}

// Cmd_stdoutPipe_Results_Future is a wrapper for a Cmd_stdoutPipe_Results promised by a client call.
type Cmd_stdoutPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stdoutPipe_Results_Future) Struct() (Cmd_stdoutPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stdoutPipe_Results{s}, err
}

func (p Cmd_stdoutPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type ReadCloser struct{ Client *capnp.Client }

// ReadCloser_TypeID is the unique identifier for the type ReadCloser.
const ReadCloser_TypeID = 0xeb9cffb3fdd13c85

func (c ReadCloser) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c ReadCloser) AddRef() ReadCloser {
	return ReadCloser{
		Client: c.Client.AddRef(),
	}
}

func (c ReadCloser) Release() {
	c.Client.Release()
}

// A ReadCloser_Server is a ReadCloser with a local implementation.
type ReadCloser_Server interface {
	Read(context.Context, Reader_read) error

	Close(context.Context, Closer_close) error
}

// ReadCloser_NewServer creates a new Server from an implementation of ReadCloser_Server.
func ReadCloser_NewServer(s ReadCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadCloser_Methods(nil, s), s, c, policy)
}

// ReadCloser_ServerToClient creates a new Client from an implementation of ReadCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadCloser_ServerToClient(s ReadCloser_Server, policy *server.Policy) ReadCloser {
	return ReadCloser{Client: capnp.NewClient(ReadCloser_NewServer(s, policy))}
}

// ReadCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadCloser_Methods(methods []server.Method, s ReadCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type WriteCloser struct{ Client *capnp.Client }

// WriteCloser_TypeID is the unique identifier for the type WriteCloser.
const WriteCloser_TypeID = 0xb115ecb8561f676f

func (c WriteCloser) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c WriteCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c WriteCloser) AddRef() WriteCloser {
	return WriteCloser{
		Client: c.Client.AddRef(),
	}
}

func (c WriteCloser) Release() {
	c.Client.Release()
}

// A WriteCloser_Server is a WriteCloser with a local implementation.
type WriteCloser_Server interface {
	Write(context.Context, Writer_write) error

	Close(context.Context, Closer_close) error
}

// WriteCloser_NewServer creates a new Server from an implementation of WriteCloser_Server.
func WriteCloser_NewServer(s WriteCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WriteCloser_Methods(nil, s), s, c, policy)
}

// WriteCloser_ServerToClient creates a new Client from an implementation of WriteCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func WriteCloser_ServerToClient(s WriteCloser_Server, policy *server.Policy) WriteCloser {
	return WriteCloser{Client: capnp.NewClient(WriteCloser_NewServer(s, policy))}
}

// WriteCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WriteCloser_Methods(methods []server.Method, s WriteCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type Reader struct{ Client *capnp.Client }

// Reader_TypeID is the unique identifier for the type Reader.
const Reader_TypeID = 0x8135b09534858837

func (c Reader) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}

func (c Reader) AddRef() Reader {
	return Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Reader) Release() {
	c.Client.Release()
}

// A Reader_Server is a Reader with a local implementation.
type Reader_Server interface {
	Read(context.Context, Reader_read) error
}

// Reader_NewServer creates a new Server from an implementation of Reader_Server.
func Reader_NewServer(s Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Reader_Methods(nil, s), s, c, policy)
}

// Reader_ServerToClient creates a new Client from an implementation of Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Reader_ServerToClient(s Reader_Server, policy *server.Policy) Reader {
	return Reader{Client: capnp.NewClient(Reader_NewServer(s, policy))}
}

// Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Reader_Methods(methods []server.Method, s Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	return methods
}

// Reader_read holds the state for a server call to Reader.read.
// See server.Call for documentation.
type Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Reader_read) Args() Reader_read_Params {
	return Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Reader_read) AllocResults() (Reader_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{Struct: r}, err
}

type Reader_read_Params struct{ capnp.Struct }

// Reader_read_Params_TypeID is the unique identifier for the type Reader_read_Params.
const Reader_read_Params_TypeID = 0xf555056393ae30d6

func NewReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func NewRootReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func ReadRootReader_read_Params(msg *capnp.Message) (Reader_read_Params, error) {
	root, err := msg.Root()
	return Reader_read_Params{root.Struct()}, err
}

func (s Reader_read_Params) String() string {
	str, _ := text.Marshal(0xf555056393ae30d6, s.Struct)
	return str
}

func (s Reader_read_Params) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Params) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Params_List is a list of Reader_read_Params.
type Reader_read_Params_List = capnp.StructList[Reader_read_Params]

// NewReader_read_Params creates a new list of Reader_read_Params.
func NewReader_read_Params_List(s *capnp.Segment, sz int32) (Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Reader_read_Params]{l}, err
}

// Reader_read_Params_Future is a wrapper for a Reader_read_Params promised by a client call.
type Reader_read_Params_Future struct{ *capnp.Future }

func (p Reader_read_Params_Future) Struct() (Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Reader_read_Params{s}, err
}

type Reader_read_Results struct{ capnp.Struct }

// Reader_read_Results_TypeID is the unique identifier for the type Reader_read_Results.
const Reader_read_Results_TypeID = 0xc32fe58c2da49d81

func NewReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func NewRootReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func ReadRootReader_read_Results(msg *capnp.Message) (Reader_read_Results, error) {
	root, err := msg.Root()
	return Reader_read_Results{root.Struct()}, err
}

func (s Reader_read_Results) String() string {
	str, _ := text.Marshal(0xc32fe58c2da49d81, s.Struct)
	return str
}

func (s Reader_read_Results) P() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Reader_read_Results) HasP() bool {
	return s.Struct.HasPtr(0)
}

func (s Reader_read_Results) SetP(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Reader_read_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Results_List is a list of Reader_read_Results.
type Reader_read_Results_List = capnp.StructList[Reader_read_Results]

// NewReader_read_Results creates a new list of Reader_read_Results.
func NewReader_read_Results_List(s *capnp.Segment, sz int32) (Reader_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Reader_read_Results]{l}, err
}

// Reader_read_Results_Future is a wrapper for a Reader_read_Results promised by a client call.
type Reader_read_Results_Future struct{ *capnp.Future }

func (p Reader_read_Results_Future) Struct() (Reader_read_Results, error) {
	s, err := p.Future.Struct()
	return Reader_read_Results{s}, err
}

type Writer struct{ Client *capnp.Client }

// Writer_TypeID is the unique identifier for the type Writer.
const Writer_TypeID = 0xe393b08d69af9bff

func (c Writer) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}

func (c Writer) AddRef() Writer {
	return Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Writer) Release() {
	c.Client.Release()
}

// A Writer_Server is a Writer with a local implementation.
type Writer_Server interface {
	Write(context.Context, Writer_write) error
}

// Writer_NewServer creates a new Server from an implementation of Writer_Server.
func Writer_NewServer(s Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Writer_Methods(nil, s), s, c, policy)
}

// Writer_ServerToClient creates a new Client from an implementation of Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Writer_ServerToClient(s Writer_Server, policy *server.Policy) Writer {
	return Writer{Client: capnp.NewClient(Writer_NewServer(s, policy))}
}

// Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Writer_Methods(methods []server.Method, s Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	return methods
}

// Writer_write holds the state for a server call to Writer.write.
// See server.Call for documentation.
type Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Writer_write) Args() Writer_write_Params {
	return Writer_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Writer_write) AllocResults() (Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{Struct: r}, err
}

type Writer_write_Params struct{ capnp.Struct }

// Writer_write_Params_TypeID is the unique identifier for the type Writer_write_Params.
const Writer_write_Params_TypeID = 0xd780c48dc75ef416

func NewWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func NewRootWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func ReadRootWriter_write_Params(msg *capnp.Message) (Writer_write_Params, error) {
	root, err := msg.Root()
	return Writer_write_Params{root.Struct()}, err
}

func (s Writer_write_Params) String() string {
	str, _ := text.Marshal(0xd780c48dc75ef416, s.Struct)
	return str
}

func (s Writer_write_Params) P() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Writer_write_Params) HasP() bool {
	return s.Struct.HasPtr(0)
}

func (s Writer_write_Params) SetP(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Writer_write_Params_List is a list of Writer_write_Params.
type Writer_write_Params_List = capnp.StructList[Writer_write_Params]

// NewWriter_write_Params creates a new list of Writer_write_Params.
func NewWriter_write_Params_List(s *capnp.Segment, sz int32) (Writer_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Writer_write_Params]{l}, err
}

// Writer_write_Params_Future is a wrapper for a Writer_write_Params promised by a client call.
type Writer_write_Params_Future struct{ *capnp.Future }

func (p Writer_write_Params_Future) Struct() (Writer_write_Params, error) {
	s, err := p.Future.Struct()
	return Writer_write_Params{s}, err
}

type Writer_write_Results struct{ capnp.Struct }

// Writer_write_Results_TypeID is the unique identifier for the type Writer_write_Results.
const Writer_write_Results_TypeID = 0x81b0b07b371f8b52

func NewWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func NewRootWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func ReadRootWriter_write_Results(msg *capnp.Message) (Writer_write_Results, error) {
	root, err := msg.Root()
	return Writer_write_Results{root.Struct()}, err
}

func (s Writer_write_Results) String() string {
	str, _ := text.Marshal(0x81b0b07b371f8b52, s.Struct)
	return str
}

func (s Writer_write_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Writer_write_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Writer_write_Results_List is a list of Writer_write_Results.
type Writer_write_Results_List = capnp.StructList[Writer_write_Results]

// NewWriter_write_Results creates a new list of Writer_write_Results.
func NewWriter_write_Results_List(s *capnp.Segment, sz int32) (Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Writer_write_Results]{l}, err
}

// Writer_write_Results_Future is a wrapper for a Writer_write_Results promised by a client call.
type Writer_write_Results_Future struct{ *capnp.Future }

func (p Writer_write_Results_Future) Struct() (Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Writer_write_Results{s}, err
}

type Closer struct{ Client *capnp.Client }

// Closer_TypeID is the unique identifier for the type Closer.
const Closer_TypeID = 0xa054811b9dac9034

func (c Closer) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c Closer) AddRef() Closer {
	return Closer{
		Client: c.Client.AddRef(),
	}
}

func (c Closer) Release() {
	c.Client.Release()
}

// A Closer_Server is a Closer with a local implementation.
type Closer_Server interface {
	Close(context.Context, Closer_close) error
}

// Closer_NewServer creates a new Server from an implementation of Closer_Server.
func Closer_NewServer(s Closer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Closer_Methods(nil, s), s, c, policy)
}

// Closer_ServerToClient creates a new Client from an implementation of Closer_Server.
// The caller is responsible for calling Release on the returned Client.
func Closer_ServerToClient(s Closer_Server, policy *server.Policy) Closer {
	return Closer{Client: capnp.NewClient(Closer_NewServer(s, policy))}
}

// Closer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Closer_Methods(methods []server.Method, s Closer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

// Closer_close holds the state for a server call to Closer.close.
// See server.Call for documentation.
type Closer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Closer_close) Args() Closer_close_Params {
	return Closer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Closer_close) AllocResults() (Closer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{Struct: r}, err
}

type Closer_close_Params struct{ capnp.Struct }

// Closer_close_Params_TypeID is the unique identifier for the type Closer_close_Params.
const Closer_close_Params_TypeID = 0x82a029056a5bf10a

func NewCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func NewRootCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func ReadRootCloser_close_Params(msg *capnp.Message) (Closer_close_Params, error) {
	root, err := msg.Root()
	return Closer_close_Params{root.Struct()}, err
}

func (s Closer_close_Params) String() string {
	str, _ := text.Marshal(0x82a029056a5bf10a, s.Struct)
	return str
}

// Closer_close_Params_List is a list of Closer_close_Params.
type Closer_close_Params_List = capnp.StructList[Closer_close_Params]

// NewCloser_close_Params creates a new list of Closer_close_Params.
func NewCloser_close_Params_List(s *capnp.Segment, sz int32) (Closer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Params]{l}, err
}

// Closer_close_Params_Future is a wrapper for a Closer_close_Params promised by a client call.
type Closer_close_Params_Future struct{ *capnp.Future }

func (p Closer_close_Params_Future) Struct() (Closer_close_Params, error) {
	s, err := p.Future.Struct()
	return Closer_close_Params{s}, err
}

type Closer_close_Results struct{ capnp.Struct }

// Closer_close_Results_TypeID is the unique identifier for the type Closer_close_Results.
const Closer_close_Results_TypeID = 0x8de1ac13324b2807

func NewCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func NewRootCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func ReadRootCloser_close_Results(msg *capnp.Message) (Closer_close_Results, error) {
	root, err := msg.Root()
	return Closer_close_Results{root.Struct()}, err
}

func (s Closer_close_Results) String() string {
	str, _ := text.Marshal(0x8de1ac13324b2807, s.Struct)
	return str
}

// Closer_close_Results_List is a list of Closer_close_Results.
type Closer_close_Results_List = capnp.StructList[Closer_close_Results]

// NewCloser_close_Results creates a new list of Closer_close_Results.
func NewCloser_close_Results_List(s *capnp.Segment, sz int32) (Closer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Results]{l}, err
}

// Closer_close_Results_Future is a wrapper for a Closer_close_Results promised by a client call.
type Closer_close_Results_Future struct{ *capnp.Future }

func (p Closer_close_Results_Future) Struct() (Closer_close_Results, error) {
	s, err := p.Future.Struct()
	return Closer_close_Results{s}, err
}

const schema_d78885a0de56b292 = "x\xda\xacV_h\x1c\xd5\x17>gfnn~\xf9" +
	"u\x1bn&\x15\xffP\x16j\x1a\x93\xc2\xaeI\x93X" +
	"\x92\x0a\x1bR\xc3\x1a\xac\xb8\xb3\x9a\x88\x8a\xd5uw\x88" +
	"+\xd9?\x9d\xddu\xab\xa15+\x04\x835\xda\xa4\xf8" +
	" \xb56B\xfa \x94\x9a\xb6\x10E\x14\xd1F|m" +
	"\x10-\xed\x83h\xb5\x8a\x8d\x82-Q\xb1PF\xee\xdd" +
	"\xbd\xb3\xb3\xbb\x89\x88\xf84\xcc\x9cs\xbfs\xbes\xbe" +
	"s\xeet\xac*\xfdZ\xa7\xc7\xfe\x1f(F\x96\xd4\xd9" +
	"\xaf}\xf2\xaarq\xa20\x01\xec\xff\xaa={z\xe4" +
	"\xeb\xb9\xc9\xa9\xf3\x00\xa8_\xd6>\xd5\x7f\xd1(\x80\xfe" +
	"\x93\x16\xd4\x19\xa1\x00\xf6\x8e\xa9\xc9\xee\xd7\x17z\x0a5" +
	"\xce\x7fj\xb3:r\x17\xfd\x86\x16\xd4\xb7\x0a\xe7\xf0A" +
	"\xef\x8e\xf1\x85\x85\x02\x18M\x88\x00\x1c\xaa\xcbC\x14\x04" +
	"\xd4\x19\x09\x00\xda\x0dW\x1f{\x86\xb4\xcf\xbd\x08\xac\xa9" +
	"d\xd7;\xc9u\xd0l\xdav\xdfv\xfd\xc4\xb7\xd3e" +
	"C\xd7&~P\xb3\xbb\x0f\x9d8z[\xe1\xa1\xb9\x7f" +
	"\x94\xc07\xa3\x7f\xd8\xf9c\xf7\xce\x03kD\x00\x82\xdc" +
	"\xea!\x97\x9c\xf8\xa9Q\xef\xc8\xfb?o:U\x03\xd6" +
	"I>\xd0{\x05X\x0f\xa1z\x0f\xb9\x03\xc0\xfe\xe2\xb3" +
	"\x0b?\x8e\xd3\xe0\"\xb0\x9b%X\x97\x8f\x0cp6=" +
	"\x02m\xf7\xc0L\xfe\xe0\xb5\xba\xf7\\\xd1\xba\x86I\x13" +
	"wx\\8\xb4-z\x9f\xdd\xf3\xf2\xef\x1f\xba\x1d\xf6" +
	"\x17\x1d&\x85\xc3\xf8\xd2\xed/\xed\xdc|\xf2\xa3\xa2\x83" +
	"\xa0}\x9c4p\xda\xabo?\xf0Dk\xdf\xf1\x8f\xcb" +
	"\x16}\x9a\\\x02\xcd.\x1c\x9d\xf7\xbdr\xf9\xce\xb3\xa5" +
	"\x1a\x179\xee%\xd7\x01\xf5\x1c\xc9\x03\xda1\xcb\xb7x" +
	"\xd7\x81\xddgKi+\x1ct\x99\xf4\xf1\xa0\x17\x84\xc3" +
	"\xd4\xd8\xc0\x1b\x0f\x9eS\xbf\xac)\xc2`\xdd\xf3\xfaP" +
	"\x1d\xf7\x1f\xac\x0b\xa2~\x0b\xe5%\xbdiu\xcf\xe7\xd3" +
	"K\x13\xe7\x8b\x9d)\x86C\xca\xc3\x11\xca)\xd8G\xde" +
	"\x8dO/\x1c\xfe\xae\x06m+\x9d\xd5}\x1cBo\xa7" +
	"A\xdd\x10`\xea\xd3\xad\xc6\x91\xe0\xc8\xf7.\xbe\xbdT" +
	"\xb49\xfbN\xebS\x07\x0e=\xf9\x83\xbbT\x9bi\x03" +
	"\x0a \x1eg\xe6\xd8\xf2\xce\xa5\xb7\x86\xae\xb8[;H" +
	"\xaf\x00\xeaC\xc2>y\xf7\xf2\x8d3\xf6\x9b+5y" +
	"\xc4\xe9i}\xaf\xc8#A\xa9\x9e\xa0\xbc\xb5\xfd\xb9\xd5" +
	"T\xe1\xcc\xb9\x15WuMz\x114{~\xe9\xd4\xca" +
	"\xd2\xd5\xfd\xbf\xba\x12\x1c\xa2\xa2!_u\x9c<\x1c%" +
	"\xc3\xbf\xb9\xb4\xadw\xd2k\\\x0c4\x00>;m\xa5" +
	"\xa2\xfeh$\xad$\xd3}\xc3\xc9\xf8\xbe\xc1}f4" +
	"\x97MY\x10B44\x95\x008\x9dA\xa9,\xc6\x06" +
	"@a\x84\xbe\x10M%\x12\x91d\xac\x1fC\x88\x0e\x12" +
	"&\xd3}a3\x123\xd1*c\xc84P\xea\x80\xb1" +
	"m\x02\xa3\xd12#U\x00j2\xdd\xf7\xb0\x15\xcf\x9a" +
	"\x96?\xcf\x1f-a3\x93\x1b\xcbf\xc0\xd0T\x0d@" +
	"C\x00\xe6i\x020\xeaU4\x9a\x15\xc4$\x12P\x90" +
	"\x00V\xb0\xd95\x96\xca\x98\x96?\xca\x1f-\x81P\xc4" +
	"\x8a$2\x8e\x03\xa9v\x901\xa4\x83\xb4\xbbI\xc85" +
	"\x80r\xec\x19\xdb.Hx\x05F%\x0b\x91B\"\xe6" +
	"\xcfG\xe2Y\x81N\xc7\xb2\x197\x83-e\x06\xd4\xb4" +
	",\xdc\x00\x0an\x80\xca:\x8a2\x04\x8a\x89\x86\x10C" +
	"*1\xea\xd1%^\x80\xf2\xa2\x01p\x8ejU\xcd\xf4" +
	"\x97\x1a\xb5f%\xddyD\x131d\xe5I\x03D\x06" +
	"\x95\x8d\xe1\x942\xd9X*\x97\x0d\xc5\xd3\xb2lXA" +
	"\xec\xd62\xa0jE\x91\x955\xbe>\x9eiY\xff)" +
	"\x9e\xcc\xaf\xd8vWi\x14\xc7'be\xb9\x99\xbae" +
	"\xa1H\xedZ~\xae\xcb\x96p\xa0X0\xa3\xdeI\xa7" +
	"\x9d+\xafEE\xa3CA\xc4f>T\xcc\xc7\xbf\xb5" +
	"\xa9ht+\x88i\xf4\x80\x82\x1eXK\x97\xeaz\x8d" +
	")\xe9\xd3\x1dg[9\x0es\x02m)\x05\xbaG\xc1" +
	"\xc6d$aJ\xd5\xd0\x885\x8a\x1b\x01C*\x8aO" +
	"\x1b]A!P\xe4\xcc\x85\xdc,\x84,\xb74\xca\xed" +
	"\xc4f\xb8\x90')\xa2\xb3cP^J\xec9>\xa9" +
	"\x09\x8a\x8a\xb3fP\xde\x10,\xf2((\xec\x11\x8a\xaa" +
	"\xb3#Q\xaeDv\x7f\x18\x146HQs\xee\x0b\x94" +
	"W\x0f\xeb\xe5\xe7:\xa9W\xb4\xa1\x1f\x1b\xf9\x94\xf4\xa3" +
	"-\x95\x00j\xda,\xbe\xc6\x93\xa1x\x1a\xb0\xf4&\xda" +
	"Z4V\xcfZ\xc5\xc6\x90\xe5\\ga8-\xaa\x1d" +
	"6\xf7\xbc\xcb;\x04\xe5\x0f\x823\xef\"Je\x0e\xb4" +
	",>\x91\xb3\xa3=\xf7F\xa9\xb0\xcba\x84\xf5\xc4\x9e" +
	"\xe7bw\xee\xfe*\xb1W\x0a9lf\x1as\xffb" +
	"\xc1p\xb1\xef\xf2V\xef\x17\xe7\xefi\x9d\xfdR\xb1\xdb" +
	"8M\xd55CkL\xf5\x9aS\xe8\x9e\xb3\x90\xf7o" +
	"\xfb\xe5\x0c\xd2_\x01\x00\x00\xff\xff\x87\xb1\xce\xd6"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x808180da028ec18f,
		0x8135b09534858837,
		0x81b0b07b371f8b52,
		0x82a029056a5bf10a,
		0x8de1ac13324b2807,
		0xa054811b9dac9034,
		0xa4489f77fff767e0,
		0xb115ecb8561f676f,
		0xb647077be7d9c5d3,
		0xb706f28b7791424c,
		0xbcf68a5e761fb628,
		0xbdae1d3b8723c47b,
		0xbfa53a265f4fa1f4,
		0xc32fe58c2da49d81,
		0xc34c7e36b62d7264,
		0xd503d05399426c88,
		0xd780c48dc75ef416,
		0xe393b08d69af9bff,
		0xe456479b51266803,
		0xe660907e6226a974,
		0xea499ec43bd19f91,
		0xeb9cffb3fdd13c85,
		0xebd0b3816ff47540,
		0xf07df1c4ebb1c4a4,
		0xf555056393ae30d6)
}
