// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type UnixExecutor struct{ Client *capnp.Client }

// UnixExecutor_TypeID is the unique identifier for the type UnixExecutor.
const UnixExecutor_TypeID = 0x808180da028ec18f

func (c UnixExecutor) Command(ctx context.Context, params func(UnixExecutor_command_Params) error) (UnixExecutor_command_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x808180da028ec18f,
			MethodID:      0,
			InterfaceName: "proc.capnp:UnixExecutor",
			MethodName:    "command",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UnixExecutor_command_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return UnixExecutor_command_Results_Future{Future: ans.Future()}, release
}

func (c UnixExecutor) AddRef() UnixExecutor {
	return UnixExecutor{
		Client: c.Client.AddRef(),
	}
}

func (c UnixExecutor) Release() {
	c.Client.Release()
}

// A UnixExecutor_Server is a UnixExecutor with a local implementation.
type UnixExecutor_Server interface {
	Command(context.Context, UnixExecutor_command) error
}

// UnixExecutor_NewServer creates a new Server from an implementation of UnixExecutor_Server.
func UnixExecutor_NewServer(s UnixExecutor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UnixExecutor_Methods(nil, s), s, c, policy)
}

// UnixExecutor_ServerToClient creates a new Client from an implementation of UnixExecutor_Server.
// The caller is responsible for calling Release on the returned Client.
func UnixExecutor_ServerToClient(s UnixExecutor_Server, policy *server.Policy) UnixExecutor {
	return UnixExecutor{Client: capnp.NewClient(UnixExecutor_NewServer(s, policy))}
}

// UnixExecutor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UnixExecutor_Methods(methods []server.Method, s UnixExecutor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x808180da028ec18f,
			MethodID:      0,
			InterfaceName: "proc.capnp:UnixExecutor",
			MethodName:    "command",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Command(ctx, UnixExecutor_command{call})
		},
	})

	return methods
}

// UnixExecutor_command holds the state for a server call to UnixExecutor.command.
// See server.Call for documentation.
type UnixExecutor_command struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UnixExecutor_command) Args() UnixExecutor_command_Params {
	return UnixExecutor_command_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c UnixExecutor_command) AllocResults() (UnixExecutor_command_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{Struct: r}, err
}

type UnixExecutor_command_Params struct{ capnp.Struct }

// UnixExecutor_command_Params_TypeID is the unique identifier for the type UnixExecutor_command_Params.
const UnixExecutor_command_Params_TypeID = 0xc34c7e36b62d7264

func NewUnixExecutor_command_Params(s *capnp.Segment) (UnixExecutor_command_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixExecutor_command_Params{st}, err
}

func NewRootUnixExecutor_command_Params(s *capnp.Segment) (UnixExecutor_command_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixExecutor_command_Params{st}, err
}

func ReadRootUnixExecutor_command_Params(msg *capnp.Message) (UnixExecutor_command_Params, error) {
	root, err := msg.Root()
	return UnixExecutor_command_Params{root.Struct()}, err
}

func (s UnixExecutor_command_Params) String() string {
	str, _ := text.Marshal(0xc34c7e36b62d7264, s.Struct)
	return str
}

func (s UnixExecutor_command_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UnixExecutor_command_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s UnixExecutor_command_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UnixExecutor_command_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UnixExecutor_command_Params) Arg() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s UnixExecutor_command_Params) HasArg() bool {
	return s.Struct.HasPtr(1)
}

func (s UnixExecutor_command_Params) SetArg(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArg sets the arg field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s UnixExecutor_command_Params) NewArg(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// UnixExecutor_command_Params_List is a list of UnixExecutor_command_Params.
type UnixExecutor_command_Params_List = capnp.StructList[UnixExecutor_command_Params]

// NewUnixExecutor_command_Params creates a new list of UnixExecutor_command_Params.
func NewUnixExecutor_command_Params_List(s *capnp.Segment, sz int32) (UnixExecutor_command_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UnixExecutor_command_Params]{l}, err
}

// UnixExecutor_command_Params_Future is a wrapper for a UnixExecutor_command_Params promised by a client call.
type UnixExecutor_command_Params_Future struct{ *capnp.Future }

func (p UnixExecutor_command_Params_Future) Struct() (UnixExecutor_command_Params, error) {
	s, err := p.Future.Struct()
	return UnixExecutor_command_Params{s}, err
}

type UnixExecutor_command_Results struct{ capnp.Struct }

// UnixExecutor_command_Results_TypeID is the unique identifier for the type UnixExecutor_command_Results.
const UnixExecutor_command_Results_TypeID = 0xb647077be7d9c5d3

func NewUnixExecutor_command_Results(s *capnp.Segment) (UnixExecutor_command_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{st}, err
}

func NewRootUnixExecutor_command_Results(s *capnp.Segment) (UnixExecutor_command_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnixExecutor_command_Results{st}, err
}

func ReadRootUnixExecutor_command_Results(msg *capnp.Message) (UnixExecutor_command_Results, error) {
	root, err := msg.Root()
	return UnixExecutor_command_Results{root.Struct()}, err
}

func (s UnixExecutor_command_Results) String() string {
	str, _ := text.Marshal(0xb647077be7d9c5d3, s.Struct)
	return str
}

func (s UnixExecutor_command_Results) Cmd() Cmd {
	p, _ := s.Struct.Ptr(0)
	return Cmd{Client: p.Interface().Client()}
}

func (s UnixExecutor_command_Results) HasCmd() bool {
	return s.Struct.HasPtr(0)
}

func (s UnixExecutor_command_Results) SetCmd(v Cmd) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// UnixExecutor_command_Results_List is a list of UnixExecutor_command_Results.
type UnixExecutor_command_Results_List = capnp.StructList[UnixExecutor_command_Results]

// NewUnixExecutor_command_Results creates a new list of UnixExecutor_command_Results.
func NewUnixExecutor_command_Results_List(s *capnp.Segment, sz int32) (UnixExecutor_command_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UnixExecutor_command_Results]{l}, err
}

// UnixExecutor_command_Results_Future is a wrapper for a UnixExecutor_command_Results promised by a client call.
type UnixExecutor_command_Results_Future struct{ *capnp.Future }

func (p UnixExecutor_command_Results_Future) Struct() (UnixExecutor_command_Results, error) {
	s, err := p.Future.Struct()
	return UnixExecutor_command_Results{s}, err
}

func (p UnixExecutor_command_Results_Future) Cmd() Cmd {
	return Cmd{Client: p.Future.Field(0, nil).Client()}
}

type Cmd struct{ Client *capnp.Client }

// Cmd_TypeID is the unique identifier for the type Cmd.
const Cmd_TypeID = 0xd503d05399426c88

func (c Cmd) Start(ctx context.Context, params func(Cmd_start_Params) error) (Cmd_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      0,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_start_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_start_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) Wait(ctx context.Context, params func(Cmd_wait_Params) error) (Cmd_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      1,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_wait_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StderrPipe(ctx context.Context, params func(Cmd_stderrPipe_Params) error) (Cmd_stderrPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      2,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stderrPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stderrPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stderrPipe_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StdinPipe(ctx context.Context, params func(Cmd_stdinPipe_Params) error) (Cmd_stdinPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      3,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdinPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stdinPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stdinPipe_Results_Future{Future: ans.Future()}, release
}
func (c Cmd) StdoutPipe(ctx context.Context, params func(Cmd_stdoutPipe_Params) error) (Cmd_stdoutPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      4,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdoutPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cmd_stdoutPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cmd_stdoutPipe_Results_Future{Future: ans.Future()}, release
}

func (c Cmd) AddRef() Cmd {
	return Cmd{
		Client: c.Client.AddRef(),
	}
}

func (c Cmd) Release() {
	c.Client.Release()
}

// A Cmd_Server is a Cmd with a local implementation.
type Cmd_Server interface {
	Start(context.Context, Cmd_start) error

	Wait(context.Context, Cmd_wait) error

	StderrPipe(context.Context, Cmd_stderrPipe) error

	StdinPipe(context.Context, Cmd_stdinPipe) error

	StdoutPipe(context.Context, Cmd_stdoutPipe) error
}

// Cmd_NewServer creates a new Server from an implementation of Cmd_Server.
func Cmd_NewServer(s Cmd_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cmd_Methods(nil, s), s, c, policy)
}

// Cmd_ServerToClient creates a new Client from an implementation of Cmd_Server.
// The caller is responsible for calling Release on the returned Client.
func Cmd_ServerToClient(s Cmd_Server, policy *server.Policy) Cmd {
	return Cmd{Client: capnp.NewClient(Cmd_NewServer(s, policy))}
}

// Cmd_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cmd_Methods(methods []server.Method, s Cmd_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      0,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Cmd_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      1,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Cmd_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      2,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stderrPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StderrPipe(ctx, Cmd_stderrPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      3,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdinPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdinPipe(ctx, Cmd_stdinPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd503d05399426c88,
			MethodID:      4,
			InterfaceName: "proc.capnp:Cmd",
			MethodName:    "stdoutPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdoutPipe(ctx, Cmd_stdoutPipe{call})
		},
	})

	return methods
}

// Cmd_start holds the state for a server call to Cmd.start.
// See server.Call for documentation.
type Cmd_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_start) Args() Cmd_start_Params {
	return Cmd_start_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_start) AllocResults() (Cmd_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Results{Struct: r}, err
}

// Cmd_wait holds the state for a server call to Cmd.wait.
// See server.Call for documentation.
type Cmd_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_wait) Args() Cmd_wait_Params {
	return Cmd_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_wait) AllocResults() (Cmd_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Results{Struct: r}, err
}

// Cmd_stderrPipe holds the state for a server call to Cmd.stderrPipe.
// See server.Call for documentation.
type Cmd_stderrPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stderrPipe) Args() Cmd_stderrPipe_Params {
	return Cmd_stderrPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stderrPipe) AllocResults() (Cmd_stderrPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{Struct: r}, err
}

// Cmd_stdinPipe holds the state for a server call to Cmd.stdinPipe.
// See server.Call for documentation.
type Cmd_stdinPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stdinPipe) Args() Cmd_stdinPipe_Params {
	return Cmd_stdinPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stdinPipe) AllocResults() (Cmd_stdinPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{Struct: r}, err
}

// Cmd_stdoutPipe holds the state for a server call to Cmd.stdoutPipe.
// See server.Call for documentation.
type Cmd_stdoutPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cmd_stdoutPipe) Args() Cmd_stdoutPipe_Params {
	return Cmd_stdoutPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cmd_stdoutPipe) AllocResults() (Cmd_stdoutPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{Struct: r}, err
}

type Cmd_start_Params struct{ capnp.Struct }

// Cmd_start_Params_TypeID is the unique identifier for the type Cmd_start_Params.
const Cmd_start_Params_TypeID = 0xbfa53a265f4fa1f4

func NewCmd_start_Params(s *capnp.Segment) (Cmd_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Params{st}, err
}

func NewRootCmd_start_Params(s *capnp.Segment) (Cmd_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Params{st}, err
}

func ReadRootCmd_start_Params(msg *capnp.Message) (Cmd_start_Params, error) {
	root, err := msg.Root()
	return Cmd_start_Params{root.Struct()}, err
}

func (s Cmd_start_Params) String() string {
	str, _ := text.Marshal(0xbfa53a265f4fa1f4, s.Struct)
	return str
}

// Cmd_start_Params_List is a list of Cmd_start_Params.
type Cmd_start_Params_List = capnp.StructList[Cmd_start_Params]

// NewCmd_start_Params creates a new list of Cmd_start_Params.
func NewCmd_start_Params_List(s *capnp.Segment, sz int32) (Cmd_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_start_Params]{l}, err
}

// Cmd_start_Params_Future is a wrapper for a Cmd_start_Params promised by a client call.
type Cmd_start_Params_Future struct{ *capnp.Future }

func (p Cmd_start_Params_Future) Struct() (Cmd_start_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_start_Params{s}, err
}

type Cmd_start_Results struct{ capnp.Struct }

// Cmd_start_Results_TypeID is the unique identifier for the type Cmd_start_Results.
const Cmd_start_Results_TypeID = 0xea499ec43bd19f91

func NewCmd_start_Results(s *capnp.Segment) (Cmd_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Results{st}, err
}

func NewRootCmd_start_Results(s *capnp.Segment) (Cmd_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_start_Results{st}, err
}

func ReadRootCmd_start_Results(msg *capnp.Message) (Cmd_start_Results, error) {
	root, err := msg.Root()
	return Cmd_start_Results{root.Struct()}, err
}

func (s Cmd_start_Results) String() string {
	str, _ := text.Marshal(0xea499ec43bd19f91, s.Struct)
	return str
}

// Cmd_start_Results_List is a list of Cmd_start_Results.
type Cmd_start_Results_List = capnp.StructList[Cmd_start_Results]

// NewCmd_start_Results creates a new list of Cmd_start_Results.
func NewCmd_start_Results_List(s *capnp.Segment, sz int32) (Cmd_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_start_Results]{l}, err
}

// Cmd_start_Results_Future is a wrapper for a Cmd_start_Results promised by a client call.
type Cmd_start_Results_Future struct{ *capnp.Future }

func (p Cmd_start_Results_Future) Struct() (Cmd_start_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_start_Results{s}, err
}

type Cmd_wait_Params struct{ capnp.Struct }

// Cmd_wait_Params_TypeID is the unique identifier for the type Cmd_wait_Params.
const Cmd_wait_Params_TypeID = 0xebd0b3816ff47540

func NewCmd_wait_Params(s *capnp.Segment) (Cmd_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Params{st}, err
}

func NewRootCmd_wait_Params(s *capnp.Segment) (Cmd_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Params{st}, err
}

func ReadRootCmd_wait_Params(msg *capnp.Message) (Cmd_wait_Params, error) {
	root, err := msg.Root()
	return Cmd_wait_Params{root.Struct()}, err
}

func (s Cmd_wait_Params) String() string {
	str, _ := text.Marshal(0xebd0b3816ff47540, s.Struct)
	return str
}

// Cmd_wait_Params_List is a list of Cmd_wait_Params.
type Cmd_wait_Params_List = capnp.StructList[Cmd_wait_Params]

// NewCmd_wait_Params creates a new list of Cmd_wait_Params.
func NewCmd_wait_Params_List(s *capnp.Segment, sz int32) (Cmd_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_wait_Params]{l}, err
}

// Cmd_wait_Params_Future is a wrapper for a Cmd_wait_Params promised by a client call.
type Cmd_wait_Params_Future struct{ *capnp.Future }

func (p Cmd_wait_Params_Future) Struct() (Cmd_wait_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_wait_Params{s}, err
}

type Cmd_wait_Results struct{ capnp.Struct }

// Cmd_wait_Results_TypeID is the unique identifier for the type Cmd_wait_Results.
const Cmd_wait_Results_TypeID = 0xa4489f77fff767e0

func NewCmd_wait_Results(s *capnp.Segment) (Cmd_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Results{st}, err
}

func NewRootCmd_wait_Results(s *capnp.Segment) (Cmd_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_wait_Results{st}, err
}

func ReadRootCmd_wait_Results(msg *capnp.Message) (Cmd_wait_Results, error) {
	root, err := msg.Root()
	return Cmd_wait_Results{root.Struct()}, err
}

func (s Cmd_wait_Results) String() string {
	str, _ := text.Marshal(0xa4489f77fff767e0, s.Struct)
	return str
}

// Cmd_wait_Results_List is a list of Cmd_wait_Results.
type Cmd_wait_Results_List = capnp.StructList[Cmd_wait_Results]

// NewCmd_wait_Results creates a new list of Cmd_wait_Results.
func NewCmd_wait_Results_List(s *capnp.Segment, sz int32) (Cmd_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_wait_Results]{l}, err
}

// Cmd_wait_Results_Future is a wrapper for a Cmd_wait_Results promised by a client call.
type Cmd_wait_Results_Future struct{ *capnp.Future }

func (p Cmd_wait_Results_Future) Struct() (Cmd_wait_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_wait_Results{s}, err
}

type Cmd_stderrPipe_Params struct{ capnp.Struct }

// Cmd_stderrPipe_Params_TypeID is the unique identifier for the type Cmd_stderrPipe_Params.
const Cmd_stderrPipe_Params_TypeID = 0xf07df1c4ebb1c4a4

func NewCmd_stderrPipe_Params(s *capnp.Segment) (Cmd_stderrPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stderrPipe_Params{st}, err
}

func NewRootCmd_stderrPipe_Params(s *capnp.Segment) (Cmd_stderrPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stderrPipe_Params{st}, err
}

func ReadRootCmd_stderrPipe_Params(msg *capnp.Message) (Cmd_stderrPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stderrPipe_Params{root.Struct()}, err
}

func (s Cmd_stderrPipe_Params) String() string {
	str, _ := text.Marshal(0xf07df1c4ebb1c4a4, s.Struct)
	return str
}

// Cmd_stderrPipe_Params_List is a list of Cmd_stderrPipe_Params.
type Cmd_stderrPipe_Params_List = capnp.StructList[Cmd_stderrPipe_Params]

// NewCmd_stderrPipe_Params creates a new list of Cmd_stderrPipe_Params.
func NewCmd_stderrPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stderrPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stderrPipe_Params]{l}, err
}

// Cmd_stderrPipe_Params_Future is a wrapper for a Cmd_stderrPipe_Params promised by a client call.
type Cmd_stderrPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stderrPipe_Params_Future) Struct() (Cmd_stderrPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stderrPipe_Params{s}, err
}

type Cmd_stderrPipe_Results struct{ capnp.Struct }

// Cmd_stderrPipe_Results_TypeID is the unique identifier for the type Cmd_stderrPipe_Results.
const Cmd_stderrPipe_Results_TypeID = 0xbcf68a5e761fb628

func NewCmd_stderrPipe_Results(s *capnp.Segment) (Cmd_stderrPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{st}, err
}

func NewRootCmd_stderrPipe_Results(s *capnp.Segment) (Cmd_stderrPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stderrPipe_Results{st}, err
}

func ReadRootCmd_stderrPipe_Results(msg *capnp.Message) (Cmd_stderrPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stderrPipe_Results{root.Struct()}, err
}

func (s Cmd_stderrPipe_Results) String() string {
	str, _ := text.Marshal(0xbcf68a5e761fb628, s.Struct)
	return str
}

func (s Cmd_stderrPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Cmd_stderrPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stderrPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stderrPipe_Results_List is a list of Cmd_stderrPipe_Results.
type Cmd_stderrPipe_Results_List = capnp.StructList[Cmd_stderrPipe_Results]

// NewCmd_stderrPipe_Results creates a new list of Cmd_stderrPipe_Results.
func NewCmd_stderrPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stderrPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stderrPipe_Results]{l}, err
}

// Cmd_stderrPipe_Results_Future is a wrapper for a Cmd_stderrPipe_Results promised by a client call.
type Cmd_stderrPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stderrPipe_Results_Future) Struct() (Cmd_stderrPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stderrPipe_Results{s}, err
}

func (p Cmd_stderrPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type Cmd_stdinPipe_Params struct{ capnp.Struct }

// Cmd_stdinPipe_Params_TypeID is the unique identifier for the type Cmd_stdinPipe_Params.
const Cmd_stdinPipe_Params_TypeID = 0xe456479b51266803

func NewCmd_stdinPipe_Params(s *capnp.Segment) (Cmd_stdinPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdinPipe_Params{st}, err
}

func NewRootCmd_stdinPipe_Params(s *capnp.Segment) (Cmd_stdinPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdinPipe_Params{st}, err
}

func ReadRootCmd_stdinPipe_Params(msg *capnp.Message) (Cmd_stdinPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stdinPipe_Params{root.Struct()}, err
}

func (s Cmd_stdinPipe_Params) String() string {
	str, _ := text.Marshal(0xe456479b51266803, s.Struct)
	return str
}

// Cmd_stdinPipe_Params_List is a list of Cmd_stdinPipe_Params.
type Cmd_stdinPipe_Params_List = capnp.StructList[Cmd_stdinPipe_Params]

// NewCmd_stdinPipe_Params creates a new list of Cmd_stdinPipe_Params.
func NewCmd_stdinPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stdinPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stdinPipe_Params]{l}, err
}

// Cmd_stdinPipe_Params_Future is a wrapper for a Cmd_stdinPipe_Params promised by a client call.
type Cmd_stdinPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stdinPipe_Params_Future) Struct() (Cmd_stdinPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stdinPipe_Params{s}, err
}

type Cmd_stdinPipe_Results struct{ capnp.Struct }

// Cmd_stdinPipe_Results_TypeID is the unique identifier for the type Cmd_stdinPipe_Results.
const Cmd_stdinPipe_Results_TypeID = 0xe660907e6226a974

func NewCmd_stdinPipe_Results(s *capnp.Segment) (Cmd_stdinPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{st}, err
}

func NewRootCmd_stdinPipe_Results(s *capnp.Segment) (Cmd_stdinPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdinPipe_Results{st}, err
}

func ReadRootCmd_stdinPipe_Results(msg *capnp.Message) (Cmd_stdinPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stdinPipe_Results{root.Struct()}, err
}

func (s Cmd_stdinPipe_Results) String() string {
	str, _ := text.Marshal(0xe660907e6226a974, s.Struct)
	return str
}

func (s Cmd_stdinPipe_Results) Wc() WriteCloser {
	p, _ := s.Struct.Ptr(0)
	return WriteCloser{Client: p.Interface().Client()}
}

func (s Cmd_stdinPipe_Results) HasWc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stdinPipe_Results) SetWc(v WriteCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stdinPipe_Results_List is a list of Cmd_stdinPipe_Results.
type Cmd_stdinPipe_Results_List = capnp.StructList[Cmd_stdinPipe_Results]

// NewCmd_stdinPipe_Results creates a new list of Cmd_stdinPipe_Results.
func NewCmd_stdinPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stdinPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stdinPipe_Results]{l}, err
}

// Cmd_stdinPipe_Results_Future is a wrapper for a Cmd_stdinPipe_Results promised by a client call.
type Cmd_stdinPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stdinPipe_Results_Future) Struct() (Cmd_stdinPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stdinPipe_Results{s}, err
}

func (p Cmd_stdinPipe_Results_Future) Wc() WriteCloser {
	return WriteCloser{Client: p.Future.Field(0, nil).Client()}
}

type Cmd_stdoutPipe_Params struct{ capnp.Struct }

// Cmd_stdoutPipe_Params_TypeID is the unique identifier for the type Cmd_stdoutPipe_Params.
const Cmd_stdoutPipe_Params_TypeID = 0xbdae1d3b8723c47b

func NewCmd_stdoutPipe_Params(s *capnp.Segment) (Cmd_stdoutPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdoutPipe_Params{st}, err
}

func NewRootCmd_stdoutPipe_Params(s *capnp.Segment) (Cmd_stdoutPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cmd_stdoutPipe_Params{st}, err
}

func ReadRootCmd_stdoutPipe_Params(msg *capnp.Message) (Cmd_stdoutPipe_Params, error) {
	root, err := msg.Root()
	return Cmd_stdoutPipe_Params{root.Struct()}, err
}

func (s Cmd_stdoutPipe_Params) String() string {
	str, _ := text.Marshal(0xbdae1d3b8723c47b, s.Struct)
	return str
}

// Cmd_stdoutPipe_Params_List is a list of Cmd_stdoutPipe_Params.
type Cmd_stdoutPipe_Params_List = capnp.StructList[Cmd_stdoutPipe_Params]

// NewCmd_stdoutPipe_Params creates a new list of Cmd_stdoutPipe_Params.
func NewCmd_stdoutPipe_Params_List(s *capnp.Segment, sz int32) (Cmd_stdoutPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cmd_stdoutPipe_Params]{l}, err
}

// Cmd_stdoutPipe_Params_Future is a wrapper for a Cmd_stdoutPipe_Params promised by a client call.
type Cmd_stdoutPipe_Params_Future struct{ *capnp.Future }

func (p Cmd_stdoutPipe_Params_Future) Struct() (Cmd_stdoutPipe_Params, error) {
	s, err := p.Future.Struct()
	return Cmd_stdoutPipe_Params{s}, err
}

type Cmd_stdoutPipe_Results struct{ capnp.Struct }

// Cmd_stdoutPipe_Results_TypeID is the unique identifier for the type Cmd_stdoutPipe_Results.
const Cmd_stdoutPipe_Results_TypeID = 0xb706f28b7791424c

func NewCmd_stdoutPipe_Results(s *capnp.Segment) (Cmd_stdoutPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{st}, err
}

func NewRootCmd_stdoutPipe_Results(s *capnp.Segment) (Cmd_stdoutPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cmd_stdoutPipe_Results{st}, err
}

func ReadRootCmd_stdoutPipe_Results(msg *capnp.Message) (Cmd_stdoutPipe_Results, error) {
	root, err := msg.Root()
	return Cmd_stdoutPipe_Results{root.Struct()}, err
}

func (s Cmd_stdoutPipe_Results) String() string {
	str, _ := text.Marshal(0xb706f28b7791424c, s.Struct)
	return str
}

func (s Cmd_stdoutPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Cmd_stdoutPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Cmd_stdoutPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cmd_stdoutPipe_Results_List is a list of Cmd_stdoutPipe_Results.
type Cmd_stdoutPipe_Results_List = capnp.StructList[Cmd_stdoutPipe_Results]

// NewCmd_stdoutPipe_Results creates a new list of Cmd_stdoutPipe_Results.
func NewCmd_stdoutPipe_Results_List(s *capnp.Segment, sz int32) (Cmd_stdoutPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cmd_stdoutPipe_Results]{l}, err
}

// Cmd_stdoutPipe_Results_Future is a wrapper for a Cmd_stdoutPipe_Results promised by a client call.
type Cmd_stdoutPipe_Results_Future struct{ *capnp.Future }

func (p Cmd_stdoutPipe_Results_Future) Struct() (Cmd_stdoutPipe_Results, error) {
	s, err := p.Future.Struct()
	return Cmd_stdoutPipe_Results{s}, err
}

func (p Cmd_stdoutPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type ReadCloser struct{ Client *capnp.Client }

// ReadCloser_TypeID is the unique identifier for the type ReadCloser.
const ReadCloser_TypeID = 0xeb9cffb3fdd13c85

func (c ReadCloser) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c ReadCloser) AddRef() ReadCloser {
	return ReadCloser{
		Client: c.Client.AddRef(),
	}
}

func (c ReadCloser) Release() {
	c.Client.Release()
}

// A ReadCloser_Server is a ReadCloser with a local implementation.
type ReadCloser_Server interface {
	Read(context.Context, Reader_read) error

	Close(context.Context, Closer_close) error
}

// ReadCloser_NewServer creates a new Server from an implementation of ReadCloser_Server.
func ReadCloser_NewServer(s ReadCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadCloser_Methods(nil, s), s, c, policy)
}

// ReadCloser_ServerToClient creates a new Client from an implementation of ReadCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadCloser_ServerToClient(s ReadCloser_Server, policy *server.Policy) ReadCloser {
	return ReadCloser{Client: capnp.NewClient(ReadCloser_NewServer(s, policy))}
}

// ReadCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadCloser_Methods(methods []server.Method, s ReadCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type WriteCloser struct{ Client *capnp.Client }

// WriteCloser_TypeID is the unique identifier for the type WriteCloser.
const WriteCloser_TypeID = 0xb115ecb8561f676f

func (c WriteCloser) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c WriteCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c WriteCloser) AddRef() WriteCloser {
	return WriteCloser{
		Client: c.Client.AddRef(),
	}
}

func (c WriteCloser) Release() {
	c.Client.Release()
}

// A WriteCloser_Server is a WriteCloser with a local implementation.
type WriteCloser_Server interface {
	Write(context.Context, Writer_write) error

	Close(context.Context, Closer_close) error
}

// WriteCloser_NewServer creates a new Server from an implementation of WriteCloser_Server.
func WriteCloser_NewServer(s WriteCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WriteCloser_Methods(nil, s), s, c, policy)
}

// WriteCloser_ServerToClient creates a new Client from an implementation of WriteCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func WriteCloser_ServerToClient(s WriteCloser_Server, policy *server.Policy) WriteCloser {
	return WriteCloser{Client: capnp.NewClient(WriteCloser_NewServer(s, policy))}
}

// WriteCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WriteCloser_Methods(methods []server.Method, s WriteCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type Reader struct{ Client *capnp.Client }

// Reader_TypeID is the unique identifier for the type Reader.
const Reader_TypeID = 0x8135b09534858837

func (c Reader) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}

func (c Reader) AddRef() Reader {
	return Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Reader) Release() {
	c.Client.Release()
}

// A Reader_Server is a Reader with a local implementation.
type Reader_Server interface {
	Read(context.Context, Reader_read) error
}

// Reader_NewServer creates a new Server from an implementation of Reader_Server.
func Reader_NewServer(s Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Reader_Methods(nil, s), s, c, policy)
}

// Reader_ServerToClient creates a new Client from an implementation of Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Reader_ServerToClient(s Reader_Server, policy *server.Policy) Reader {
	return Reader{Client: capnp.NewClient(Reader_NewServer(s, policy))}
}

// Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Reader_Methods(methods []server.Method, s Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	return methods
}

// Reader_read holds the state for a server call to Reader.read.
// See server.Call for documentation.
type Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Reader_read) Args() Reader_read_Params {
	return Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Reader_read) AllocResults() (Reader_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{Struct: r}, err
}

type Reader_read_Params struct{ capnp.Struct }

// Reader_read_Params_TypeID is the unique identifier for the type Reader_read_Params.
const Reader_read_Params_TypeID = 0xf555056393ae30d6

func NewReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func NewRootReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func ReadRootReader_read_Params(msg *capnp.Message) (Reader_read_Params, error) {
	root, err := msg.Root()
	return Reader_read_Params{root.Struct()}, err
}

func (s Reader_read_Params) String() string {
	str, _ := text.Marshal(0xf555056393ae30d6, s.Struct)
	return str
}

func (s Reader_read_Params) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Params) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Params_List is a list of Reader_read_Params.
type Reader_read_Params_List = capnp.StructList[Reader_read_Params]

// NewReader_read_Params creates a new list of Reader_read_Params.
func NewReader_read_Params_List(s *capnp.Segment, sz int32) (Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Reader_read_Params]{l}, err
}

// Reader_read_Params_Future is a wrapper for a Reader_read_Params promised by a client call.
type Reader_read_Params_Future struct{ *capnp.Future }

func (p Reader_read_Params_Future) Struct() (Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Reader_read_Params{s}, err
}

type Reader_read_Results struct{ capnp.Struct }

// Reader_read_Results_TypeID is the unique identifier for the type Reader_read_Results.
const Reader_read_Results_TypeID = 0xc32fe58c2da49d81

func NewReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func NewRootReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func ReadRootReader_read_Results(msg *capnp.Message) (Reader_read_Results, error) {
	root, err := msg.Root()
	return Reader_read_Results{root.Struct()}, err
}

func (s Reader_read_Results) String() string {
	str, _ := text.Marshal(0xc32fe58c2da49d81, s.Struct)
	return str
}

func (s Reader_read_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Reader_read_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Reader_read_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Reader_read_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Results_List is a list of Reader_read_Results.
type Reader_read_Results_List = capnp.StructList[Reader_read_Results]

// NewReader_read_Results creates a new list of Reader_read_Results.
func NewReader_read_Results_List(s *capnp.Segment, sz int32) (Reader_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Reader_read_Results]{l}, err
}

// Reader_read_Results_Future is a wrapper for a Reader_read_Results promised by a client call.
type Reader_read_Results_Future struct{ *capnp.Future }

func (p Reader_read_Results_Future) Struct() (Reader_read_Results, error) {
	s, err := p.Future.Struct()
	return Reader_read_Results{s}, err
}

type Writer struct{ Client *capnp.Client }

// Writer_TypeID is the unique identifier for the type Writer.
const Writer_TypeID = 0xe393b08d69af9bff

func (c Writer) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}

func (c Writer) AddRef() Writer {
	return Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Writer) Release() {
	c.Client.Release()
}

// A Writer_Server is a Writer with a local implementation.
type Writer_Server interface {
	Write(context.Context, Writer_write) error
}

// Writer_NewServer creates a new Server from an implementation of Writer_Server.
func Writer_NewServer(s Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Writer_Methods(nil, s), s, c, policy)
}

// Writer_ServerToClient creates a new Client from an implementation of Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Writer_ServerToClient(s Writer_Server, policy *server.Policy) Writer {
	return Writer{Client: capnp.NewClient(Writer_NewServer(s, policy))}
}

// Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Writer_Methods(methods []server.Method, s Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	return methods
}

// Writer_write holds the state for a server call to Writer.write.
// See server.Call for documentation.
type Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Writer_write) Args() Writer_write_Params {
	return Writer_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Writer_write) AllocResults() (Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{Struct: r}, err
}

type Writer_write_Params struct{ capnp.Struct }

// Writer_write_Params_TypeID is the unique identifier for the type Writer_write_Params.
const Writer_write_Params_TypeID = 0xd780c48dc75ef416

func NewWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func NewRootWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func ReadRootWriter_write_Params(msg *capnp.Message) (Writer_write_Params, error) {
	root, err := msg.Root()
	return Writer_write_Params{root.Struct()}, err
}

func (s Writer_write_Params) String() string {
	str, _ := text.Marshal(0xd780c48dc75ef416, s.Struct)
	return str
}

func (s Writer_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Writer_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Writer_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Writer_write_Params_List is a list of Writer_write_Params.
type Writer_write_Params_List = capnp.StructList[Writer_write_Params]

// NewWriter_write_Params creates a new list of Writer_write_Params.
func NewWriter_write_Params_List(s *capnp.Segment, sz int32) (Writer_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Writer_write_Params]{l}, err
}

// Writer_write_Params_Future is a wrapper for a Writer_write_Params promised by a client call.
type Writer_write_Params_Future struct{ *capnp.Future }

func (p Writer_write_Params_Future) Struct() (Writer_write_Params, error) {
	s, err := p.Future.Struct()
	return Writer_write_Params{s}, err
}

type Writer_write_Results struct{ capnp.Struct }

// Writer_write_Results_TypeID is the unique identifier for the type Writer_write_Results.
const Writer_write_Results_TypeID = 0x81b0b07b371f8b52

func NewWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func NewRootWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func ReadRootWriter_write_Results(msg *capnp.Message) (Writer_write_Results, error) {
	root, err := msg.Root()
	return Writer_write_Results{root.Struct()}, err
}

func (s Writer_write_Results) String() string {
	str, _ := text.Marshal(0x81b0b07b371f8b52, s.Struct)
	return str
}

func (s Writer_write_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Writer_write_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Writer_write_Results_List is a list of Writer_write_Results.
type Writer_write_Results_List = capnp.StructList[Writer_write_Results]

// NewWriter_write_Results creates a new list of Writer_write_Results.
func NewWriter_write_Results_List(s *capnp.Segment, sz int32) (Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Writer_write_Results]{l}, err
}

// Writer_write_Results_Future is a wrapper for a Writer_write_Results promised by a client call.
type Writer_write_Results_Future struct{ *capnp.Future }

func (p Writer_write_Results_Future) Struct() (Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Writer_write_Results{s}, err
}

type Closer struct{ Client *capnp.Client }

// Closer_TypeID is the unique identifier for the type Closer.
const Closer_TypeID = 0xa054811b9dac9034

func (c Closer) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c Closer) AddRef() Closer {
	return Closer{
		Client: c.Client.AddRef(),
	}
}

func (c Closer) Release() {
	c.Client.Release()
}

// A Closer_Server is a Closer with a local implementation.
type Closer_Server interface {
	Close(context.Context, Closer_close) error
}

// Closer_NewServer creates a new Server from an implementation of Closer_Server.
func Closer_NewServer(s Closer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Closer_Methods(nil, s), s, c, policy)
}

// Closer_ServerToClient creates a new Client from an implementation of Closer_Server.
// The caller is responsible for calling Release on the returned Client.
func Closer_ServerToClient(s Closer_Server, policy *server.Policy) Closer {
	return Closer{Client: capnp.NewClient(Closer_NewServer(s, policy))}
}

// Closer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Closer_Methods(methods []server.Method, s Closer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

// Closer_close holds the state for a server call to Closer.close.
// See server.Call for documentation.
type Closer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Closer_close) Args() Closer_close_Params {
	return Closer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Closer_close) AllocResults() (Closer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{Struct: r}, err
}

type Closer_close_Params struct{ capnp.Struct }

// Closer_close_Params_TypeID is the unique identifier for the type Closer_close_Params.
const Closer_close_Params_TypeID = 0x82a029056a5bf10a

func NewCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func NewRootCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func ReadRootCloser_close_Params(msg *capnp.Message) (Closer_close_Params, error) {
	root, err := msg.Root()
	return Closer_close_Params{root.Struct()}, err
}

func (s Closer_close_Params) String() string {
	str, _ := text.Marshal(0x82a029056a5bf10a, s.Struct)
	return str
}

// Closer_close_Params_List is a list of Closer_close_Params.
type Closer_close_Params_List = capnp.StructList[Closer_close_Params]

// NewCloser_close_Params creates a new list of Closer_close_Params.
func NewCloser_close_Params_List(s *capnp.Segment, sz int32) (Closer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Params]{l}, err
}

// Closer_close_Params_Future is a wrapper for a Closer_close_Params promised by a client call.
type Closer_close_Params_Future struct{ *capnp.Future }

func (p Closer_close_Params_Future) Struct() (Closer_close_Params, error) {
	s, err := p.Future.Struct()
	return Closer_close_Params{s}, err
}

type Closer_close_Results struct{ capnp.Struct }

// Closer_close_Results_TypeID is the unique identifier for the type Closer_close_Results.
const Closer_close_Results_TypeID = 0x8de1ac13324b2807

func NewCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func NewRootCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func ReadRootCloser_close_Results(msg *capnp.Message) (Closer_close_Results, error) {
	root, err := msg.Root()
	return Closer_close_Results{root.Struct()}, err
}

func (s Closer_close_Results) String() string {
	str, _ := text.Marshal(0x8de1ac13324b2807, s.Struct)
	return str
}

// Closer_close_Results_List is a list of Closer_close_Results.
type Closer_close_Results_List = capnp.StructList[Closer_close_Results]

// NewCloser_close_Results creates a new list of Closer_close_Results.
func NewCloser_close_Results_List(s *capnp.Segment, sz int32) (Closer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Results]{l}, err
}

// Closer_close_Results_Future is a wrapper for a Closer_close_Results promised by a client call.
type Closer_close_Results_Future struct{ *capnp.Future }

func (p Closer_close_Results_Future) Struct() (Closer_close_Results, error) {
	s, err := p.Future.Struct()
	return Closer_close_Results{s}, err
}

const schema_d78885a0de56b292 = "x\xda\xacV[h\x1cU\x18\xfe\xff\x9993m\xed" +
	"v9\x99FD)\x0b5\xc64\x905iR\x8b\xa9" +
	"\xb2!5\xacb\x8b;\xab\x8d\xa8P\x1dw\x87\xb8\x92" +
	"\xbd0\xbbq\xab\xc1\x9a\x15\x82\xc1\x1amR|(\xb5" +
	"6B|\x10JMZ\x8c\"\x8a\xd4\xa6\x88o-^" +
	"J\x0b\x8a\xb7(m\x0c\x98\x92(\x11\xca\xc89\xbbg" +
	"vv7\x01\x1f|\x9aL\xce?\xdf\x7f\xfb\xbe\xefl" +
	"\xeb7R\x97\xd2\xe6s\xd6\x83d\xe4\x88\xea\xbcy\xf6" +
	"\x0d\xe9\xcaPa\x08\xe8M\xb23~\xba\xf7\x87\x89\xe1" +
	"\x91K\x00\xa8\xcf)_\xe8\x0b\x8a\x06\xa0_U\xc2:" +
	"%\x1a\x80\xb3sd\xb8\xe3\xad\xa9\x1d\x85\x9a\xe0\x15e" +
	"\\G\x16\xa2\xdfP\xc2\xfa\x1d<8z(\xb0sp" +
	"j\xaa\x00F\x1d\"\x00\x83j\xf7\x11\x09\x01uJB" +
	"\x80\xce\x86\xc5'\x9f#\xdb&^\x01ZW:\xd7\xdb" +
	"\xc8?\xa08Z\xd3C\xdb\xf5\x93?\x8d\x96\x0f\xda\xeb" +
	"\xd9\x87\x8a\xd3q\xf8\xe4\xf1\xdb\x0a\x8fN\xfc\xa7\x02~" +
	"\xec\xfb\xdb\xc9\x9fx`\x12\xa8_\xe0\xfb\xc8\xcf\xa08" +
	"\xe9\xbe@\xef\xc7\x7f\xd4O\xd7\xa0,*\x9f\xe8+<" +
	"pY\xd1\xf4e\xe5N\x00\xe7\xeb\xf3\x97\x7f\x1f\xd4\xc2" +
	"3@oA\x00\x82\xac\x9a\x05\xa5\x9b\xb5\xb1\xac\xb06" +
	"\xf6t\x8f\xe5\x0f]W?*\xa6)\x06\xd4\x93:\x16" +
	"\xb0\x85\xf7\xd94\x13x~\xffk\x7f}\xea\x0d\xb8\xaf" +
	"\x18\xd0\xc3\x03\x06go\x7fu\xd7\x96S\x9f\x95\x0bm" +
	"\xb7\xc8\x06\xd6\xef\xd2\xbb\x0f?\xd5\xd8\xf9\xde\xe7\x9e\x16" +
	"\xf6\xf2\x16\x0a\xc7'[^\x9f\xbb\xeb\\i\xb8\x1c\x94" +
	"O\x0f\xf5\x1d$\x0f\xe8\xc4\xed\x96\x99\xbb\x0f\xee9W" +
	"*[b\xa0c\xa4\x93%=\xca\x03F\xfa\xbb\x8f>" +
	"rA\xfe\xb6f\x08D}Q_\xaf\xb2x\xa2\x86Q" +
	"\xbf\xcc\xfetn^\xda\xff\xe5\xe8\xec\xd0\xa5\xe2J\x8a" +
	"\xe9\xce\xaa,\xddy\x95\xb5\xe0\x1c\xfb 1:u\xe4" +
	"\x97Z\x1a\xa9\xe3\xfa\x82\xcai\xa4\x86u\xaa10\xf9" +
	"\xd9F\xe3X\xb8\xf7WO\xbf+*\xdfo\xee\xfd\xc6" +
	"g\x0e\x1e~\xfa7\xef\xa8\xbeW7 \x07by\xc6" +
	"N\\\xdc5\xfb\xce\x83\xd7<\x03!\xda5P\x9c\xe1" +
	"{/\xde8\xe3\xbc=_S\xc0U\xf5\xb4\xbe\xc8\x0b" +
	"XP5}Ae;\xed\x1aXJ\x17\xce\\\x98\xf7" +
	"\xa0\xcc\xa9W@q&g\xa7\xe7g\x17_\xfa\xd3S" +
	"\xd9W*\xdf\xc4w\xad\xa7\x8e\xc4\xc8\xbee\x0f\x9b\xf5" +
	"i\xf5:\xa0\xfe\xa1\x1a\x82\x16'c\xa7c\xc1\x98\x99" +
	"\x91R\x99\xce}\xa9\xc4\x81\x9e\x03Vl \x97\xb6!" +
	"\x82h(2\x01pW\x82\x82R\x94v\x83D\x89\xf6" +
	"r,\x9dL\x9a\xa9x\x17F\x10]$Le:\xa3" +
	"\x96\x19\xb7\xd0.c\x882P\x10\x80\xd2f\x8e\xe1\xb7" +
	"-\xb3\x0a@Ne:\x1f\xb3\x139\xcb\x0e\xe6\xd9\xa3" +
	"!je\x07\xfasY0\x14Y\x01P\x10\x80\xfa\xea" +
	"\x00\x8cu2\x1a\x9b%\xc4\x14\x12\x90\x90\x00Vt\xb3" +
	"\xbb?\x9d\xb5\xec`\x8c=\x1aB\x11\xd36\x93Y7" +
	"\x80T\x07\x88\x1c\"@\x9c{\x9b\x10\xc2G!tJ" +
	"\xb7\xf3&\x02\x1c\xa3\xb2\x0b^B2\x1e\xcc\x9b\x89\x1c" +
	"G\xd7\xfas\xd9\x8a!\xf1\x1eC\xc5*\"\x88\x11\x99" +
	"\x18\xeb\xd0CI\x80\xb2o\x00\xb8\x9f*U\x9b\x0a\x96" +
	"\xb6\xb0\xea\x98\xb6\x96\xc7\xa4\xc5\x92q\xa4e\xfd\x00\"" +
	"\x85\xca\xa9\xb3z\xb3\xb9xz \x17Id\xc4L0" +
	"\xeb\x05\xbc\xb5\x0c(\xdb1\xa4e\x02\xaf\x8dg\xd9\xf6" +
	"\xff\x8a'\xea+\xee\xd43\x1a\xc9\x8d1\xed\x1c;\xd6" +
	"\xbc;\x97\x041\xed #]C4T\x1c\x98\xb1\xce" +
	"-g[3\x80\xd1 \xa3\xd1*!\xe2f\xa6\x18\xda" +
	"\xc2\xa8\xd6$\xa3\xd1!\xa1?n\xe6L\xf4\x81\x84>" +
	"X\x8dw\xf2Z\xbb)\xf1o\x8dT\xd4\xcd\xb5\xb5\x94" +
	"\xeb~\x09\xfd)3i\xe1F\x90p#\xa0f\xda}" +
	"\xb8\x090\"#\xff\xd7&OR\x08\x15\xdbfD\xdd" +
	"\xcc\x89*\xec\x17\x85\xed\xd01F\xd4a\x0d\xd1\xf5\x10" +
	"\x14\xd7\x0c}\x81)1\xa9\xa1\xe4\xda\x08\x0a\xeb\xa7\xe6" +
	"\x13 \xd1\xc75\x94]\xf3C\xe1uto\x14$\xda" +
	"\xa3\xa1\xe2^\x04(\xee\x14z\x0f\xfb\xaeM\x0b\xf0M" +
	"t\xa1\x9f\xa9\xa0\x0b\x1dA\x06\x903V\xf15\x91\x8a" +
	"$2\x80\xa57\xbe\xd9\xe2a\xb5\x96*\x1cA\x8c\xd3" +
	"C\xa4\xe62\x91*\xb6T+9\xaf\xa4\xc5\xfd\x80\xe2" +
	"\xd6w%\xcd\x13U\x96\xa1\x95)\xc8\xcbv\x19\xe85" +
	"\x8d\x8as!IX\x8b\xf2yFy\xf7^\xaf\xa2|" +
	"%\x9d\xa3V\xd6?P\xed!\x8c\xcf\xbb\x03\xd5\x16\xe2" +
	"\xfe\xdeY\xc3B*\xbc\x89\xf5 {d\xb2\x8apW" +
	"\x15\x9aWJ\x91@\xcd>V5\xe8\x7f\x03\x00\x00\xff" +
	"\xff\xd4\\\xd6\x0f"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x808180da028ec18f,
		0x8135b09534858837,
		0x81b0b07b371f8b52,
		0x82a029056a5bf10a,
		0x8de1ac13324b2807,
		0xa054811b9dac9034,
		0xa4489f77fff767e0,
		0xb115ecb8561f676f,
		0xb647077be7d9c5d3,
		0xb706f28b7791424c,
		0xbcf68a5e761fb628,
		0xbdae1d3b8723c47b,
		0xbfa53a265f4fa1f4,
		0xc32fe58c2da49d81,
		0xc34c7e36b62d7264,
		0xd503d05399426c88,
		0xd780c48dc75ef416,
		0xe393b08d69af9bff,
		0xe456479b51266803,
		0xe660907e6226a974,
		0xea499ec43bd19f91,
		0xeb9cffb3fdd13c85,
		0xebd0b3816ff47540,
		0xf07df1c4ebb1c4a4,
		0xf555056393ae30d6)
}
