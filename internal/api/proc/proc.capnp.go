// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Executor struct{ Client *capnp.Client }

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xe8bb307fa2f406fb

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

func (c Executor) AddRef() Executor {
	return Executor{
		Client: c.Client.AddRef(),
	}
}

func (c Executor) Release() {
	c.Client.Release()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c, policy)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server, policy *server.Policy) Executor {
	return Executor{Client: capnp.NewClient(Executor_NewServer(s, policy))}
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{Struct: r}, err
}

type Executor_exec_Params struct{ capnp.Struct }

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xaf67b0a40b1c2bea

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params{st}, err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params{st}, err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params{root.Struct()}, err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xaf67b0a40b1c2bea, s.Struct)
	return str
}

func (s Executor_exec_Params) Profile() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Executor_exec_Params) HasProfile() bool {
	return s.Struct.HasPtr(0)
}

func (s Executor_exec_Params) SetProfile(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Params]{l}, err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (p Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Params{s}, err
}

func (p Executor_exec_Params_Future) Profile() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Executor_exec_Results struct{ capnp.Struct }

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0x8d124035fd940437

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{st}, err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{st}, err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results{root.Struct()}, err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0x8d124035fd940437, s.Struct)
	return str
}

func (s Executor_exec_Results) Proc() Process {
	p, _ := s.Struct.Ptr(0)
	return Process{Client: p.Interface().Client()}
}

func (s Executor_exec_Results) HasProc() bool {
	return s.Struct.HasPtr(0)
}

func (s Executor_exec_Results) SetProc(v Process) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results]{l}, err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (p Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Results{s}, err
}

func (p Executor_exec_Results_Future) Proc() Process {
	return Process{Client: p.Future.Field(0, nil).Client()}
}

type UnixCommand struct{ capnp.Struct }

// UnixCommand_TypeID is the unique identifier for the type UnixCommand.
const UnixCommand_TypeID = 0xd1f33822617e9005

func NewUnixCommand(s *capnp.Segment) (UnixCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixCommand{st}, err
}

func NewRootUnixCommand(s *capnp.Segment) (UnixCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UnixCommand{st}, err
}

func ReadRootUnixCommand(msg *capnp.Message) (UnixCommand, error) {
	root, err := msg.Root()
	return UnixCommand{root.Struct()}, err
}

func (s UnixCommand) String() string {
	str, _ := text.Marshal(0xd1f33822617e9005, s.Struct)
	return str
}

func (s UnixCommand) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UnixCommand) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s UnixCommand) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UnixCommand) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UnixCommand) Arg() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s UnixCommand) HasArg() bool {
	return s.Struct.HasPtr(1)
}

func (s UnixCommand) SetArg(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArg sets the arg field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s UnixCommand) NewArg(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// UnixCommand_List is a list of UnixCommand.
type UnixCommand_List = capnp.StructList[UnixCommand]

// NewUnixCommand creates a new list of UnixCommand.
func NewUnixCommand_List(s *capnp.Segment, sz int32) (UnixCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UnixCommand]{l}, err
}

// UnixCommand_Future is a wrapper for a UnixCommand promised by a client call.
type UnixCommand_Future struct{ *capnp.Future }

func (p UnixCommand_Future) Struct() (UnixCommand, error) {
	s, err := p.Future.Struct()
	return UnixCommand{s}, err
}

type Process struct{ Client *capnp.Client }

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xfad3f9326227aa2f

func (c Process) Start(ctx context.Context, params func(Process_start_Params) error) (Process_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      0,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_start_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Process_start_Results_Future{Future: ans.Future()}, release
}
func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      1,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release
}
func (c Process) StderrPipe(ctx context.Context, params func(Process_stderrPipe_Params) error) (Process_stderrPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      2,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stderrPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stderrPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Process_stderrPipe_Results_Future{Future: ans.Future()}, release
}
func (c Process) StdinPipe(ctx context.Context, params func(Process_stdinPipe_Params) error) (Process_stdinPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      3,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stdinPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stdinPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Process_stdinPipe_Results_Future{Future: ans.Future()}, release
}
func (c Process) StdoutPipe(ctx context.Context, params func(Process_stdoutPipe_Params) error) (Process_stdoutPipe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      4,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stdoutPipe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stdoutPipe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Process_stdoutPipe_Results_Future{Future: ans.Future()}, release
}

func (c Process) AddRef() Process {
	return Process{
		Client: c.Client.AddRef(),
	}
}

func (c Process) Release() {
	c.Client.Release()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Start(context.Context, Process_start) error

	Wait(context.Context, Process_wait) error

	StderrPipe(context.Context, Process_stderrPipe) error

	StdinPipe(context.Context, Process_stdinPipe) error

	StdoutPipe(context.Context, Process_stdoutPipe) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c, policy)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server, policy *server.Policy) Process {
	return Process{Client: capnp.NewClient(Process_NewServer(s, policy))}
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      0,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Process_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      1,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      2,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stderrPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StderrPipe(ctx, Process_stderrPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      3,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stdinPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdinPipe(ctx, Process_stdinPipe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad3f9326227aa2f,
			MethodID:      4,
			InterfaceName: "proc.capnp:Process",
			MethodName:    "stdoutPipe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StdoutPipe(ctx, Process_stdoutPipe{call})
		},
	})

	return methods
}

// Process_start holds the state for a server call to Process.start.
// See server.Call for documentation.
type Process_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_start) Args() Process_start_Params {
	return Process_start_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Process_start) AllocResults() (Process_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results{Struct: r}, err
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Results{Struct: r}, err
}

// Process_stderrPipe holds the state for a server call to Process.stderrPipe.
// See server.Call for documentation.
type Process_stderrPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stderrPipe) Args() Process_stderrPipe_Params {
	return Process_stderrPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Process_stderrPipe) AllocResults() (Process_stderrPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stderrPipe_Results{Struct: r}, err
}

// Process_stdinPipe holds the state for a server call to Process.stdinPipe.
// See server.Call for documentation.
type Process_stdinPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stdinPipe) Args() Process_stdinPipe_Params {
	return Process_stdinPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Process_stdinPipe) AllocResults() (Process_stdinPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdinPipe_Results{Struct: r}, err
}

// Process_stdoutPipe holds the state for a server call to Process.stdoutPipe.
// See server.Call for documentation.
type Process_stdoutPipe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stdoutPipe) Args() Process_stdoutPipe_Params {
	return Process_stdoutPipe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Process_stdoutPipe) AllocResults() (Process_stdoutPipe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdoutPipe_Results{Struct: r}, err
}

type Process_start_Params struct{ capnp.Struct }

// Process_start_Params_TypeID is the unique identifier for the type Process_start_Params.
const Process_start_Params_TypeID = 0x8c904933b3154df6

func NewProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params{st}, err
}

func NewRootProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params{st}, err
}

func ReadRootProcess_start_Params(msg *capnp.Message) (Process_start_Params, error) {
	root, err := msg.Root()
	return Process_start_Params{root.Struct()}, err
}

func (s Process_start_Params) String() string {
	str, _ := text.Marshal(0x8c904933b3154df6, s.Struct)
	return str
}

// Process_start_Params_List is a list of Process_start_Params.
type Process_start_Params_List = capnp.StructList[Process_start_Params]

// NewProcess_start_Params creates a new list of Process_start_Params.
func NewProcess_start_Params_List(s *capnp.Segment, sz int32) (Process_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Params]{l}, err
}

// Process_start_Params_Future is a wrapper for a Process_start_Params promised by a client call.
type Process_start_Params_Future struct{ *capnp.Future }

func (p Process_start_Params_Future) Struct() (Process_start_Params, error) {
	s, err := p.Future.Struct()
	return Process_start_Params{s}, err
}

type Process_start_Results struct{ capnp.Struct }

// Process_start_Results_TypeID is the unique identifier for the type Process_start_Results.
const Process_start_Results_TypeID = 0xb06e51dfe615883f

func NewProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results{st}, err
}

func NewRootProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results{st}, err
}

func ReadRootProcess_start_Results(msg *capnp.Message) (Process_start_Results, error) {
	root, err := msg.Root()
	return Process_start_Results{root.Struct()}, err
}

func (s Process_start_Results) String() string {
	str, _ := text.Marshal(0xb06e51dfe615883f, s.Struct)
	return str
}

// Process_start_Results_List is a list of Process_start_Results.
type Process_start_Results_List = capnp.StructList[Process_start_Results]

// NewProcess_start_Results creates a new list of Process_start_Results.
func NewProcess_start_Results_List(s *capnp.Segment, sz int32) (Process_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Results]{l}, err
}

// Process_start_Results_Future is a wrapper for a Process_start_Results promised by a client call.
type Process_start_Results_Future struct{ *capnp.Future }

func (p Process_start_Results_Future) Struct() (Process_start_Results, error) {
	s, err := p.Future.Struct()
	return Process_start_Results{s}, err
}

type Process_wait_Params struct{ capnp.Struct }

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xe879bc9a8ccb287a

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params{st}, err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params{st}, err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params{root.Struct()}, err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xe879bc9a8ccb287a, s.Struct)
	return str
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params]{l}, err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (p Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	s, err := p.Future.Struct()
	return Process_wait_Params{s}, err
}

type Process_wait_Results struct{ capnp.Struct }

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xe6082b91de9c7542

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Results{st}, err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Results{st}, err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results{root.Struct()}, err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xe6082b91de9c7542, s.Struct)
	return str
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results]{l}, err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (p Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	s, err := p.Future.Struct()
	return Process_wait_Results{s}, err
}

type Process_stderrPipe_Params struct{ capnp.Struct }

// Process_stderrPipe_Params_TypeID is the unique identifier for the type Process_stderrPipe_Params.
const Process_stderrPipe_Params_TypeID = 0xbb2a480e9941b71f

func NewProcess_stderrPipe_Params(s *capnp.Segment) (Process_stderrPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stderrPipe_Params{st}, err
}

func NewRootProcess_stderrPipe_Params(s *capnp.Segment) (Process_stderrPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stderrPipe_Params{st}, err
}

func ReadRootProcess_stderrPipe_Params(msg *capnp.Message) (Process_stderrPipe_Params, error) {
	root, err := msg.Root()
	return Process_stderrPipe_Params{root.Struct()}, err
}

func (s Process_stderrPipe_Params) String() string {
	str, _ := text.Marshal(0xbb2a480e9941b71f, s.Struct)
	return str
}

// Process_stderrPipe_Params_List is a list of Process_stderrPipe_Params.
type Process_stderrPipe_Params_List = capnp.StructList[Process_stderrPipe_Params]

// NewProcess_stderrPipe_Params creates a new list of Process_stderrPipe_Params.
func NewProcess_stderrPipe_Params_List(s *capnp.Segment, sz int32) (Process_stderrPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stderrPipe_Params]{l}, err
}

// Process_stderrPipe_Params_Future is a wrapper for a Process_stderrPipe_Params promised by a client call.
type Process_stderrPipe_Params_Future struct{ *capnp.Future }

func (p Process_stderrPipe_Params_Future) Struct() (Process_stderrPipe_Params, error) {
	s, err := p.Future.Struct()
	return Process_stderrPipe_Params{s}, err
}

type Process_stderrPipe_Results struct{ capnp.Struct }

// Process_stderrPipe_Results_TypeID is the unique identifier for the type Process_stderrPipe_Results.
const Process_stderrPipe_Results_TypeID = 0xcdc79590cc1b3296

func NewProcess_stderrPipe_Results(s *capnp.Segment) (Process_stderrPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stderrPipe_Results{st}, err
}

func NewRootProcess_stderrPipe_Results(s *capnp.Segment) (Process_stderrPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stderrPipe_Results{st}, err
}

func ReadRootProcess_stderrPipe_Results(msg *capnp.Message) (Process_stderrPipe_Results, error) {
	root, err := msg.Root()
	return Process_stderrPipe_Results{root.Struct()}, err
}

func (s Process_stderrPipe_Results) String() string {
	str, _ := text.Marshal(0xcdc79590cc1b3296, s.Struct)
	return str
}

func (s Process_stderrPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Process_stderrPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Process_stderrPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Process_stderrPipe_Results_List is a list of Process_stderrPipe_Results.
type Process_stderrPipe_Results_List = capnp.StructList[Process_stderrPipe_Results]

// NewProcess_stderrPipe_Results creates a new list of Process_stderrPipe_Results.
func NewProcess_stderrPipe_Results_List(s *capnp.Segment, sz int32) (Process_stderrPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_stderrPipe_Results]{l}, err
}

// Process_stderrPipe_Results_Future is a wrapper for a Process_stderrPipe_Results promised by a client call.
type Process_stderrPipe_Results_Future struct{ *capnp.Future }

func (p Process_stderrPipe_Results_Future) Struct() (Process_stderrPipe_Results, error) {
	s, err := p.Future.Struct()
	return Process_stderrPipe_Results{s}, err
}

func (p Process_stderrPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type Process_stdinPipe_Params struct{ capnp.Struct }

// Process_stdinPipe_Params_TypeID is the unique identifier for the type Process_stdinPipe_Params.
const Process_stdinPipe_Params_TypeID = 0xb6d7c0801a11c132

func NewProcess_stdinPipe_Params(s *capnp.Segment) (Process_stdinPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stdinPipe_Params{st}, err
}

func NewRootProcess_stdinPipe_Params(s *capnp.Segment) (Process_stdinPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stdinPipe_Params{st}, err
}

func ReadRootProcess_stdinPipe_Params(msg *capnp.Message) (Process_stdinPipe_Params, error) {
	root, err := msg.Root()
	return Process_stdinPipe_Params{root.Struct()}, err
}

func (s Process_stdinPipe_Params) String() string {
	str, _ := text.Marshal(0xb6d7c0801a11c132, s.Struct)
	return str
}

// Process_stdinPipe_Params_List is a list of Process_stdinPipe_Params.
type Process_stdinPipe_Params_List = capnp.StructList[Process_stdinPipe_Params]

// NewProcess_stdinPipe_Params creates a new list of Process_stdinPipe_Params.
func NewProcess_stdinPipe_Params_List(s *capnp.Segment, sz int32) (Process_stdinPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stdinPipe_Params]{l}, err
}

// Process_stdinPipe_Params_Future is a wrapper for a Process_stdinPipe_Params promised by a client call.
type Process_stdinPipe_Params_Future struct{ *capnp.Future }

func (p Process_stdinPipe_Params_Future) Struct() (Process_stdinPipe_Params, error) {
	s, err := p.Future.Struct()
	return Process_stdinPipe_Params{s}, err
}

type Process_stdinPipe_Results struct{ capnp.Struct }

// Process_stdinPipe_Results_TypeID is the unique identifier for the type Process_stdinPipe_Results.
const Process_stdinPipe_Results_TypeID = 0xbcd6ac1b0acbec74

func NewProcess_stdinPipe_Results(s *capnp.Segment) (Process_stdinPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdinPipe_Results{st}, err
}

func NewRootProcess_stdinPipe_Results(s *capnp.Segment) (Process_stdinPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdinPipe_Results{st}, err
}

func ReadRootProcess_stdinPipe_Results(msg *capnp.Message) (Process_stdinPipe_Results, error) {
	root, err := msg.Root()
	return Process_stdinPipe_Results{root.Struct()}, err
}

func (s Process_stdinPipe_Results) String() string {
	str, _ := text.Marshal(0xbcd6ac1b0acbec74, s.Struct)
	return str
}

func (s Process_stdinPipe_Results) Wc() WriteCloser {
	p, _ := s.Struct.Ptr(0)
	return WriteCloser{Client: p.Interface().Client()}
}

func (s Process_stdinPipe_Results) HasWc() bool {
	return s.Struct.HasPtr(0)
}

func (s Process_stdinPipe_Results) SetWc(v WriteCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Process_stdinPipe_Results_List is a list of Process_stdinPipe_Results.
type Process_stdinPipe_Results_List = capnp.StructList[Process_stdinPipe_Results]

// NewProcess_stdinPipe_Results creates a new list of Process_stdinPipe_Results.
func NewProcess_stdinPipe_Results_List(s *capnp.Segment, sz int32) (Process_stdinPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_stdinPipe_Results]{l}, err
}

// Process_stdinPipe_Results_Future is a wrapper for a Process_stdinPipe_Results promised by a client call.
type Process_stdinPipe_Results_Future struct{ *capnp.Future }

func (p Process_stdinPipe_Results_Future) Struct() (Process_stdinPipe_Results, error) {
	s, err := p.Future.Struct()
	return Process_stdinPipe_Results{s}, err
}

func (p Process_stdinPipe_Results_Future) Wc() WriteCloser {
	return WriteCloser{Client: p.Future.Field(0, nil).Client()}
}

type Process_stdoutPipe_Params struct{ capnp.Struct }

// Process_stdoutPipe_Params_TypeID is the unique identifier for the type Process_stdoutPipe_Params.
const Process_stdoutPipe_Params_TypeID = 0xc1fa505699d74b7e

func NewProcess_stdoutPipe_Params(s *capnp.Segment) (Process_stdoutPipe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stdoutPipe_Params{st}, err
}

func NewRootProcess_stdoutPipe_Params(s *capnp.Segment) (Process_stdoutPipe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stdoutPipe_Params{st}, err
}

func ReadRootProcess_stdoutPipe_Params(msg *capnp.Message) (Process_stdoutPipe_Params, error) {
	root, err := msg.Root()
	return Process_stdoutPipe_Params{root.Struct()}, err
}

func (s Process_stdoutPipe_Params) String() string {
	str, _ := text.Marshal(0xc1fa505699d74b7e, s.Struct)
	return str
}

// Process_stdoutPipe_Params_List is a list of Process_stdoutPipe_Params.
type Process_stdoutPipe_Params_List = capnp.StructList[Process_stdoutPipe_Params]

// NewProcess_stdoutPipe_Params creates a new list of Process_stdoutPipe_Params.
func NewProcess_stdoutPipe_Params_List(s *capnp.Segment, sz int32) (Process_stdoutPipe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stdoutPipe_Params]{l}, err
}

// Process_stdoutPipe_Params_Future is a wrapper for a Process_stdoutPipe_Params promised by a client call.
type Process_stdoutPipe_Params_Future struct{ *capnp.Future }

func (p Process_stdoutPipe_Params_Future) Struct() (Process_stdoutPipe_Params, error) {
	s, err := p.Future.Struct()
	return Process_stdoutPipe_Params{s}, err
}

type Process_stdoutPipe_Results struct{ capnp.Struct }

// Process_stdoutPipe_Results_TypeID is the unique identifier for the type Process_stdoutPipe_Results.
const Process_stdoutPipe_Results_TypeID = 0xa99e7a6ae1035c77

func NewProcess_stdoutPipe_Results(s *capnp.Segment) (Process_stdoutPipe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdoutPipe_Results{st}, err
}

func NewRootProcess_stdoutPipe_Results(s *capnp.Segment) (Process_stdoutPipe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_stdoutPipe_Results{st}, err
}

func ReadRootProcess_stdoutPipe_Results(msg *capnp.Message) (Process_stdoutPipe_Results, error) {
	root, err := msg.Root()
	return Process_stdoutPipe_Results{root.Struct()}, err
}

func (s Process_stdoutPipe_Results) String() string {
	str, _ := text.Marshal(0xa99e7a6ae1035c77, s.Struct)
	return str
}

func (s Process_stdoutPipe_Results) Rc() ReadCloser {
	p, _ := s.Struct.Ptr(0)
	return ReadCloser{Client: p.Interface().Client()}
}

func (s Process_stdoutPipe_Results) HasRc() bool {
	return s.Struct.HasPtr(0)
}

func (s Process_stdoutPipe_Results) SetRc(v ReadCloser) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Process_stdoutPipe_Results_List is a list of Process_stdoutPipe_Results.
type Process_stdoutPipe_Results_List = capnp.StructList[Process_stdoutPipe_Results]

// NewProcess_stdoutPipe_Results creates a new list of Process_stdoutPipe_Results.
func NewProcess_stdoutPipe_Results_List(s *capnp.Segment, sz int32) (Process_stdoutPipe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_stdoutPipe_Results]{l}, err
}

// Process_stdoutPipe_Results_Future is a wrapper for a Process_stdoutPipe_Results promised by a client call.
type Process_stdoutPipe_Results_Future struct{ *capnp.Future }

func (p Process_stdoutPipe_Results_Future) Struct() (Process_stdoutPipe_Results, error) {
	s, err := p.Future.Struct()
	return Process_stdoutPipe_Results{s}, err
}

func (p Process_stdoutPipe_Results_Future) Rc() ReadCloser {
	return ReadCloser{Client: p.Future.Field(0, nil).Client()}
}

type ReadCloser struct{ Client *capnp.Client }

// ReadCloser_TypeID is the unique identifier for the type ReadCloser.
const ReadCloser_TypeID = 0xeb9cffb3fdd13c85

func (c ReadCloser) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c ReadCloser) AddRef() ReadCloser {
	return ReadCloser{
		Client: c.Client.AddRef(),
	}
}

func (c ReadCloser) Release() {
	c.Client.Release()
}

// A ReadCloser_Server is a ReadCloser with a local implementation.
type ReadCloser_Server interface {
	Read(context.Context, Reader_read) error

	Close(context.Context, Closer_close) error
}

// ReadCloser_NewServer creates a new Server from an implementation of ReadCloser_Server.
func ReadCloser_NewServer(s ReadCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadCloser_Methods(nil, s), s, c, policy)
}

// ReadCloser_ServerToClient creates a new Client from an implementation of ReadCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadCloser_ServerToClient(s ReadCloser_Server, policy *server.Policy) ReadCloser {
	return ReadCloser{Client: capnp.NewClient(ReadCloser_NewServer(s, policy))}
}

// ReadCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadCloser_Methods(methods []server.Method, s ReadCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type WriteCloser struct{ Client *capnp.Client }

// WriteCloser_TypeID is the unique identifier for the type WriteCloser.
const WriteCloser_TypeID = 0xb115ecb8561f676f

func (c WriteCloser) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c WriteCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c WriteCloser) AddRef() WriteCloser {
	return WriteCloser{
		Client: c.Client.AddRef(),
	}
}

func (c WriteCloser) Release() {
	c.Client.Release()
}

// A WriteCloser_Server is a WriteCloser with a local implementation.
type WriteCloser_Server interface {
	Write(context.Context, Writer_write) error

	Close(context.Context, Closer_close) error
}

// WriteCloser_NewServer creates a new Server from an implementation of WriteCloser_Server.
func WriteCloser_NewServer(s WriteCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WriteCloser_Methods(nil, s), s, c, policy)
}

// WriteCloser_ServerToClient creates a new Client from an implementation of WriteCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func WriteCloser_ServerToClient(s WriteCloser_Server, policy *server.Policy) WriteCloser {
	return WriteCloser{Client: capnp.NewClient(WriteCloser_NewServer(s, policy))}
}

// WriteCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WriteCloser_Methods(methods []server.Method, s WriteCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type Reader struct{ Client *capnp.Client }

// Reader_TypeID is the unique identifier for the type Reader.
const Reader_TypeID = 0x8135b09534858837

func (c Reader) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}

func (c Reader) AddRef() Reader {
	return Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Reader) Release() {
	c.Client.Release()
}

// A Reader_Server is a Reader with a local implementation.
type Reader_Server interface {
	Read(context.Context, Reader_read) error
}

// Reader_NewServer creates a new Server from an implementation of Reader_Server.
func Reader_NewServer(s Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Reader_Methods(nil, s), s, c, policy)
}

// Reader_ServerToClient creates a new Client from an implementation of Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Reader_ServerToClient(s Reader_Server, policy *server.Policy) Reader {
	return Reader{Client: capnp.NewClient(Reader_NewServer(s, policy))}
}

// Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Reader_Methods(methods []server.Method, s Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8135b09534858837,
			MethodID:      0,
			InterfaceName: "proc.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	return methods
}

// Reader_read holds the state for a server call to Reader.read.
// See server.Call for documentation.
type Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Reader_read) Args() Reader_read_Params {
	return Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Reader_read) AllocResults() (Reader_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{Struct: r}, err
}

type Reader_read_Params struct{ capnp.Struct }

// Reader_read_Params_TypeID is the unique identifier for the type Reader_read_Params.
const Reader_read_Params_TypeID = 0xf555056393ae30d6

func NewReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func NewRootReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func ReadRootReader_read_Params(msg *capnp.Message) (Reader_read_Params, error) {
	root, err := msg.Root()
	return Reader_read_Params{root.Struct()}, err
}

func (s Reader_read_Params) String() string {
	str, _ := text.Marshal(0xf555056393ae30d6, s.Struct)
	return str
}

func (s Reader_read_Params) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Params) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Params_List is a list of Reader_read_Params.
type Reader_read_Params_List = capnp.StructList[Reader_read_Params]

// NewReader_read_Params creates a new list of Reader_read_Params.
func NewReader_read_Params_List(s *capnp.Segment, sz int32) (Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Reader_read_Params]{l}, err
}

// Reader_read_Params_Future is a wrapper for a Reader_read_Params promised by a client call.
type Reader_read_Params_Future struct{ *capnp.Future }

func (p Reader_read_Params_Future) Struct() (Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Reader_read_Params{s}, err
}

type Reader_read_Results struct{ capnp.Struct }

// Reader_read_Results_TypeID is the unique identifier for the type Reader_read_Results.
const Reader_read_Results_TypeID = 0xc32fe58c2da49d81

func NewReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func NewRootReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Reader_read_Results{st}, err
}

func ReadRootReader_read_Results(msg *capnp.Message) (Reader_read_Results, error) {
	root, err := msg.Root()
	return Reader_read_Results{root.Struct()}, err
}

func (s Reader_read_Results) String() string {
	str, _ := text.Marshal(0xc32fe58c2da49d81, s.Struct)
	return str
}

func (s Reader_read_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Reader_read_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Reader_read_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Reader_read_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Reader_read_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Reader_read_Results_List is a list of Reader_read_Results.
type Reader_read_Results_List = capnp.StructList[Reader_read_Results]

// NewReader_read_Results creates a new list of Reader_read_Results.
func NewReader_read_Results_List(s *capnp.Segment, sz int32) (Reader_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Reader_read_Results]{l}, err
}

// Reader_read_Results_Future is a wrapper for a Reader_read_Results promised by a client call.
type Reader_read_Results_Future struct{ *capnp.Future }

func (p Reader_read_Results_Future) Struct() (Reader_read_Results, error) {
	s, err := p.Future.Struct()
	return Reader_read_Results{s}, err
}

type Writer struct{ Client *capnp.Client }

// Writer_TypeID is the unique identifier for the type Writer.
const Writer_TypeID = 0xe393b08d69af9bff

func (c Writer) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}

func (c Writer) AddRef() Writer {
	return Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Writer) Release() {
	c.Client.Release()
}

// A Writer_Server is a Writer with a local implementation.
type Writer_Server interface {
	Write(context.Context, Writer_write) error
}

// Writer_NewServer creates a new Server from an implementation of Writer_Server.
func Writer_NewServer(s Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Writer_Methods(nil, s), s, c, policy)
}

// Writer_ServerToClient creates a new Client from an implementation of Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Writer_ServerToClient(s Writer_Server, policy *server.Policy) Writer {
	return Writer{Client: capnp.NewClient(Writer_NewServer(s, policy))}
}

// Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Writer_Methods(methods []server.Method, s Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe393b08d69af9bff,
			MethodID:      0,
			InterfaceName: "proc.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	return methods
}

// Writer_write holds the state for a server call to Writer.write.
// See server.Call for documentation.
type Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Writer_write) Args() Writer_write_Params {
	return Writer_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Writer_write) AllocResults() (Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{Struct: r}, err
}

type Writer_write_Params struct{ capnp.Struct }

// Writer_write_Params_TypeID is the unique identifier for the type Writer_write_Params.
const Writer_write_Params_TypeID = 0xd780c48dc75ef416

func NewWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func NewRootWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func ReadRootWriter_write_Params(msg *capnp.Message) (Writer_write_Params, error) {
	root, err := msg.Root()
	return Writer_write_Params{root.Struct()}, err
}

func (s Writer_write_Params) String() string {
	str, _ := text.Marshal(0xd780c48dc75ef416, s.Struct)
	return str
}

func (s Writer_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Writer_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Writer_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Writer_write_Params_List is a list of Writer_write_Params.
type Writer_write_Params_List = capnp.StructList[Writer_write_Params]

// NewWriter_write_Params creates a new list of Writer_write_Params.
func NewWriter_write_Params_List(s *capnp.Segment, sz int32) (Writer_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Writer_write_Params]{l}, err
}

// Writer_write_Params_Future is a wrapper for a Writer_write_Params promised by a client call.
type Writer_write_Params_Future struct{ *capnp.Future }

func (p Writer_write_Params_Future) Struct() (Writer_write_Params, error) {
	s, err := p.Future.Struct()
	return Writer_write_Params{s}, err
}

type Writer_write_Results struct{ capnp.Struct }

// Writer_write_Results_TypeID is the unique identifier for the type Writer_write_Results.
const Writer_write_Results_TypeID = 0x81b0b07b371f8b52

func NewWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func NewRootWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Writer_write_Results{st}, err
}

func ReadRootWriter_write_Results(msg *capnp.Message) (Writer_write_Results, error) {
	root, err := msg.Root()
	return Writer_write_Results{root.Struct()}, err
}

func (s Writer_write_Results) String() string {
	str, _ := text.Marshal(0x81b0b07b371f8b52, s.Struct)
	return str
}

func (s Writer_write_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Writer_write_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Writer_write_Results_List is a list of Writer_write_Results.
type Writer_write_Results_List = capnp.StructList[Writer_write_Results]

// NewWriter_write_Results creates a new list of Writer_write_Results.
func NewWriter_write_Results_List(s *capnp.Segment, sz int32) (Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Writer_write_Results]{l}, err
}

// Writer_write_Results_Future is a wrapper for a Writer_write_Results promised by a client call.
type Writer_write_Results_Future struct{ *capnp.Future }

func (p Writer_write_Results_Future) Struct() (Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Writer_write_Results{s}, err
}

type Closer struct{ Client *capnp.Client }

// Closer_TypeID is the unique identifier for the type Closer.
const Closer_TypeID = 0xa054811b9dac9034

func (c Closer) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c Closer) AddRef() Closer {
	return Closer{
		Client: c.Client.AddRef(),
	}
}

func (c Closer) Release() {
	c.Client.Release()
}

// A Closer_Server is a Closer with a local implementation.
type Closer_Server interface {
	Close(context.Context, Closer_close) error
}

// Closer_NewServer creates a new Server from an implementation of Closer_Server.
func Closer_NewServer(s Closer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Closer_Methods(nil, s), s, c, policy)
}

// Closer_ServerToClient creates a new Client from an implementation of Closer_Server.
// The caller is responsible for calling Release on the returned Client.
func Closer_ServerToClient(s Closer_Server, policy *server.Policy) Closer {
	return Closer{Client: capnp.NewClient(Closer_NewServer(s, policy))}
}

// Closer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Closer_Methods(methods []server.Method, s Closer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa054811b9dac9034,
			MethodID:      0,
			InterfaceName: "proc.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

// Closer_close holds the state for a server call to Closer.close.
// See server.Call for documentation.
type Closer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Closer_close) Args() Closer_close_Params {
	return Closer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Closer_close) AllocResults() (Closer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{Struct: r}, err
}

type Closer_close_Params struct{ capnp.Struct }

// Closer_close_Params_TypeID is the unique identifier for the type Closer_close_Params.
const Closer_close_Params_TypeID = 0x82a029056a5bf10a

func NewCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func NewRootCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func ReadRootCloser_close_Params(msg *capnp.Message) (Closer_close_Params, error) {
	root, err := msg.Root()
	return Closer_close_Params{root.Struct()}, err
}

func (s Closer_close_Params) String() string {
	str, _ := text.Marshal(0x82a029056a5bf10a, s.Struct)
	return str
}

// Closer_close_Params_List is a list of Closer_close_Params.
type Closer_close_Params_List = capnp.StructList[Closer_close_Params]

// NewCloser_close_Params creates a new list of Closer_close_Params.
func NewCloser_close_Params_List(s *capnp.Segment, sz int32) (Closer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Params]{l}, err
}

// Closer_close_Params_Future is a wrapper for a Closer_close_Params promised by a client call.
type Closer_close_Params_Future struct{ *capnp.Future }

func (p Closer_close_Params_Future) Struct() (Closer_close_Params, error) {
	s, err := p.Future.Struct()
	return Closer_close_Params{s}, err
}

type Closer_close_Results struct{ capnp.Struct }

// Closer_close_Results_TypeID is the unique identifier for the type Closer_close_Results.
const Closer_close_Results_TypeID = 0x8de1ac13324b2807

func NewCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func NewRootCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func ReadRootCloser_close_Results(msg *capnp.Message) (Closer_close_Results, error) {
	root, err := msg.Root()
	return Closer_close_Results{root.Struct()}, err
}

func (s Closer_close_Results) String() string {
	str, _ := text.Marshal(0x8de1ac13324b2807, s.Struct)
	return str
}

// Closer_close_Results_List is a list of Closer_close_Results.
type Closer_close_Results_List = capnp.StructList[Closer_close_Results]

// NewCloser_close_Results creates a new list of Closer_close_Results.
func NewCloser_close_Results_List(s *capnp.Segment, sz int32) (Closer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Results]{l}, err
}

// Closer_close_Results_Future is a wrapper for a Closer_close_Results promised by a client call.
type Closer_close_Results_Future struct{ *capnp.Future }

func (p Closer_close_Results_Future) Struct() (Closer_close_Results, error) {
	s, err := p.Future.Struct()
	return Closer_close_Results{s}, err
}

const schema_d78885a0de56b292 = "x\xda\xa4V[h\x14W\x18\xfe\xff\x9993!\x1a" +
	"\xd7\xb3')x)K%\xa2\xc6&\xc6D\xb1\x09\x95" +
	"d\xb5\x92\x06\x11f\x16/\xd8\xd6\xc2t3\x95\x15\xf7" +
	"\xd2\xd9\x0d\x89\x16/),X\xeaB\x8c\xb5\xa0\xd5\xa2" +
	"b\x1f,R\xb7\x0amQ\x1f*-H\xb1>H\xc1" +
	"\xbcY\xa4T\xa4\xf5\xa5\xad-4E\xa6\x9c3;\x97" +
	"\xbd\xc4\x97>\xed\xe5\x9c\xf3\xfd\xdf\xff\x9d\xff\xfb\xcf\xdf" +
	"-\xc9\x83\xca\xea\x96\x1d\xcd \x19\xe3Du\xd6\x1d)" +
	"\xae9Q^;\x01t\x8e\xecL]\xd9~\xffl\xf1" +
	"\xc84\x002J\xa6\xd8\x02\xa2\x01\xb062\xc4\xd6\xf3" +
	"oN\xe2\x83\xd8\xbaw\xcb\xe5\x090\xa2\x88\x00\x8a\x06" +
	"\xd0\xbb\x94H\x08\xc8V\x90\x01@\xa7\xf9\xf7\xd7\xf7\x90" +
	"\x15g\xdf\x03\x1a\xad\xac\xb3a2\x03\x8a\xf3\xf7\x96\xb6" +
	"\xab\xbd\xc3\x93G\x812\xef`'?\xa88\xeb\x94\x0f" +
	"\x9f\xae\x1d\x8c\x96\x80\xb6\"\x00Am>\xf6R\xd2\xcc" +
	"1\x17\x08Lm\xf9\xe6\x1ev\xe9A)\xc0\xec\xeds" +
	"\x8f\xae\x99\xbctf\xd1\xc4\xd6\xb3u\xdc\x9f'Sl" +
	"\xa9\xe0\xfe\x02\x19b\xc3\x82\xfb\xd8\x1b\xf2\x83=\xfb?" +
	"\xb9\xe82 \xc8qV\x93\x1e\x1e\xa7O\xc4\xf9u\xe5" +
	"\xe29\x17\xca\xbb/\x87\x89\xect\x93\xdb%6\x0c\x1c" +
	"i{\xf8\x93\x91)\x87r8\xc0\x89*Nvwl" +
	"\xfb\xd7\x8f\xdb\xbe\xa8#b\x91k,-\x88\xa4\x88\xc6" +
	"Rd\x19\x80\xd3s\x93.<\xfc\xcd\xf4\x97!\x18\x93" +
	",\xe10\xb1\xaf\xe2'\xe7\xbd\xdaq=\xb42L:" +
	"\xf8J\xe1\xf1\xed\xe6E\x97\xee\xdd\xa8&\xdf\x11\x90?" +
	"\xb8y\xfa\xe4v}\xe6f\xe8\xe8N\xf7\xe8\xc4\x99\x0b" +
	"\x9dG\x7fY\xf5m\xe5\xce\xc4Y\x16'3\x80l\x13" +
	"\x19\x03t>\xeaY\xf4\xc3\xe4\x89[w\xc2\xd8\xe7\\" +
	"a.\x0al2y\xd0\\\xf2\xd2\x9fw\x81\xce\xc1 " +
	";\"q\xa0\xef\xc95vW$xG\x80=\xf7\xe4" +
	"\xcd[\xa5\xef\x0eO\xbb\x97\xe5\x06\xebSy\xb0\xf5*" +
	"\xc7r>\xbe\x9c*\x95\x8f\xff\\\xa7\xd4.u\x8aY" +
	"*\xdfn\xaaC\xec}\xfe\xcd\xd90z\xfa\xfe\xb1\x95" +
	"M\x0fCI\xbd\xa3\x8a\x9b\xdf\xbf\xfc\xf6\xd1S7\xf6" +
	"=\x0aV\xd86\x95\xd7\xd9\xbf\xea\x93\xf3\x87\xba\xaf?" +
	"\xaa\xc1\x87\xf9\xc8\xfa\xd4\xf3,.\"\xacW\x87XI" +
	"\xd5XI\x8d8\xc5\x97\xef>\xbd\xea\x9c\xfe\xad\x8e\xd0" +
	"\x84z\xc5\xa5\xc1\x8a\xaa\xc6\x8a*\xbf\xba{\xdd\x9f\x1f" +
	"O\x92m\x7f\x85\xea\x9f\x1dP\xff\x10\xbbyv\xab>" +
	"[\xf6V\xcf??\xce\xd4\x81\x9dSO\xb1\x8b\x1c\xac" +
	"\xf7Su\x08\xd9>M\x83\x17\x9d\x9c\x9dMv%\xcd" +
	"\x1cfr\xfd\x09\xcb\x1c\xb1\xd0\xd6\x11\x0dE&\xa1P" +
	"\xe8\xdd\x1f\xa5\x1d Q\xa2El\xcb\x1c\x19D\x1d\xd1" +
	"\x07\x903\xb9\xfe\x1dv\xaa`\xd9]c\xfc\xa3=a" +
	"\xe5G\xf7\x16\xf2`(\xb2\x02\xa0 \x00m\x89\x02\x18" +
	"M2\x1a\xad\x12b\x06\x09HH \x80\x902\xb9\xfe" +
	"\x8d{\xb3y\xcb\xeeJ\xf2\x8f\xf6\x01\xdd\xb4\xcdt\xde" +
	"\xdf\xa0er\xfd\xba\x9dMZ\xf9|W\xbe`\xda\x85" +
	"vw\x03x\x1b2\xb9\xfeM\xe3Vr\xb4\x90\xb5\xbb" +
	"\xacq+\xe9\x93\xa8b\xd1\x11\xb0\x88\xf0\x93H\x03\xd1" +
	"\x00\x91\x86(\x91ZJ\x1e`(\xa2X\x0f\xcb\xe65" +
	" \xf4\xba\x06\xa5=B\xb6\x98\xc0\xa8\xd7-\xc8i$" +
	";Z\xd0S9\x1e'&\x02\x85y/\x0cx\xcb6" +
	"g\xed\xd7M\x0dk\xb9N\x87\x8aNa\xb4\x0d\x01\xda" +
	"\xa1\x9c\x9d};\xb5\xd7\xc2(bP\xbd\x00\x18\x85\xd9" +
	"\x88r\xf1}q\xab\xaaH\x14\xc1\x80+\x9a\x8e\xa8\xcb" +
	"\xc4h\xc2\x90\xe9\x00\x82\x9e\x19:Z\xa3C*#d" +
	"\xd0M[\x0bW@\xcd.\xcb\xb6+\xdb\"\xf63\xb6" +
	"U\xc0\x12V>\xf2,M\xc7\xb8\xa6~\x1bm\xa0i" +
	"\x83{\xaa\x8d,y>\xb2\xbb\xb8G\xda\x13\x03\xaeH" +
	"F\x93\x1fs\x05\xaf\xbfv\x19\x8dn\x09\x11[\xb9\x89" +
	"i'w\xc6r\x19\x8d5\x12FF\xcc\x82\x89- " +
	"a\x0b4\xb2\xc9,\x1a\xfc\xaf\x8a\xe1\x17\xb7-\x93\x1a" +
	"\xdf8\x90M\xa7\xcd\xcc\x08/\xe6\xc6\x8c\xa9OyI" +
	"\x85\xf2+\x12F2f\xda\xc2\xb9 \xe1\\@\xcd\xb4" +
	"w\xe3<@]F\xf1\xd7\xbc\x1a\x8bWu\x89\x8a\xc5" +
	"g\xb3gX\x8a\xfa*\x0b\x9b\xcek\xfa\xe8\xcd\x07\xbe" +
	"\xe9D\xa0j\xd3\xa9!\x09\xc7\xccT\xa1\x91\xad\xab\xd6" +
	"k;\x11z\x0e\xd3\x0a\xd9\x10\x09\xef\xf9Fo\xa0\xe0" +
	"\x0d\x13\xe2s1\xbe\x18i\xa7\x16\xe1^\xa4\x183\x14" +
	")\xe43\xa1f\xa3?\x05\xe7\xb8\x82\x14\xa3\xb8\xb5\xae" +
	"So\x8c\xd5Z\xcc\x1f\xa3f\xb1Xmm\xea\xb1:" +
	"\xed\x9f\xdd\xa0\xd1\x93E\xce\xe7y\xd2\xad\"io\xac" +
	"Bo6\xa1\xc7\xb8\xf2E\x0d\xd1\x7f#\xd1{F\xe9" +
	">\xfe\x82\xa45\x94\xfcI\x03\xbd\xc7\x9f\x9a\xaf\x81D" +
	"wj(\xfb\xf3\x09zC\x07\xdd\x92\x00\x89n\xd2P" +
	"\xf1\xc7\x0c\xf4\xa6)\xda\xc7\xcf\xad\xd6b\xa2-\x0db" +
	"\x84_\xd9 :\x9e9@\xceY\xeeO\xd1\x08\x00+" +
	"\xbf\x84\x87\xddE\x1d\xf1\xbf\x00\x00\x00\xff\xff\xd9F\xfb" +
	"q"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x8135b09534858837,
		0x81b0b07b371f8b52,
		0x82a029056a5bf10a,
		0x8c904933b3154df6,
		0x8d124035fd940437,
		0x8de1ac13324b2807,
		0xa054811b9dac9034,
		0xa99e7a6ae1035c77,
		0xaf67b0a40b1c2bea,
		0xb06e51dfe615883f,
		0xb115ecb8561f676f,
		0xb6d7c0801a11c132,
		0xbb2a480e9941b71f,
		0xbcd6ac1b0acbec74,
		0xc1fa505699d74b7e,
		0xc32fe58c2da49d81,
		0xcdc79590cc1b3296,
		0xd1f33822617e9005,
		0xd780c48dc75ef416,
		0xe393b08d69af9bff,
		0xe6082b91de9c7542,
		0xe879bc9a8ccb287a,
		0xe8bb307fa2f406fb,
		0xeb9cffb3fdd13c85,
		0xf555056393ae30d6,
		0xfad3f9326227aa2f)
}
