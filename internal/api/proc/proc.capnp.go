// Code generated by capnpc-go. DO NOT EDIT.

package proc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
)

type Executor struct{ Client *capnp.Client }

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xe8bb307fa2f406fb

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

func (c Executor) AddRef() Executor {
	return Executor{
		Client: c.Client.AddRef(),
	}
}

func (c Executor) Release() {
	c.Client.Release()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c, policy)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server, policy *server.Policy) Executor {
	return Executor{Client: capnp.NewClient(Executor_NewServer(s, policy))}
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{Struct: r}, err
}

type Executor_exec_Params struct{ capnp.Struct }

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xaf67b0a40b1c2bea

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params{st}, err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Params{st}, err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params{root.Struct()}, err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xaf67b0a40b1c2bea, s.Struct)
	return str
}

func (s Executor_exec_Params) Param() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Executor_exec_Params) HasParam() bool {
	return s.Struct.HasPtr(0)
}

func (s Executor_exec_Params) SetParam(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Params]{List: l}, err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (p Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Params{s}, err
}

func (p Executor_exec_Params_Future) Param() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Executor_exec_Results struct{ capnp.Struct }

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0x8d124035fd940437

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{st}, err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results{st}, err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results{root.Struct()}, err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0x8d124035fd940437, s.Struct)
	return str
}

func (s Executor_exec_Results) Proc() Waiter {
	p, _ := s.Struct.Ptr(0)
	return Waiter{Client: p.Interface().Client()}
}

func (s Executor_exec_Results) HasProc() bool {
	return s.Struct.HasPtr(0)
}

func (s Executor_exec_Results) SetProc(v Waiter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results]{List: l}, err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (p Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	s, err := p.Future.Struct()
	return Executor_exec_Results{s}, err
}

func (p Executor_exec_Results_Future) Proc() Waiter {
	return Waiter{Client: p.Future.Field(0, nil).Client()}
}

type Waiter struct{ Client *capnp.Client }

// Waiter_TypeID is the unique identifier for the type Waiter.
const Waiter_TypeID = 0xc66c9bda04b0f29e

func (c Waiter) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

func (c Waiter) AddRef() Waiter {
	return Waiter{
		Client: c.Client.AddRef(),
	}
}

func (c Waiter) Release() {
	c.Client.Release()
}

// A Waiter_Server is a Waiter with a local implementation.
type Waiter_Server interface {
	Wait(context.Context, Waiter_wait) error
}

// Waiter_NewServer creates a new Server from an implementation of Waiter_Server.
func Waiter_NewServer(s Waiter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Waiter_Methods(nil, s), s, c, policy)
}

// Waiter_ServerToClient creates a new Client from an implementation of Waiter_Server.
// The caller is responsible for calling Release on the returned Client.
func Waiter_ServerToClient(s Waiter_Server, policy *server.Policy) Waiter {
	return Waiter{Client: capnp.NewClient(Waiter_NewServer(s, policy))}
}

// Waiter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Waiter_Methods(methods []server.Method, s Waiter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Waiter_wait holds the state for a server call to Waiter.wait.
// See server.Call for documentation.
type Waiter_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Waiter_wait) Args() Waiter_wait_Params {
	return Waiter_wait_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Waiter_wait) AllocResults() (Waiter_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results{Struct: r}, err
}

type Waiter_wait_Params struct{ capnp.Struct }

// Waiter_wait_Params_TypeID is the unique identifier for the type Waiter_wait_Params.
const Waiter_wait_Params_TypeID = 0x99761c4abe038bf3

func NewWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params{st}, err
}

func NewRootWaiter_wait_Params(s *capnp.Segment) (Waiter_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Params{st}, err
}

func ReadRootWaiter_wait_Params(msg *capnp.Message) (Waiter_wait_Params, error) {
	root, err := msg.Root()
	return Waiter_wait_Params{root.Struct()}, err
}

func (s Waiter_wait_Params) String() string {
	str, _ := text.Marshal(0x99761c4abe038bf3, s.Struct)
	return str
}

// Waiter_wait_Params_List is a list of Waiter_wait_Params.
type Waiter_wait_Params_List = capnp.StructList[Waiter_wait_Params]

// NewWaiter_wait_Params creates a new list of Waiter_wait_Params.
func NewWaiter_wait_Params_List(s *capnp.Segment, sz int32) (Waiter_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Params]{List: l}, err
}

// Waiter_wait_Params_Future is a wrapper for a Waiter_wait_Params promised by a client call.
type Waiter_wait_Params_Future struct{ *capnp.Future }

func (p Waiter_wait_Params_Future) Struct() (Waiter_wait_Params, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Params{s}, err
}

type Waiter_wait_Results struct{ capnp.Struct }

// Waiter_wait_Results_TypeID is the unique identifier for the type Waiter_wait_Results.
const Waiter_wait_Results_TypeID = 0x957555c94e5b1064

func NewWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results{st}, err
}

func NewRootWaiter_wait_Results(s *capnp.Segment) (Waiter_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Waiter_wait_Results{st}, err
}

func ReadRootWaiter_wait_Results(msg *capnp.Message) (Waiter_wait_Results, error) {
	root, err := msg.Root()
	return Waiter_wait_Results{root.Struct()}, err
}

func (s Waiter_wait_Results) String() string {
	str, _ := text.Marshal(0x957555c94e5b1064, s.Struct)
	return str
}

// Waiter_wait_Results_List is a list of Waiter_wait_Results.
type Waiter_wait_Results_List = capnp.StructList[Waiter_wait_Results]

// NewWaiter_wait_Results creates a new list of Waiter_wait_Results.
func NewWaiter_wait_Results_List(s *capnp.Segment, sz int32) (Waiter_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Waiter_wait_Results]{List: l}, err
}

// Waiter_wait_Results_Future is a wrapper for a Waiter_wait_Results promised by a client call.
type Waiter_wait_Results_Future struct{ *capnp.Future }

func (p Waiter_wait_Results_Future) Struct() (Waiter_wait_Results, error) {
	s, err := p.Future.Struct()
	return Waiter_wait_Results{s}, err
}

type Unix struct{ Client *capnp.Client }

// Unix_TypeID is the unique identifier for the type Unix.
const Unix_TypeID = 0x85f7549a53596cef

func (c Unix) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release
}

func (c Unix) AddRef() Unix {
	return Unix{
		Client: c.Client.AddRef(),
	}
}

func (c Unix) Release() {
	c.Client.Release()
}

// A Unix_Server is a Unix with a local implementation.
type Unix_Server interface {
	Exec(context.Context, Executor_exec) error
}

// Unix_NewServer creates a new Server from an implementation of Unix_Server.
func Unix_NewServer(s Unix_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Methods(nil, s), s, c, policy)
}

// Unix_ServerToClient creates a new Client from an implementation of Unix_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_ServerToClient(s Unix_Server, policy *server.Policy) Unix {
	return Unix{Client: capnp.NewClient(Unix_NewServer(s, policy))}
}

// Unix_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Methods(methods []server.Method, s Unix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bb307fa2f406fb,
			MethodID:      0,
			InterfaceName: "proc.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	return methods
}

type Unix_Command struct{ capnp.Struct }

// Unix_Command_TypeID is the unique identifier for the type Unix_Command.
const Unix_Command_TypeID = 0x8e898dedb95cdee4

func NewUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command{st}, err
}

func NewRootUnix_Command(s *capnp.Segment) (Unix_Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Unix_Command{st}, err
}

func ReadRootUnix_Command(msg *capnp.Message) (Unix_Command, error) {
	root, err := msg.Root()
	return Unix_Command{root.Struct()}, err
}

func (s Unix_Command) String() string {
	str, _ := text.Marshal(0x8e898dedb95cdee4, s.Struct)
	return str
}

func (s Unix_Command) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Unix_Command) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Unix_Command) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Unix_Command) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Unix_Command) Dir() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Unix_Command) HasDir() bool {
	return s.Struct.HasPtr(1)
}

func (s Unix_Command) DirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Unix_Command) SetDir(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Unix_Command) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Unix_Command) HasArgs() bool {
	return s.Struct.HasPtr(2)
}

func (s Unix_Command) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Unix_Command) Env() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s Unix_Command) HasEnv() bool {
	return s.Struct.HasPtr(3)
}

func (s Unix_Command) SetEnv(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Unix_Command) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Unix_Command) Stdin() Unix_StreamReader {
	p, _ := s.Struct.Ptr(4)
	return Unix_StreamReader{Client: p.Interface().Client()}
}

func (s Unix_Command) HasStdin() bool {
	return s.Struct.HasPtr(4)
}

func (s Unix_Command) SetStdin(v Unix_StreamReader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(4, in.ToPtr())
}

func (s Unix_Command) Stdout() Unix_StreamWriter {
	p, _ := s.Struct.Ptr(5)
	return Unix_StreamWriter{Client: p.Interface().Client()}
}

func (s Unix_Command) HasStdout() bool {
	return s.Struct.HasPtr(5)
}

func (s Unix_Command) SetStdout(v Unix_StreamWriter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(5, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(5, in.ToPtr())
}

func (s Unix_Command) Stderr() Unix_StreamWriter {
	p, _ := s.Struct.Ptr(6)
	return Unix_StreamWriter{Client: p.Interface().Client()}
}

func (s Unix_Command) HasStderr() bool {
	return s.Struct.HasPtr(6)
}

func (s Unix_Command) SetStderr(v Unix_StreamWriter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(6, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(6, in.ToPtr())
}

// Unix_Command_List is a list of Unix_Command.
type Unix_Command_List = capnp.StructList[Unix_Command]

// NewUnix_Command creates a new list of Unix_Command.
func NewUnix_Command_List(s *capnp.Segment, sz int32) (Unix_Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Unix_Command]{List: l}, err
}

// Unix_Command_Future is a wrapper for a Unix_Command promised by a client call.
type Unix_Command_Future struct{ *capnp.Future }

func (p Unix_Command_Future) Struct() (Unix_Command, error) {
	s, err := p.Future.Struct()
	return Unix_Command{s}, err
}

func (p Unix_Command_Future) Stdin() Unix_StreamReader {
	return Unix_StreamReader{Client: p.Future.Field(4, nil).Client()}
}

func (p Unix_Command_Future) Stdout() Unix_StreamWriter {
	return Unix_StreamWriter{Client: p.Future.Field(5, nil).Client()}
}

func (p Unix_Command_Future) Stderr() Unix_StreamWriter {
	return Unix_StreamWriter{Client: p.Future.Field(6, nil).Client()}
}

type Unix_Proc struct{ Client *capnp.Client }

// Unix_Proc_TypeID is the unique identifier for the type Unix_Proc.
const Unix_Proc_TypeID = 0xa56f29d54a3673af

func (c Unix_Proc) Signal(ctx context.Context, params func(Unix_Proc_signal_Params) error) (Unix_Proc_signal_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Unix_Proc_signal_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Unix_Proc_signal_Results_Future{Future: ans.Future()}, release
}
func (c Unix_Proc) Wait(ctx context.Context, params func(Waiter_wait_Params) error) (Waiter_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Waiter_wait_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Waiter_wait_Results_Future{Future: ans.Future()}, release
}

func (c Unix_Proc) AddRef() Unix_Proc {
	return Unix_Proc{
		Client: c.Client.AddRef(),
	}
}

func (c Unix_Proc) Release() {
	c.Client.Release()
}

// A Unix_Proc_Server is a Unix_Proc with a local implementation.
type Unix_Proc_Server interface {
	Signal(context.Context, Unix_Proc_signal) error

	Wait(context.Context, Waiter_wait) error
}

// Unix_Proc_NewServer creates a new Server from an implementation of Unix_Proc_Server.
func Unix_Proc_NewServer(s Unix_Proc_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_Proc_Methods(nil, s), s, c, policy)
}

// Unix_Proc_ServerToClient creates a new Client from an implementation of Unix_Proc_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_Proc_ServerToClient(s Unix_Proc_Server, policy *server.Policy) Unix_Proc {
	return Unix_Proc{Client: capnp.NewClient(Unix_Proc_NewServer(s, policy))}
}

// Unix_Proc_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_Proc_Methods(methods []server.Method, s Unix_Proc_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa56f29d54a3673af,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.Proc",
			MethodName:    "signal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Signal(ctx, Unix_Proc_signal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc66c9bda04b0f29e,
			MethodID:      0,
			InterfaceName: "proc.capnp:Waiter",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Waiter_wait{call})
		},
	})

	return methods
}

// Unix_Proc_signal holds the state for a server call to Unix_Proc.signal.
// See server.Call for documentation.
type Unix_Proc_signal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Unix_Proc_signal) Args() Unix_Proc_signal_Params {
	return Unix_Proc_signal_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Unix_Proc_signal) AllocResults() (Unix_Proc_signal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results{Struct: r}, err
}

type Unix_Proc_Signal uint16

// Unix_Proc_Signal_TypeID is the unique identifier for the type Unix_Proc_Signal.
const Unix_Proc_Signal_TypeID = 0x8441e8c774575aac

// Values of Unix_Proc_Signal.
const (
	Unix_Proc_Signal_sigINT  Unix_Proc_Signal = 0
	Unix_Proc_Signal_sigTERM Unix_Proc_Signal = 1
	Unix_Proc_Signal_sigKILL Unix_Proc_Signal = 2
)

// String returns the enum's constant name.
func (c Unix_Proc_Signal) String() string {
	switch c {
	case Unix_Proc_Signal_sigINT:
		return "sigINT"
	case Unix_Proc_Signal_sigTERM:
		return "sigTERM"
	case Unix_Proc_Signal_sigKILL:
		return "sigKILL"

	default:
		return ""
	}
}

// Unix_Proc_SignalFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Unix_Proc_SignalFromString(c string) Unix_Proc_Signal {
	switch c {
	case "sigINT":
		return Unix_Proc_Signal_sigINT
	case "sigTERM":
		return Unix_Proc_Signal_sigTERM
	case "sigKILL":
		return Unix_Proc_Signal_sigKILL

	default:
		return 0
	}
}

type Unix_Proc_Signal_List = capnp.EnumList[Unix_Proc_Signal]

func NewUnix_Proc_Signal_List(s *capnp.Segment, sz int32) (Unix_Proc_Signal_List, error) {
	return capnp.NewEnumList[Unix_Proc_Signal](s, sz)
}

type Unix_Proc_signal_Params struct{ capnp.Struct }

// Unix_Proc_signal_Params_TypeID is the unique identifier for the type Unix_Proc_signal_Params.
const Unix_Proc_signal_Params_TypeID = 0x9080163041c90a87

func NewUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params{st}, err
}

func NewRootUnix_Proc_signal_Params(s *capnp.Segment) (Unix_Proc_signal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Unix_Proc_signal_Params{st}, err
}

func ReadRootUnix_Proc_signal_Params(msg *capnp.Message) (Unix_Proc_signal_Params, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Params{root.Struct()}, err
}

func (s Unix_Proc_signal_Params) String() string {
	str, _ := text.Marshal(0x9080163041c90a87, s.Struct)
	return str
}

func (s Unix_Proc_signal_Params) Signal() Unix_Proc_Signal {
	return Unix_Proc_Signal(s.Struct.Uint16(0))
}

func (s Unix_Proc_signal_Params) SetSignal(v Unix_Proc_Signal) {
	s.Struct.SetUint16(0, uint16(v))
}

// Unix_Proc_signal_Params_List is a list of Unix_Proc_signal_Params.
type Unix_Proc_signal_Params_List = capnp.StructList[Unix_Proc_signal_Params]

// NewUnix_Proc_signal_Params creates a new list of Unix_Proc_signal_Params.
func NewUnix_Proc_signal_Params_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Params]{List: l}, err
}

// Unix_Proc_signal_Params_Future is a wrapper for a Unix_Proc_signal_Params promised by a client call.
type Unix_Proc_signal_Params_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Params_Future) Struct() (Unix_Proc_signal_Params, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Params{s}, err
}

type Unix_Proc_signal_Results struct{ capnp.Struct }

// Unix_Proc_signal_Results_TypeID is the unique identifier for the type Unix_Proc_signal_Results.
const Unix_Proc_signal_Results_TypeID = 0xfeda57ee26ad6825

func NewUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results{st}, err
}

func NewRootUnix_Proc_signal_Results(s *capnp.Segment) (Unix_Proc_signal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_Proc_signal_Results{st}, err
}

func ReadRootUnix_Proc_signal_Results(msg *capnp.Message) (Unix_Proc_signal_Results, error) {
	root, err := msg.Root()
	return Unix_Proc_signal_Results{root.Struct()}, err
}

func (s Unix_Proc_signal_Results) String() string {
	str, _ := text.Marshal(0xfeda57ee26ad6825, s.Struct)
	return str
}

// Unix_Proc_signal_Results_List is a list of Unix_Proc_signal_Results.
type Unix_Proc_signal_Results_List = capnp.StructList[Unix_Proc_signal_Results]

// NewUnix_Proc_signal_Results creates a new list of Unix_Proc_signal_Results.
func NewUnix_Proc_signal_Results_List(s *capnp.Segment, sz int32) (Unix_Proc_signal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Unix_Proc_signal_Results]{List: l}, err
}

// Unix_Proc_signal_Results_Future is a wrapper for a Unix_Proc_signal_Results promised by a client call.
type Unix_Proc_signal_Results_Future struct{ *capnp.Future }

func (p Unix_Proc_signal_Results_Future) Struct() (Unix_Proc_signal_Results, error) {
	s, err := p.Future.Struct()
	return Unix_Proc_signal_Results{s}, err
}

type Unix_StreamReader struct{ Client *capnp.Client }

// Unix_StreamReader_TypeID is the unique identifier for the type Unix_StreamReader.
const Unix_StreamReader_TypeID = 0xe13c59eb426d655c

func (c Unix_StreamReader) SetDst(ctx context.Context, params func(Unix_StreamReader_setDst_Params) error) (Unix_StreamReader_setDst_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe13c59eb426d655c,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.StreamReader",
			MethodName:    "setDst",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Unix_StreamReader_setDst_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Unix_StreamReader_setDst_Results_Future{Future: ans.Future()}, release
}

func (c Unix_StreamReader) AddRef() Unix_StreamReader {
	return Unix_StreamReader{
		Client: c.Client.AddRef(),
	}
}

func (c Unix_StreamReader) Release() {
	c.Client.Release()
}

// A Unix_StreamReader_Server is a Unix_StreamReader with a local implementation.
type Unix_StreamReader_Server interface {
	SetDst(context.Context, Unix_StreamReader_setDst) error
}

// Unix_StreamReader_NewServer creates a new Server from an implementation of Unix_StreamReader_Server.
func Unix_StreamReader_NewServer(s Unix_StreamReader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_StreamReader_Methods(nil, s), s, c, policy)
}

// Unix_StreamReader_ServerToClient creates a new Client from an implementation of Unix_StreamReader_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_StreamReader_ServerToClient(s Unix_StreamReader_Server, policy *server.Policy) Unix_StreamReader {
	return Unix_StreamReader{Client: capnp.NewClient(Unix_StreamReader_NewServer(s, policy))}
}

// Unix_StreamReader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_StreamReader_Methods(methods []server.Method, s Unix_StreamReader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe13c59eb426d655c,
			MethodID:      0,
			InterfaceName: "proc.capnp:Unix.StreamReader",
			MethodName:    "setDst",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetDst(ctx, Unix_StreamReader_setDst{call})
		},
	})

	return methods
}

// Unix_StreamReader_setDst holds the state for a server call to Unix_StreamReader.setDst.
// See server.Call for documentation.
type Unix_StreamReader_setDst struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Unix_StreamReader_setDst) Args() Unix_StreamReader_setDst_Params {
	return Unix_StreamReader_setDst_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Unix_StreamReader_setDst) AllocResults() (Unix_StreamReader_setDst_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_StreamReader_setDst_Results{Struct: r}, err
}

type Unix_StreamReader_setDst_Params struct{ capnp.Struct }

// Unix_StreamReader_setDst_Params_TypeID is the unique identifier for the type Unix_StreamReader_setDst_Params.
const Unix_StreamReader_setDst_Params_TypeID = 0xf7d1c8107546dad7

func NewUnix_StreamReader_setDst_Params(s *capnp.Segment) (Unix_StreamReader_setDst_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unix_StreamReader_setDst_Params{st}, err
}

func NewRootUnix_StreamReader_setDst_Params(s *capnp.Segment) (Unix_StreamReader_setDst_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unix_StreamReader_setDst_Params{st}, err
}

func ReadRootUnix_StreamReader_setDst_Params(msg *capnp.Message) (Unix_StreamReader_setDst_Params, error) {
	root, err := msg.Root()
	return Unix_StreamReader_setDst_Params{root.Struct()}, err
}

func (s Unix_StreamReader_setDst_Params) String() string {
	str, _ := text.Marshal(0xf7d1c8107546dad7, s.Struct)
	return str
}

func (s Unix_StreamReader_setDst_Params) Dst() Unix_StreamWriter {
	p, _ := s.Struct.Ptr(0)
	return Unix_StreamWriter{Client: p.Interface().Client()}
}

func (s Unix_StreamReader_setDst_Params) HasDst() bool {
	return s.Struct.HasPtr(0)
}

func (s Unix_StreamReader_setDst_Params) SetDst(v Unix_StreamWriter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Unix_StreamReader_setDst_Params_List is a list of Unix_StreamReader_setDst_Params.
type Unix_StreamReader_setDst_Params_List = capnp.StructList[Unix_StreamReader_setDst_Params]

// NewUnix_StreamReader_setDst_Params creates a new list of Unix_StreamReader_setDst_Params.
func NewUnix_StreamReader_setDst_Params_List(s *capnp.Segment, sz int32) (Unix_StreamReader_setDst_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Unix_StreamReader_setDst_Params]{List: l}, err
}

// Unix_StreamReader_setDst_Params_Future is a wrapper for a Unix_StreamReader_setDst_Params promised by a client call.
type Unix_StreamReader_setDst_Params_Future struct{ *capnp.Future }

func (p Unix_StreamReader_setDst_Params_Future) Struct() (Unix_StreamReader_setDst_Params, error) {
	s, err := p.Future.Struct()
	return Unix_StreamReader_setDst_Params{s}, err
}

func (p Unix_StreamReader_setDst_Params_Future) Dst() Unix_StreamWriter {
	return Unix_StreamWriter{Client: p.Future.Field(0, nil).Client()}
}

type Unix_StreamReader_setDst_Results struct{ capnp.Struct }

// Unix_StreamReader_setDst_Results_TypeID is the unique identifier for the type Unix_StreamReader_setDst_Results.
const Unix_StreamReader_setDst_Results_TypeID = 0x8278dbf22bb1ab9d

func NewUnix_StreamReader_setDst_Results(s *capnp.Segment) (Unix_StreamReader_setDst_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_StreamReader_setDst_Results{st}, err
}

func NewRootUnix_StreamReader_setDst_Results(s *capnp.Segment) (Unix_StreamReader_setDst_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Unix_StreamReader_setDst_Results{st}, err
}

func ReadRootUnix_StreamReader_setDst_Results(msg *capnp.Message) (Unix_StreamReader_setDst_Results, error) {
	root, err := msg.Root()
	return Unix_StreamReader_setDst_Results{root.Struct()}, err
}

func (s Unix_StreamReader_setDst_Results) String() string {
	str, _ := text.Marshal(0x8278dbf22bb1ab9d, s.Struct)
	return str
}

// Unix_StreamReader_setDst_Results_List is a list of Unix_StreamReader_setDst_Results.
type Unix_StreamReader_setDst_Results_List = capnp.StructList[Unix_StreamReader_setDst_Results]

// NewUnix_StreamReader_setDst_Results creates a new list of Unix_StreamReader_setDst_Results.
func NewUnix_StreamReader_setDst_Results_List(s *capnp.Segment, sz int32) (Unix_StreamReader_setDst_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Unix_StreamReader_setDst_Results]{List: l}, err
}

// Unix_StreamReader_setDst_Results_Future is a wrapper for a Unix_StreamReader_setDst_Results promised by a client call.
type Unix_StreamReader_setDst_Results_Future struct{ *capnp.Future }

func (p Unix_StreamReader_setDst_Results_Future) Struct() (Unix_StreamReader_setDst_Results, error) {
	s, err := p.Future.Struct()
	return Unix_StreamReader_setDst_Results{s}, err
}

type Unix_StreamWriter struct{ Client *capnp.Client }

// Unix_StreamWriter_TypeID is the unique identifier for the type Unix_StreamWriter.
const Unix_StreamWriter_TypeID = 0x9dc9fc28fe07475d

func (c Unix_StreamWriter) Send(ctx context.Context, params func(channel.Sender_send_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8bbed1438ea16ee,
			MethodID:      0,
			InterfaceName: "channel.capnp:Sender",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(channel.Sender_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}
func (c Unix_StreamWriter) Close(ctx context.Context, params func(channel.Closer_close_Params) error) (channel.Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfad0e4b80d3779c3,
			MethodID:      0,
			InterfaceName: "channel.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(channel.Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return channel.Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c Unix_StreamWriter) AddRef() Unix_StreamWriter {
	return Unix_StreamWriter{
		Client: c.Client.AddRef(),
	}
}

func (c Unix_StreamWriter) Release() {
	c.Client.Release()
}

// A Unix_StreamWriter_Server is a Unix_StreamWriter with a local implementation.
type Unix_StreamWriter_Server interface {
	Send(context.Context, channel.Sender_send) error

	Close(context.Context, channel.Closer_close) error
}

// Unix_StreamWriter_NewServer creates a new Server from an implementation of Unix_StreamWriter_Server.
func Unix_StreamWriter_NewServer(s Unix_StreamWriter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unix_StreamWriter_Methods(nil, s), s, c, policy)
}

// Unix_StreamWriter_ServerToClient creates a new Client from an implementation of Unix_StreamWriter_Server.
// The caller is responsible for calling Release on the returned Client.
func Unix_StreamWriter_ServerToClient(s Unix_StreamWriter_Server, policy *server.Policy) Unix_StreamWriter {
	return Unix_StreamWriter{Client: capnp.NewClient(Unix_StreamWriter_NewServer(s, policy))}
}

// Unix_StreamWriter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unix_StreamWriter_Methods(methods []server.Method, s Unix_StreamWriter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8bbed1438ea16ee,
			MethodID:      0,
			InterfaceName: "channel.capnp:Sender",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, channel.Sender_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfad0e4b80d3779c3,
			MethodID:      0,
			InterfaceName: "channel.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, channel.Closer_close{call})
		},
	})

	return methods
}

const schema_d78885a0de56b292 = "x\xda\x94Ukh\x1cU\x14>gfn\xee\x9a&" +
	"\xdd\xbd\xb9\x1bK%%\x10\xa2\xd8\x14\x97\xb4\xa1\x0a\x8b" +
	"\xb2I4.\xa95\xee\xe4ah\xad?\xc6\xec\xb0\x9d" +
	"\xb2\x8f83[#\x18\"\xc5\xa2E\xea\xa3\xe8\x8fT" +
	"\"R,\xe2\x8b\xa4b\xc1\xe2\x03\x15|\x04\xf4G\xd0" +
	"R\x8cXT*$\xd1\xfa\x88\x95\x82\x8f\x8e\xdc\xd9\x9d" +
	"\x9dI6\x15\xfbkw\xcf\xfd\xf6\xbb\xe7|\xe7;\xe7" +
	"\xb6\x7f!u*[\xeb\xa7kAR\x1f\"5\xce\xd4" +
	"\xab'\xb6,\x7f=v\x00\xd8&\x04P(@\xc7-" +
	"\xe4>\x04\xc5ym\xf7\xb0\xfd\xc9B\xd7#\xc0\x1a%" +
	"g\xda\xbaq\xc7\xe9\xcd\x85\xe3\x00\xc87\x93\xef\xf9v" +
	"B\x01\xf8Vr\x17\xa0\xf3Kv\xd7\xc0\xd1\xc1\x8b\x07" +
	"\x81\xad\x93\x9d#o\xdc}\xf6\x85\x83\x8f\x9d\x11\xc0\x1e" +
	"r\x80\xf7\x92$\x00\x1f'\x94\x8f\x93\x0d\x00\xceM\xca" +
	"3\xffl\xefl8\x0c,\x8a\x00\x04i\x04;\xa6H" +
	"-\x02\xf2\xe3$\x01\xe8\x9c;\xbb\xe7\xd4\xf9\xc3\x87\x9e" +
	"\x00\x16\x09P\x13*\xee\xfb\x88|\xc8?\x177w\xcc" +
	"\x92'\x11\xd0y\xb4v\xb6\xab\xfd\xea\x87\x9f\x02\xb5\x11" +
	"\xbd\xf4\xef\xa7\xd7\x08\xb6\x07\xa9`KG\xee\xe9\x9b\x1d" +
	"*>\x0b\xac\xa1|\xce'\xe9\x9f\xa08\xbf?.\xbf" +
	"\xb7\xa3i\xffd\xe0`\x9c.\x83\xe2\xdc\x9b\xa4\x97\xae" +
	"\xff{v\x0aXD\xf6\xef\x07\xe4\x1a]\xe297\x0d" +
	"\x83RnPQME\x96\xd5\xe0C\xf4\x15\xfe\xb4\x80" +
	"\xf0I\x9a\xe4\x1f\xb8\xe0\xa5-M\xeb^\x9c\xc9L\x07" +
	"K?A%\x91\xecI7\xd9\xe7\x97g\x94\xf9\xe7\xb2" +
	"\x1fW\x09y\x9a\x1e\xe1\xdf\xb8W\x7fE\x93\x1cC\x14" +
	"\xc0\xd9\xa3\xe7\xba\x7f\xdcu\xf3wUW/\xd2%\xfe" +
	"\x87\x0b\xfe\x8d&\xf9F\x17\xfcW\xcd\x85c\x13\xedo" +
	"/\xacb\x86\x08r\x0c\x1d\xe3W\x09\x10'\xa1$\x1f" +
	"\x0aQ>\x14\x0a;g\xe6o/F>\x9d\xbbX\xb2" +
	"\x05A!loh\xb7\xc8u($r\xbdv\xef\xeb" +
	"\xd7\xfd<<\x7f\x09X\xa3'|1\xd4\x82\xf0\xb23" +
	"j\x16Fb#\xda\xa8\x92\x1f\x8d\x0f\xe5\x8d\xb1\xd8\x80" +
	"m\xeaZ\xae_\xd7\xd2\xba\x19\xb3t\xfb6\xcbn\xed" +
	"\xd7\xad\"\xcd\xdaV\x05-y\xe8\x94\x08\x0c\x18\x19\x9a" +
	"\xd7\xb2)D\xb5\x0e%\x00\xb6)\x0e\x80\xc8\x1a\xbb\x01" +
	"Pb\xf5\xdd\x00\x09\xcb\xc8\xf4\xf6\x0dNXFf\xb0" +
	"\xa7\xffN\xf1yG\xef\xce\x9d\x15B,\x13\x82\x1a\xc1" +
	"\xa0\xab6v\x07\xba\xd6\xd8\x16\xd0\x91\xed\x0b4\x9f\xed" +
	"\x9b\xb8\xb5\x90\xcbi\xf9tXd\xe4xE@X\x94" +
	"Q\xfe9lB\xd8\xb0u3%\x13UA\xf4e\xee" +
	"D\x86\xcd\xaa\"\x05B\x00\x0c7\x08\x14bJF\x8c" +
	"\xf8)\x01V\x92\x96\xf3\xa3\xf1\x9e1}\xa4h\x17\xcc" +
	"\x98>\xa6\x8f\xb8Bem\x0b@Ud\x05@A\x00" +
	"V\xdf\x06\xa0\x86dT\xa3\x12\x86\xc5_\x91\xf9\xde\x11" +
	"2\x05\x18+\xba\x96\xab\x01\xa1iS\x85\xea\xa4\xa0\x9a" +
	"\x91Q}GB\x86\x18\x15S\xc4N\xb5\x00\xa8o\xca" +
	"\xa8\xbe/!\x93\xa4\xa8\xdb\x81w\x05\xf2-\x19\xd5/" +
	"%d\xb2\x1cE\x19\x80\xcd\x09\xe4g2\xaa\x0b\x122" +
	"E\x89\xa2\x02\xc0~\xd8\x06\xa0~+\xa3\xfa\x93\x84\x8c" +
	"\x90(\x12\x00\xb6\x18\x07P\xcf\xc9\xa8\xfe*!\xab\xa9" +
	"\x89b\x0d\x00;/\x82\x0b2\xaa\x17D!\x9a\xbd\x17" +
	"\xeb@\xc2:@\x9a6L\xef{X33\x16\xae\x07" +
	"W6\x11[\x0fH\xf5\xfc\xfeU\xa1f\xcbN\x1by" +
	"d~CKJ$,;](\xda\xc8\xfc\xe6\xfa\x07" +
	"\xbaiV\x1f\xac\xe8\x86\xefI\xcb\xc8\xe4\xb5lkJ" +
	"359g\x05\xdb\x11\xf7\xdb\x91(\xa10\xec\xafO" +
	"@\x0c\xafj\xc8\xb0&\\\x13{@3\xec\xd6\xfeD" +
	"\xa9\xc3\x97\x05\xa4\x9a5S\xcb\xad1)\x9e\x07K\x16" +
	"\x14\xb6*\xb9\xb0o1:~t\xee\xa5\xc5\x80\x0b+" +
	"\xa1U.\xac\x07\xa9j`b\xae\xe1]&\xff\x09\xc0" +
	"xb\xc0\xadLUd\x02PY\xbc\xe8\xed\x01\xc6\xe2" +
	" 1B\xcb\x02t\xa2K\xe0\xbb\x12\xfe\xc3\xe3)\xb7" +
	"\xc0\x15\x0e\xdf\xe6K\xda<*\x8e\xb1\x01W\x0c\x136" +
	"\x044EO2\x14:\x94S\xf46<zo\x00c" +
	"mn\x8aa!k'\xa6\x10/\xa7i\xbf\xeeN\xb9" +
	"\xcf\xe5\xadC\xf4\x9eK\xbf\\w\x9f\xaddC\xafB" +
	"j\x17\x02$\xde\xfeG\xef\x0d\x14\x09AW\x1dv5" +
	"!\xbb\x81\x86\x85\x16Uk\xc3\x1d\xc8\xb5\x82\xee\x95]" +
	"\x0a2l\xc0\xc1\xff\xb7t\xd7\xb0n\x8b\xaf3M[" +
	"\xf6\x95\x0e\x83\xb7\xc6\xff\x0d\x00\x00\xff\xff\xe6\x0fl9"

func init() {
	schemas.Register(schema_d78885a0de56b292,
		0x8278dbf22bb1ab9d,
		0x8441e8c774575aac,
		0x85f7549a53596cef,
		0x8d124035fd940437,
		0x8e898dedb95cdee4,
		0x9080163041c90a87,
		0x957555c94e5b1064,
		0x99761c4abe038bf3,
		0x9dc9fc28fe07475d,
		0xa56f29d54a3673af,
		0xaf67b0a40b1c2bea,
		0xc66c9bda04b0f29e,
		0xe13c59eb426d655c,
		0xe8bb307fa2f406fb,
		0xf7d1c8107546dad7,
		0xfeda57ee26ad6825)
}
