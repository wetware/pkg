// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
)

type Topic struct{ Client *capnp.Client }

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) (Topic_publish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_publish_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release
}

func (c Topic) AddRef() Topic {
	return Topic{
		Client: c.Client.AddRef(),
	}
}

func (c Topic) Release() {
	c.Client.Release()
}

// A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c, policy)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server, policy *server.Policy) Topic {
	return Topic{Client: capnp.NewClient(Topic_NewServer(s, policy))}
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (Topic_publish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{Struct: r}, err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{Struct: r}, err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{Struct: r}, err
}

type Topic_publish_Params struct{ capnp.Struct }

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params{root.Struct()}, err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, s.Struct)
	return str
}

func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params]{List: l}, err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (p Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Params{s}, err
}

type Topic_publish_Results struct{ capnp.Struct }

// Topic_publish_Results_TypeID is the unique identifier for the type Topic_publish_Results.
const Topic_publish_Results_TypeID = 0x9d3775c65b79b54c

func NewTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func NewRootTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func ReadRootTopic_publish_Results(msg *capnp.Message) (Topic_publish_Results, error) {
	root, err := msg.Root()
	return Topic_publish_Results{root.Struct()}, err
}

func (s Topic_publish_Results) String() string {
	str, _ := text.Marshal(0x9d3775c65b79b54c, s.Struct)
	return str
}

// Topic_publish_Results_List is a list of Topic_publish_Results.
type Topic_publish_Results_List = capnp.StructList[Topic_publish_Results]

// NewTopic_publish_Results creates a new list of Topic_publish_Results.
func NewTopic_publish_Results_List(s *capnp.Segment, sz int32) (Topic_publish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_publish_Results]{List: l}, err
}

// Topic_publish_Results_Future is a wrapper for a Topic_publish_Results promised by a client call.
type Topic_publish_Results_Future struct{ *capnp.Future }

func (p Topic_publish_Results_Future) Struct() (Topic_publish_Results, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Results{s}, err
}

type Topic_subscribe_Params struct{ capnp.Struct }

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_subscribe_Params{st}, err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_subscribe_Params{st}, err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params{root.Struct()}, err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, s.Struct)
	return str
}

func (s Topic_subscribe_Params) Chan() channel.Sender {
	p, _ := s.Struct.Ptr(0)
	return channel.Sender{Client: p.Interface().Client()}
}

func (s Topic_subscribe_Params) HasChan() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_subscribe_Params) SetChan(v channel.Sender) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_subscribe_Params]{List: l}, err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (p Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Params{s}, err
}

func (p Topic_subscribe_Params_Future) Chan() channel.Sender {
	return channel.Sender{Client: p.Future.Field(0, nil).Client()}
}

type Topic_subscribe_Results struct{ capnp.Struct }

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results{root.Struct()}, err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, s.Struct)
	return str
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results]{List: l}, err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (p Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Results{s}, err
}

type Topic_name_Params struct{ capnp.Struct }

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params{root.Struct()}, err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, s.Struct)
	return str
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params]{List: l}, err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (p Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	s, err := p.Future.Struct()
	return Topic_name_Params{s}, err
}

type Topic_name_Results struct{ capnp.Struct }

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results{root.Struct()}, err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, s.Struct)
	return str
}

func (s Topic_name_Results) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results]{List: l}, err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (p Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	s, err := p.Future.Struct()
	return Topic_name_Results{s}, err
}

type PubSub struct{ Client *capnp.Client }

// PubSub_TypeID is the unique identifier for the type PubSub.
const PubSub_TypeID = 0xf1cc149f1c06e50e

func (c PubSub) Join(ctx context.Context, params func(PubSub_join_Params) error) (PubSub_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PubSub_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PubSub_join_Results_Future{Future: ans.Future()}, release
}

func (c PubSub) AddRef() PubSub {
	return PubSub{
		Client: c.Client.AddRef(),
	}
}

func (c PubSub) Release() {
	c.Client.Release()
}

// A PubSub_Server is a PubSub with a local implementation.
type PubSub_Server interface {
	Join(context.Context, PubSub_join) error
}

// PubSub_NewServer creates a new Server from an implementation of PubSub_Server.
func PubSub_NewServer(s PubSub_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PubSub_Methods(nil, s), s, c, policy)
}

// PubSub_ServerToClient creates a new Client from an implementation of PubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func PubSub_ServerToClient(s PubSub_Server, policy *server.Policy) PubSub {
	return PubSub{Client: capnp.NewClient(PubSub_NewServer(s, policy))}
}

// PubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PubSub_Methods(methods []server.Method, s PubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, PubSub_join{call})
		},
	})

	return methods
}

// PubSub_join holds the state for a server call to PubSub.join.
// See server.Call for documentation.
type PubSub_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PubSub_join) Args() PubSub_join_Params {
	return PubSub_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PubSub_join) AllocResults() (PubSub_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{Struct: r}, err
}

type PubSub_join_Params struct{ capnp.Struct }

// PubSub_join_Params_TypeID is the unique identifier for the type PubSub_join_Params.
const PubSub_join_Params_TypeID = 0xfb4016d002794da7

func NewPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func NewRootPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func ReadRootPubSub_join_Params(msg *capnp.Message) (PubSub_join_Params, error) {
	root, err := msg.Root()
	return PubSub_join_Params{root.Struct()}, err
}

func (s PubSub_join_Params) String() string {
	str, _ := text.Marshal(0xfb4016d002794da7, s.Struct)
	return str
}

func (s PubSub_join_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PubSub_join_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PubSub_join_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// PubSub_join_Params_List is a list of PubSub_join_Params.
type PubSub_join_Params_List = capnp.StructList[PubSub_join_Params]

// NewPubSub_join_Params creates a new list of PubSub_join_Params.
func NewPubSub_join_Params_List(s *capnp.Segment, sz int32) (PubSub_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Params]{List: l}, err
}

// PubSub_join_Params_Future is a wrapper for a PubSub_join_Params promised by a client call.
type PubSub_join_Params_Future struct{ *capnp.Future }

func (p PubSub_join_Params_Future) Struct() (PubSub_join_Params, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Params{s}, err
}

type PubSub_join_Results struct{ capnp.Struct }

// PubSub_join_Results_TypeID is the unique identifier for the type PubSub_join_Results.
const PubSub_join_Results_TypeID = 0x9f6c50fbc67b1d88

func NewPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func NewRootPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func ReadRootPubSub_join_Results(msg *capnp.Message) (PubSub_join_Results, error) {
	root, err := msg.Root()
	return PubSub_join_Results{root.Struct()}, err
}

func (s PubSub_join_Results) String() string {
	str, _ := text.Marshal(0x9f6c50fbc67b1d88, s.Struct)
	return str
}

func (s PubSub_join_Results) Topic() Topic {
	p, _ := s.Struct.Ptr(0)
	return Topic{Client: p.Interface().Client()}
}

func (s PubSub_join_Results) HasTopic() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Results) SetTopic(v Topic) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// PubSub_join_Results_List is a list of PubSub_join_Results.
type PubSub_join_Results_List = capnp.StructList[PubSub_join_Results]

// NewPubSub_join_Results creates a new list of PubSub_join_Results.
func NewPubSub_join_Results_List(s *capnp.Segment, sz int32) (PubSub_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Results]{List: l}, err
}

// PubSub_join_Results_Future is a wrapper for a PubSub_join_Results promised by a client call.
type PubSub_join_Results_Future struct{ *capnp.Future }

func (p PubSub_join_Results_Future) Struct() (PubSub_join_Results, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Results{s}, err
}

func (p PubSub_join_Results_Future) Topic() Topic {
	return Topic{Client: p.Future.Field(0, nil).Client()}
}

const schema_f9d8a0180405d9ed = "x\xda\x8cS?h\x13Q\x18\xff\xbe\xf7]r\"\x89" +
	"\xe9\xf3b\xb1R)\x94*\x92!\xda\x0aV\x1dLP" +
	"D\x07\x85\xbbT\x04\xedt\x17\x82=\xcd\x9f#\x97W" +
	"\x08\x0e.\x1d\xe2X\\\xa4 \x15\x17\x15\x17\x1d:\xb9" +
	"\xa7\x88\x15\x14,\xd8\xc1Q\xb0B\x95\x80K\xad\xf0\xe4" +
	"%^\x92\x1a\x8d\xdd\x0e\xde\x8f\xdf\xdf\xef\x8e\xcdbZ" +
	"\x1b\x8fN\x86\x81Y\x17Ca9\xb12\xf2j\xe1\x84" +
	"7\x07\xdc@\x00M\x078\x8e\x94@\xd0\xe4\xb9\xb9\xd7" +
	"\xd5\xda\xbd\x81Z\xeb%\x84\xeai\x9d\xedE@\xa3\xc1" +
	"R\x80\xf2\xf9\xad\x81\xa3G\x9e\x16\xef\x03\x8f\x92\xdcX" +
	"\x0bi\xfb\x1f~\xd8\x04@\x83\xd3\x821D:\x80\xb1" +
	"\x8f\x96\x8dy\xf5%/-U\xa7\xebb\xf2A\x97N" +
	"\x95\x0e(\x9d\xda\xc1\xdb\xf5-3\xbf\x08<\xde\xd6\xb1" +
	"i\xb7\xd2qI\xe9<\x99\xfeV\x12\xf5\xf2r\xb7\x91" +
	"\xbb4\xaa\x00\xf3M@\xea\xf0\xd5\xe1g\xd7gW\xbb" +
	"\x01/\x88)\xc0R\x13\xb0\xe7Sxx1\xbe\xd2\xe8" +
	"q\xbaJ\x8f\x8c\x8fM\xa7kt\xc1@eK\xeag" +
	"\xde\x7f\xdf,\xfdlt\x9c\x1a\xeb\xf4\x034\xf9\xf8r" +
	"\x95\xbd\x1dLou\x1b}\xd3\x92yG)\xb8&=" +
	"\xe1\xf8\xc2If\xc9\xf6\x8a\xde\xe9+%\xcf\xcd&}" +
	"\xe1\xf8\xd9\xb2\xeb\xe4\xc629?&\xf2\x15\xff\xaf0" +
	"O8y\xd7\x9f\x193\xed\xb2]@\xdf\xd2H\x03\xd0" +
	"\x10\x80GG\x01\xac]\x84V\x9c\xa1^\xf0o`\x14" +
	"\x18F\x01\xdb4\x18\xd0\x90\x9b5\x11\xad\x08\x85\x00\xda" +
	"\xebaP<\xb7\xce\x02\xe3\xe7u\xec\x14\x8a\xc1\xf8\xfc" +
	"T\x06\x18\x1f\xd7\x91\xb5\xd3cP*?\x94\x00\xc6\x87" +
	"\xf4;\xbf-\xa6Q\x06\x99\x00si\x8c\x15\xedB." +
	"\x8d&b\xdf`\x99\x9c/\xf2\xd4\x93\xde\x14\xce\x94p" +
	"\x927Kn\xb1\x05\xa9\xf8\x00\xdd\xe9':\xe9G*" +
	"\x8a\x11y\xe7\xf0\x00\x91\x03\xfe\xa7w\xd3.\xebva" +
	"[\xa5\x89\x0ei,;c\x17\x91\xcb\xaf\x83_N\xc6" +
	"7^~\xee\xc7\xa9\x92\xb6]\xfe\x8bO\x810\x02\x0c" +
	"#=\x1b\x99\xc2\xd1\xa7\x84\xa3F\xd2\x9a#\x05\x17\x85" +
	"\xc1?\xc0\xb9*;\xa4\xc7T!\xdbKe\x7f\x1aI" +
	"5o\xa5_\xa1-\xc0\x8e\x9c\xfe\x0a\x00\x00\xff\xffb" +
	"o!\xb9"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0x8470369ac91fcc32,
		0x8810938879cb8443,
		0x986ea9282f106bb0,
		0x9d3775c65b79b54c,
		0x9f6c50fbc67b1d88,
		0xc772c6756fef5ba8,
		0xd5765aab1c56263f,
		0xf1cc149f1c06e50e,
		0xf1fc6ff9f4d43e07,
		0xfb4016d002794da7)
}
