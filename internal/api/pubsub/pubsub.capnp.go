// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type Topic capnp.Client

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release

}

func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release

}

func (c Topic) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Topic) String() string {
	return "Topic(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Topic) AddRef() Topic {
	return Topic(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Topic) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Topic) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Topic) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Topic) DecodeFromPtr(p capnp.Ptr) Topic {
	return Topic(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Topic) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Topic) IsSame(other Topic) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Topic) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Topic) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server) Topic {
	return Topic(capnp.NewClient(Topic_NewServer(s)))
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(r), err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(r), err
}

// Topic_List is a list of Topic.
type Topic_List = capnp.CapList[Topic]

// NewTopic creates a new list of Topic.
func NewTopic_List(s *capnp.Segment, sz int32) (Topic_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Topic](l), err
}

type Topic_Consumer capnp.Client

// Topic_Consumer_TypeID is the unique identifier for the type Topic_Consumer.
const Topic_Consumer_TypeID = 0xd72d37c8b6fbef23

func (c Topic_Consumer) Consume(ctx context.Context, params func(Topic_Consumer_consume_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd72d37c8b6fbef23,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic.Consumer",
			MethodName:    "consume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_Consumer_consume_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c Topic_Consumer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Topic_Consumer) String() string {
	return "Topic_Consumer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Topic_Consumer) AddRef() Topic_Consumer {
	return Topic_Consumer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Topic_Consumer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Topic_Consumer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Topic_Consumer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Topic_Consumer) DecodeFromPtr(p capnp.Ptr) Topic_Consumer {
	return Topic_Consumer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Topic_Consumer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Topic_Consumer) IsSame(other Topic_Consumer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Topic_Consumer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Topic_Consumer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Topic_Consumer_Server is a Topic_Consumer with a local implementation.
type Topic_Consumer_Server interface {
	Consume(context.Context, Topic_Consumer_consume) error
}

// Topic_Consumer_NewServer creates a new Server from an implementation of Topic_Consumer_Server.
func Topic_Consumer_NewServer(s Topic_Consumer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Consumer_Methods(nil, s), s, c)
}

// Topic_Consumer_ServerToClient creates a new Client from an implementation of Topic_Consumer_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_Consumer_ServerToClient(s Topic_Consumer_Server) Topic_Consumer {
	return Topic_Consumer(capnp.NewClient(Topic_Consumer_NewServer(s)))
}

// Topic_Consumer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Consumer_Methods(methods []server.Method, s Topic_Consumer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd72d37c8b6fbef23,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic.Consumer",
			MethodName:    "consume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Consume(ctx, Topic_Consumer_consume{call})
		},
	})

	return methods
}

// Topic_Consumer_consume holds the state for a server call to Topic_Consumer.consume.
// See server.Call for documentation.
type Topic_Consumer_consume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_Consumer_consume) Args() Topic_Consumer_consume_Params {
	return Topic_Consumer_consume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Topic_Consumer_consume) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// Topic_Consumer_List is a list of Topic_Consumer.
type Topic_Consumer_List = capnp.CapList[Topic_Consumer]

// NewTopic_Consumer creates a new list of Topic_Consumer.
func NewTopic_Consumer_List(s *capnp.Segment, sz int32) (Topic_Consumer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Topic_Consumer](l), err
}

type Topic_Consumer_consume_Params capnp.Struct

// Topic_Consumer_consume_Params_TypeID is the unique identifier for the type Topic_Consumer_consume_Params.
const Topic_Consumer_consume_Params_TypeID = 0xe7745ab0f47beb88

func NewTopic_Consumer_consume_Params(s *capnp.Segment) (Topic_Consumer_consume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_Consumer_consume_Params(st), err
}

func NewRootTopic_Consumer_consume_Params(s *capnp.Segment) (Topic_Consumer_consume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_Consumer_consume_Params(st), err
}

func ReadRootTopic_Consumer_consume_Params(msg *capnp.Message) (Topic_Consumer_consume_Params, error) {
	root, err := msg.Root()
	return Topic_Consumer_consume_Params(root.Struct()), err
}

func (s Topic_Consumer_consume_Params) String() string {
	str, _ := text.Marshal(0xe7745ab0f47beb88, capnp.Struct(s))
	return str
}

func (s Topic_Consumer_consume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_Consumer_consume_Params) DecodeFromPtr(p capnp.Ptr) Topic_Consumer_consume_Params {
	return Topic_Consumer_consume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_Consumer_consume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_Consumer_consume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_Consumer_consume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_Consumer_consume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_Consumer_consume_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_Consumer_consume_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_Consumer_consume_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Topic_Consumer_consume_Params_List is a list of Topic_Consumer_consume_Params.
type Topic_Consumer_consume_Params_List = capnp.StructList[Topic_Consumer_consume_Params]

// NewTopic_Consumer_consume_Params creates a new list of Topic_Consumer_consume_Params.
func NewTopic_Consumer_consume_Params_List(s *capnp.Segment, sz int32) (Topic_Consumer_consume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_Consumer_consume_Params](l), err
}

// Topic_Consumer_consume_Params_Future is a wrapper for a Topic_Consumer_consume_Params promised by a client call.
type Topic_Consumer_consume_Params_Future struct{ *capnp.Future }

func (f Topic_Consumer_consume_Params_Future) Struct() (Topic_Consumer_consume_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_Consumer_consume_Params(p.Struct()), err
}

type Topic_publish_Params capnp.Struct

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params(st), err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params(root.Struct()), err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, capnp.Struct(s))
	return str
}

func (s Topic_publish_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_publish_Params) DecodeFromPtr(p capnp.Ptr) Topic_publish_Params {
	return Topic_publish_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_publish_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_publish_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_publish_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_publish_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params](l), err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (f Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_publish_Params(p.Struct()), err
}

type Topic_subscribe_Params capnp.Struct

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Topic_subscribe_Params(st), err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params(root.Struct()), err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Params) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Params {
	return Topic_subscribe_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_subscribe_Params) Consumer() Topic_Consumer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Topic_Consumer(p.Interface().Client())
}

func (s Topic_subscribe_Params) HasConsumer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_subscribe_Params) SetConsumer(v Topic_Consumer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Topic_subscribe_Params) Buf() uint16 {
	return capnp.Struct(s).Uint16(0) ^ 32
}

func (s Topic_subscribe_Params) SetBuf(v uint16) {
	capnp.Struct(s).SetUint16(0, v^32)
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Topic_subscribe_Params](l), err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (f Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_subscribe_Params(p.Struct()), err
}
func (p Topic_subscribe_Params_Future) Consumer() Topic_Consumer {
	return Topic_Consumer(p.Future.Field(0, nil).Client())
}

type Topic_subscribe_Results capnp.Struct

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results(st), err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results(root.Struct()), err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, capnp.Struct(s))
	return str
}

func (s Topic_subscribe_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_subscribe_Results) DecodeFromPtr(p capnp.Ptr) Topic_subscribe_Results {
	return Topic_subscribe_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_subscribe_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_subscribe_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_subscribe_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_subscribe_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results](l), err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (f Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	p, err := f.Future.Ptr()
	return Topic_subscribe_Results(p.Struct()), err
}

type Topic_name_Params capnp.Struct

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params(st), err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params(root.Struct()), err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, capnp.Struct(s))
	return str
}

func (s Topic_name_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Params) DecodeFromPtr(p capnp.Ptr) Topic_name_Params {
	return Topic_name_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params](l), err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (f Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	p, err := f.Future.Ptr()
	return Topic_name_Params(p.Struct()), err
}

type Topic_name_Results capnp.Struct

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results(st), err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results(root.Struct()), err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, capnp.Struct(s))
	return str
}

func (s Topic_name_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic_name_Results) DecodeFromPtr(p capnp.Ptr) Topic_name_Results {
	return Topic_name_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic_name_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic_name_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic_name_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic_name_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic_name_Results) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results](l), err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (f Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	p, err := f.Future.Ptr()
	return Topic_name_Results(p.Struct()), err
}

type Router capnp.Client

// Router_TypeID is the unique identifier for the type Router.
const Router_TypeID = 0xde50b3e61b766f3a

func (c Router) Join(ctx context.Context, params func(Router_join_Params) error) (Router_join_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xde50b3e61b766f3a,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Router",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Router_join_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Router_join_Results_Future{Future: ans.Future()}, release

}

func (c Router) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Router) String() string {
	return "Router(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Router) AddRef() Router {
	return Router(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Router) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Router) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Router) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Router) DecodeFromPtr(p capnp.Ptr) Router {
	return Router(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Router) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Router) IsSame(other Router) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Router) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Router) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Router_Server is a Router with a local implementation.
type Router_Server interface {
	Join(context.Context, Router_join) error
}

// Router_NewServer creates a new Server from an implementation of Router_Server.
func Router_NewServer(s Router_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Router_Methods(nil, s), s, c)
}

// Router_ServerToClient creates a new Client from an implementation of Router_Server.
// The caller is responsible for calling Release on the returned Client.
func Router_ServerToClient(s Router_Server) Router {
	return Router(capnp.NewClient(Router_NewServer(s)))
}

// Router_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Router_Methods(methods []server.Method, s Router_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xde50b3e61b766f3a,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Router",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Router_join{call})
		},
	})

	return methods
}

// Router_join holds the state for a server call to Router.join.
// See server.Call for documentation.
type Router_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Router_join) Args() Router_join_Params {
	return Router_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Router_join) AllocResults() (Router_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(r), err
}

// Router_List is a list of Router.
type Router_List = capnp.CapList[Router]

// NewRouter creates a new list of Router.
func NewRouter_List(s *capnp.Segment, sz int32) (Router_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Router](l), err
}

type Router_join_Params capnp.Struct

// Router_join_Params_TypeID is the unique identifier for the type Router_join_Params.
const Router_join_Params_TypeID = 0xfb2fed6504f78754

func NewRouter_join_Params(s *capnp.Segment) (Router_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Params(st), err
}

func NewRootRouter_join_Params(s *capnp.Segment) (Router_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Params(st), err
}

func ReadRootRouter_join_Params(msg *capnp.Message) (Router_join_Params, error) {
	root, err := msg.Root()
	return Router_join_Params(root.Struct()), err
}

func (s Router_join_Params) String() string {
	str, _ := text.Marshal(0xfb2fed6504f78754, capnp.Struct(s))
	return str
}

func (s Router_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Router_join_Params) DecodeFromPtr(p capnp.Ptr) Router_join_Params {
	return Router_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Router_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Router_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Router_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Router_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Router_join_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Router_join_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Router_join_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Router_join_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Router_join_Params_List is a list of Router_join_Params.
type Router_join_Params_List = capnp.StructList[Router_join_Params]

// NewRouter_join_Params creates a new list of Router_join_Params.
func NewRouter_join_Params_List(s *capnp.Segment, sz int32) (Router_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Router_join_Params](l), err
}

// Router_join_Params_Future is a wrapper for a Router_join_Params promised by a client call.
type Router_join_Params_Future struct{ *capnp.Future }

func (f Router_join_Params_Future) Struct() (Router_join_Params, error) {
	p, err := f.Future.Ptr()
	return Router_join_Params(p.Struct()), err
}

type Router_join_Results capnp.Struct

// Router_join_Results_TypeID is the unique identifier for the type Router_join_Results.
const Router_join_Results_TypeID = 0xe8a6b1cad09d4625

func NewRouter_join_Results(s *capnp.Segment) (Router_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(st), err
}

func NewRootRouter_join_Results(s *capnp.Segment) (Router_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Router_join_Results(st), err
}

func ReadRootRouter_join_Results(msg *capnp.Message) (Router_join_Results, error) {
	root, err := msg.Root()
	return Router_join_Results(root.Struct()), err
}

func (s Router_join_Results) String() string {
	str, _ := text.Marshal(0xe8a6b1cad09d4625, capnp.Struct(s))
	return str
}

func (s Router_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Router_join_Results) DecodeFromPtr(p capnp.Ptr) Router_join_Results {
	return Router_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Router_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Router_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Router_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Router_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Router_join_Results) Topic() Topic {
	p, _ := capnp.Struct(s).Ptr(0)
	return Topic(p.Interface().Client())
}

func (s Router_join_Results) HasTopic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Router_join_Results) SetTopic(v Topic) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Router_join_Results_List is a list of Router_join_Results.
type Router_join_Results_List = capnp.StructList[Router_join_Results]

// NewRouter_join_Results creates a new list of Router_join_Results.
func NewRouter_join_Results_List(s *capnp.Segment, sz int32) (Router_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Router_join_Results](l), err
}

// Router_join_Results_Future is a wrapper for a Router_join_Results promised by a client call.
type Router_join_Results_Future struct{ *capnp.Future }

func (f Router_join_Results_Future) Struct() (Router_join_Results, error) {
	p, err := f.Future.Ptr()
	return Router_join_Results(p.Struct()), err
}
func (p Router_join_Results_Future) Topic() Topic {
	return Topic(p.Future.Field(0, nil).Client())
}

const schema_f9d8a0180405d9ed = "x\xda\x94\x93MHTQ\x14\xc7\xcfy\xf7\x8eO\xc2" +
	"Ao\xd7\xa8H\xb1L\xc3\x86\x1cS\xa3\x0f\xa1fJ" +
	"L\x92\x82\xb9\"\x81F\xc4\xcc\xf0\xaa)\xdf\xcc\xf4\xde" +
	"<EZ\xb81r\xd7\xa2M\x0aA\x05E\xd2F\x89" +
	"j\x15\xd4&\xfb\x84\x16E\xb5i\xd1\xa2\x82\x10\x09\x84" +
	"0\x83\x17\xf7\x8d\xef\xc3\x92>v\x03\xf7\xcc\xff\xff?" +
	"\xbf\xf3\x7f[\xefa\x9c6\x87/\x94\x80\"\x0e\x86J" +
	"\xec\x96\xe75O\xc6\xb7\xe7G\x80q\x04\xa0*@k" +
	"#\x89 P\xbb}\xe4\xd9\xd0\xe8\xc5\x8a\xd1\xe2K\x08" +
	"\xe5\xd3*\xb2\x12\x01y5\x89\x01\xda\x93\xa7+\x9a\x1a" +
	"&\xb2\x97\x80\x85\x89=\xf3.D\xd7\\y;\x0f\x80" +
	"|7\x19\xe7\x1dd5\x00\x17d\x9a\xbf *\x80}" +
	"\xf3\xc8l\xcezdL\x83\xe0\xe8\xc9\xdd!\xb5R\xee" +
	">\x19\x04\xb4c\x9b\x0eW\xdd\xea\x1bx\x1d\xf4\xab\xa6" +
	"\x8a\x1c\xd8@\xa5\xdf\xc6\xd9\x85\xbb\x8fw4\xbe\x01\xc6" +
	"\x89o\x0e\xc8\xf7\xd2\x0f\xfc\x90\x8c\xce\x0f\xd0N~F" +
	"\xfe\xb2\xdbr\x03\xeb>\xdeN\xbc\xff-\\/\xbd\xc6" +
	"\x93\xce\xf0Q\xda\xc9\xcf9\xc3\xa3_\xce\xceM\xf6\x15" +
	">\x01\xab\xf2\xacu\xda'\xad\x87\x1c\xeb\xfa\xfd\x97_" +
	">\x9d\xba\xf1\x19X\xa570FW\xc8\x81\xab\xce\x80" +
	"\xba\xe7\xd5\xdc|\xee\xc7W\x1f#\x7fH\xbf\x03\xb5{" +
	"\xce\x7f\xa3\xdaL\xd3B\xf0\x9f\xd7\x8b[M\xd0\x18\xf4" +
	"\xday+eZ\xa9h\x9a$\xf3\xd9|[O.\x9f" +
	"IGM+e\xa6\x8dLJ\xab\xeb\xd6\xccr\xab\xbf" +
	"`.;\x96\xb7R\xfd\x19\xf3d]\"i$u4" +
	"\x05%\x14\x80\"\x00\x0b\xd7\x02\x88R\x82\xa2RAU" +
	"7O`\x18\x14\x0c\x03z2\xe8\xca\x90LZP\x0c" +
	"\xc2\xc5.\xbb=\x975-]3\x00@\x94\x91\x10\x80" +
	"W\x06\xccN=\x18l\x1d?6\xc6\xc4>PX\x87" +
	"\x8a\xe8\x9d\x16\xdd.\xb1]\xdd\xa0\xb0f\x15\x15\x8f\x0b" +
	"\xba\xd7e\xf5\x11P\xd8Zux1|\x1cmw[" +
	"@-\x8e\xe5\xd9\xa4\xae\xc51\x81\xf8\x172\x89\xa4\xa1" +
	"&uS\x94zKo\xee\x02\x10\x0d\x04\xc56\x05\x11" +
	"+\x11\x11Y\xb3\x04\xb1\x85\xa0\xd8\xa9\xa0\x9d\xf6\xd7B" +
	"\xe6o\x0c\x88\x0cPMY\xc7Q\x05%\xa4\xae\x87\xe5" +
	"\xbde2y\x10y\x0f\x08\xc2\x8e\xf8\xb0\x9d\xf8X\x06" +
	"\x0a\x96\x05T\x94\x80\x8a\xc3V\xd55#\x81(\xa8\x03" +
	"\xd7\xad\x9f\x0f\x97I\xb8!ux1\xf1R\x1e\xc5\xdb" +
	"u\xe7,\xb5\x10Tq\x9b\x86nY\x19\x8b8*\xe5" +
	"\xa7r\x99\xecR\x09\xfak ]3\xa2\x8bfN\x9d" +
	"\x88\xfe_u\"n\xa4\x82fD\xa5\x9d\xc7i\x09\xa8" +
	"\x16_\xa6\xa6 \xcd\x91\x05?dy\x86e\x999\xe4" +
	"cN\xcd\xcd?x\x16\x07\xfe\xe94?\x03\x00\x00\xff" +
	"\xff\xcf\xfce\x94"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f9d8a0180405d9ed,
		Nodes: []uint64{
			0x8470369ac91fcc32,
			0x8810938879cb8443,
			0x986ea9282f106bb0,
			0xc772c6756fef5ba8,
			0xd5765aab1c56263f,
			0xd72d37c8b6fbef23,
			0xde50b3e61b766f3a,
			0xe7745ab0f47beb88,
			0xe8a6b1cad09d4625,
			0xf1fc6ff9f4d43e07,
			0xfb2fed6504f78754,
		},
		Compressed: true,
	})
}
