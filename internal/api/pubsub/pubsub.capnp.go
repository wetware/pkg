// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
)

type Topic struct{ Client capnp.Client }

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) (Topic_publish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_publish_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release
}

func (c Topic) AddRef() Topic {
	return Topic{
		Client: c.Client.AddRef(),
	}
}

func (c Topic) Release() {
	c.Client.Release()
}

// A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c, policy)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server, policy *server.Policy) Topic {
	return Topic{Client: capnp.NewClient(Topic_NewServer(s, policy))}
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (Topic_publish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{Struct: r}, err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{Struct: r}, err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{Struct: r}, err
}

// Topic_List is a list of Topic.
type Topic_List = capnp.CapList[Topic]

// NewTopic creates a new list of Topic.
func NewTopic_List(s *capnp.Segment, sz int32) (Topic_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Topic](l), err
}

type Topic_SubOpts struct{ capnp.Struct }

// Topic_SubOpts_TypeID is the unique identifier for the type Topic_SubOpts.
const Topic_SubOpts_TypeID = 0xd367494d397cfef8

func NewTopic_SubOpts(s *capnp.Segment) (Topic_SubOpts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Topic_SubOpts{st}, err
}

func NewRootTopic_SubOpts(s *capnp.Segment) (Topic_SubOpts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Topic_SubOpts{st}, err
}

func ReadRootTopic_SubOpts(msg *capnp.Message) (Topic_SubOpts, error) {
	root, err := msg.Root()
	return Topic_SubOpts{root.Struct()}, err
}

func (s Topic_SubOpts) String() string {
	str, _ := text.Marshal(0xd367494d397cfef8, s.Struct)
	return str
}

func (s Topic_SubOpts) BufferSize() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Topic_SubOpts) SetBufferSize(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Topic_SubOpts_List is a list of Topic_SubOpts.
type Topic_SubOpts_List = capnp.StructList[Topic_SubOpts]

// NewTopic_SubOpts creates a new list of Topic_SubOpts.
func NewTopic_SubOpts_List(s *capnp.Segment, sz int32) (Topic_SubOpts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Topic_SubOpts]{List: l}, err
}

// Topic_SubOpts_Future is a wrapper for a Topic_SubOpts promised by a client call.
type Topic_SubOpts_Future struct{ *capnp.Future }

func (p Topic_SubOpts_Future) Struct() (Topic_SubOpts, error) {
	s, err := p.Future.Struct()
	return Topic_SubOpts{s}, err
}

type Topic_publish_Params struct{ capnp.Struct }

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params{root.Struct()}, err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, s.Struct)
	return str
}

func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params]{List: l}, err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (p Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Params{s}, err
}

type Topic_publish_Results struct{ capnp.Struct }

// Topic_publish_Results_TypeID is the unique identifier for the type Topic_publish_Results.
const Topic_publish_Results_TypeID = 0x9d3775c65b79b54c

func NewTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func NewRootTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func ReadRootTopic_publish_Results(msg *capnp.Message) (Topic_publish_Results, error) {
	root, err := msg.Root()
	return Topic_publish_Results{root.Struct()}, err
}

func (s Topic_publish_Results) String() string {
	str, _ := text.Marshal(0x9d3775c65b79b54c, s.Struct)
	return str
}

// Topic_publish_Results_List is a list of Topic_publish_Results.
type Topic_publish_Results_List = capnp.StructList[Topic_publish_Results]

// NewTopic_publish_Results creates a new list of Topic_publish_Results.
func NewTopic_publish_Results_List(s *capnp.Segment, sz int32) (Topic_publish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_publish_Results]{List: l}, err
}

// Topic_publish_Results_Future is a wrapper for a Topic_publish_Results promised by a client call.
type Topic_publish_Results_Future struct{ *capnp.Future }

func (p Topic_publish_Results_Future) Struct() (Topic_publish_Results, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Results{s}, err
}

type Topic_subscribe_Params struct{ capnp.Struct }

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Topic_subscribe_Params{st}, err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Topic_subscribe_Params{st}, err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params{root.Struct()}, err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, s.Struct)
	return str
}

func (s Topic_subscribe_Params) Chan() channel.Sender {
	p, _ := s.Struct.Ptr(0)
	return channel.Sender{Client: p.Interface().Client()}
}

func (s Topic_subscribe_Params) HasChan() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_subscribe_Params) SetChan(v channel.Sender) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Topic_subscribe_Params) Opts() (Topic_SubOpts, error) {
	p, err := s.Struct.Ptr(1)
	return Topic_SubOpts{Struct: p.Struct()}, err
}

func (s Topic_subscribe_Params) HasOpts() bool {
	return s.Struct.HasPtr(1)
}

func (s Topic_subscribe_Params) SetOpts(v Topic_SubOpts) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOpts sets the opts field to a newly
// allocated Topic_SubOpts struct, preferring placement in s's segment.
func (s Topic_subscribe_Params) NewOpts() (Topic_SubOpts, error) {
	ss, err := NewTopic_SubOpts(s.Struct.Segment())
	if err != nil {
		return Topic_SubOpts{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Topic_subscribe_Params]{List: l}, err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (p Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Params{s}, err
}

func (p Topic_subscribe_Params_Future) Chan() channel.Sender {
	return channel.Sender{Client: p.Future.Field(0, nil).Client()}
}

func (p Topic_subscribe_Params_Future) Opts() Topic_SubOpts_Future {
	return Topic_SubOpts_Future{Future: p.Future.Field(1, nil)}
}

type Topic_subscribe_Results struct{ capnp.Struct }

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results{root.Struct()}, err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, s.Struct)
	return str
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results]{List: l}, err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (p Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Results{s}, err
}

type Topic_name_Params struct{ capnp.Struct }

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params{root.Struct()}, err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, s.Struct)
	return str
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params]{List: l}, err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (p Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	s, err := p.Future.Struct()
	return Topic_name_Params{s}, err
}

type Topic_name_Results struct{ capnp.Struct }

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results{root.Struct()}, err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, s.Struct)
	return str
}

func (s Topic_name_Results) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results]{List: l}, err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (p Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	s, err := p.Future.Struct()
	return Topic_name_Results{s}, err
}

type PubSub struct{ Client capnp.Client }

// PubSub_TypeID is the unique identifier for the type PubSub.
const PubSub_TypeID = 0xf1cc149f1c06e50e

func (c PubSub) Join(ctx context.Context, params func(PubSub_join_Params) error) (PubSub_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PubSub_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PubSub_join_Results_Future{Future: ans.Future()}, release
}

func (c PubSub) AddRef() PubSub {
	return PubSub{
		Client: c.Client.AddRef(),
	}
}

func (c PubSub) Release() {
	c.Client.Release()
}

// A PubSub_Server is a PubSub with a local implementation.
type PubSub_Server interface {
	Join(context.Context, PubSub_join) error
}

// PubSub_NewServer creates a new Server from an implementation of PubSub_Server.
func PubSub_NewServer(s PubSub_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PubSub_Methods(nil, s), s, c, policy)
}

// PubSub_ServerToClient creates a new Client from an implementation of PubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func PubSub_ServerToClient(s PubSub_Server, policy *server.Policy) PubSub {
	return PubSub{Client: capnp.NewClient(PubSub_NewServer(s, policy))}
}

// PubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PubSub_Methods(methods []server.Method, s PubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, PubSub_join{call})
		},
	})

	return methods
}

// PubSub_join holds the state for a server call to PubSub.join.
// See server.Call for documentation.
type PubSub_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PubSub_join) Args() PubSub_join_Params {
	return PubSub_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PubSub_join) AllocResults() (PubSub_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{Struct: r}, err
}

// PubSub_List is a list of PubSub.
type PubSub_List = capnp.CapList[PubSub]

// NewPubSub creates a new list of PubSub.
func NewPubSub_List(s *capnp.Segment, sz int32) (PubSub_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PubSub](l), err
}

type PubSub_join_Params struct{ capnp.Struct }

// PubSub_join_Params_TypeID is the unique identifier for the type PubSub_join_Params.
const PubSub_join_Params_TypeID = 0xfb4016d002794da7

func NewPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func NewRootPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func ReadRootPubSub_join_Params(msg *capnp.Message) (PubSub_join_Params, error) {
	root, err := msg.Root()
	return PubSub_join_Params{root.Struct()}, err
}

func (s PubSub_join_Params) String() string {
	str, _ := text.Marshal(0xfb4016d002794da7, s.Struct)
	return str
}

func (s PubSub_join_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PubSub_join_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PubSub_join_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// PubSub_join_Params_List is a list of PubSub_join_Params.
type PubSub_join_Params_List = capnp.StructList[PubSub_join_Params]

// NewPubSub_join_Params creates a new list of PubSub_join_Params.
func NewPubSub_join_Params_List(s *capnp.Segment, sz int32) (PubSub_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Params]{List: l}, err
}

// PubSub_join_Params_Future is a wrapper for a PubSub_join_Params promised by a client call.
type PubSub_join_Params_Future struct{ *capnp.Future }

func (p PubSub_join_Params_Future) Struct() (PubSub_join_Params, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Params{s}, err
}

type PubSub_join_Results struct{ capnp.Struct }

// PubSub_join_Results_TypeID is the unique identifier for the type PubSub_join_Results.
const PubSub_join_Results_TypeID = 0x9f6c50fbc67b1d88

func NewPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func NewRootPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func ReadRootPubSub_join_Results(msg *capnp.Message) (PubSub_join_Results, error) {
	root, err := msg.Root()
	return PubSub_join_Results{root.Struct()}, err
}

func (s PubSub_join_Results) String() string {
	str, _ := text.Marshal(0x9f6c50fbc67b1d88, s.Struct)
	return str
}

func (s PubSub_join_Results) Topic() Topic {
	p, _ := s.Struct.Ptr(0)
	return Topic{Client: p.Interface().Client()}
}

func (s PubSub_join_Results) HasTopic() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Results) SetTopic(v Topic) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// PubSub_join_Results_List is a list of PubSub_join_Results.
type PubSub_join_Results_List = capnp.StructList[PubSub_join_Results]

// NewPubSub_join_Results creates a new list of PubSub_join_Results.
func NewPubSub_join_Results_List(s *capnp.Segment, sz int32) (PubSub_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Results]{List: l}, err
}

// PubSub_join_Results_Future is a wrapper for a PubSub_join_Results promised by a client call.
type PubSub_join_Results_Future struct{ *capnp.Future }

func (p PubSub_join_Results_Future) Struct() (PubSub_join_Results, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Results{s}, err
}

func (p PubSub_join_Results_Future) Topic() Topic {
	return Topic{Client: p.Future.Field(0, nil).Client()}
}

const schema_f9d8a0180405d9ed = "x\xda\x8cSOHT[\x18\xff\xbes\xce\xf5\xcac" +
	"\xe6\xcd\x9cw\x07\x9f\xef\xa1\x08\xa2a\x03\x99\xda_[" +
	"4\x83!\x1144\xd7\x89\x08]\xcd\x1dF\x9d\x9a?" +
	"\x979s\x0a-p\xe3\xc2}\x8bJ\x08\xabMI\x9b" +
	"\\\xb8j\xd5F\xb1\\\x14%d\xfb \x02\x0b\xa1 " +
	"\xb3\xbaqf\xbc3\xb7,kw8\xe7\xe3\xf7\xfb~" +
	"\x7fN\xd7#\x8c\xb2n\xffU\x1d\x88yV\xabsz" +
	"\x96[\x96\xa6\x0f\xda\x93\xc0\x0d\x04`:\xc0\xbe9\x1a" +
	"F`\xce\xb1\xc9\xc7cSW\x82S\x95\x17\x0d\xd5\xd3" +
	"u\xfa\x0f\x02\x1a\xb7h\x04\xd0\xb9\x7f>\xb8\xb7c6" +
	"\x7f\x0d\xb8\x9f:k\xab\x1ak\xbc\xf9b\x03\x00\x8d\x87" +
	"t\xdaX\xa2\xff\x02\x18O\xe9\xa2\x11S\xa0\xce\xc9\xf9" +
	"\xb1\xa1\x05y\xe8\x86\x87\xe7\x00\xfb_\xf1L5_Z" +
	"\xd8\x8cgg\x80\x87\xaa<\xcd\xec/\xc5\xd3\xce\x14\xcf" +
	"\xdd\xa1w\x05\xb9P\\\xdcZ\x84\xa8\x81~\xd6\xaa\x06" +
	"b\xec\"\xa0\xf3\xf1\xeb\xe5\xde\xd8\x89\x91g`\x1a\xe8" +
	"YK\x91\x18\xb3\xec\xa51_>\xcd\x95\xc1\"\xbb\xce" +
	"4\xdd\x1b\xbc\xb0\xe2U\xb5\xc2\x88\x02[-\x0f\xfc\xfd" +
	"\xaa\xaei&\xb4\xbc\xbeM\xd5\x06\xbbm\xa0\xa6\x90\xbe" +
	"\xb0\xe3F\xbb:9\xfa\xd1\xe7\xef7\x0a\x9f\xd7k\xaa" +
	"\x0c\xbf\xf6\x09\x98s'6F\x9e4D7\xbd\xa2\xd6" +
	"+4\x1fX\x04\xc6\x1d[ZBZ\x9d)\x9a\xb4\xf3" +
	"\xf6\x91\xd3\x05;\x93\xea\x14\xd2\x12\xa9b\xc6J\xb7\x0d" +
	"\xa4E@fK\xe2\xa7c\xb6\xb4\xb2\x191\xda\x16O" +
	"\x16\x939\x14&\xa3\x0c\x80!\x00\xf7\xb7\x02\x98\xf5\x14" +
	"\xcd\x10A='F\xd0\x0f\x04\xfd\x80U\x18tah" +
	"&e2\xf4X\xc7\xb1o\"!\xadSvI\x98>" +
	"\xaa\x01T\xf3G7:n\xf6\x01\xe1\xfd:\xd6\"A" +
	"\xb7>\xbcw\x00\x08\xef\xd6\x91T=A\xd7j\xde\x1e" +
	"\x06\xc2\xff\xd3'\xb6\x16\x8f\xa2\xe3*\x05LG1\x90" +
	"O\xe6\xd2Q\x8c#\xee(w -d\x96n\xf3$" +
	".\xad\x84\xb4:\xcf\x152\xf9\xcaHI\x00x=\xe9" +
	"\xa9y\xd2RR\x88\xc8k\x1d\x01D\x0e\xf8\x9b4\xe2" +
	"\xc9\xa2\x9e\xcc\x09\xb3\xbe\x0a\xba;\x0c`\xb6Q4\xbb" +
	"\x08r\xc4\x10\xaa\xcb=\xea\xb2\x83\xa2\xb9\x9f` 5" +
	"\x9a\xcc#w\xde6\xbc9\x1cZ{\xf0z\x8b(P" +
	"\xb0K\x02\x835\xdb\x011\xe8\xe1'\x1e\xfer\x1a\xb4" +
	"$\xe2\x88^9\x83\x00\xa6\x8f\xa2\xd9H\xd0\xb1\xe4\xf0" +
	"p\xba\x98\xc8\x00\x1dO\xa3\x06\x04\xb5_hQ\x0eW" +
	"\xdd\xf1\xa2\x85k\xe6\x94c@\x1f\x10\xf4mkL\\" +
	"ZzBZ\x95UT9\xdc~\xa3\xfb{9W!" +
	"kz@\x05\xf1}\x98\xe4\xc7E\"\xe5\xe6\xee\x14d" +
	"e\xe0\x8f6\xfd\x16\x00\x00\xff\xff\xc5\xc0U\x10"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0x8470369ac91fcc32,
		0x8810938879cb8443,
		0x986ea9282f106bb0,
		0x9d3775c65b79b54c,
		0x9f6c50fbc67b1d88,
		0xc772c6756fef5ba8,
		0xd367494d397cfef8,
		0xd5765aab1c56263f,
		0xf1cc149f1c06e50e,
		0xf1fc6ff9f4d43e07,
		0xfb4016d002794da7)
}
