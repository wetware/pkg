// Code generated by capnpc-go. DO NOT EDIT.

package bitswap

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BitSwap capnp.Client

// BitSwap_TypeID is the unique identifier for the type BitSwap.
const BitSwap_TypeID = 0x845db065edc3ea8a

func (c BitSwap) GetBlock(ctx context.Context, params func(BitSwap_getBlock_Params) error) (BitSwap_getBlock_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x845db065edc3ea8a,
			MethodID:      0,
			InterfaceName: "bitswap.capnp:BitSwap",
			MethodName:    "getBlock",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BitSwap_getBlock_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BitSwap_getBlock_Results_Future{Future: ans.Future()}, release

}

func (c BitSwap) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BitSwap) String() string {
	return "BitSwap(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BitSwap) AddRef() BitSwap {
	return BitSwap(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BitSwap) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BitSwap) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BitSwap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BitSwap) DecodeFromPtr(p capnp.Ptr) BitSwap {
	return BitSwap(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BitSwap) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BitSwap) IsSame(other BitSwap) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BitSwap) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BitSwap) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BitSwap_Server is a BitSwap with a local implementation.
type BitSwap_Server interface {
	GetBlock(context.Context, BitSwap_getBlock) error
}

// BitSwap_NewServer creates a new Server from an implementation of BitSwap_Server.
func BitSwap_NewServer(s BitSwap_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BitSwap_Methods(nil, s), s, c)
}

// BitSwap_ServerToClient creates a new Client from an implementation of BitSwap_Server.
// The caller is responsible for calling Release on the returned Client.
func BitSwap_ServerToClient(s BitSwap_Server) BitSwap {
	return BitSwap(capnp.NewClient(BitSwap_NewServer(s)))
}

// BitSwap_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BitSwap_Methods(methods []server.Method, s BitSwap_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x845db065edc3ea8a,
			MethodID:      0,
			InterfaceName: "bitswap.capnp:BitSwap",
			MethodName:    "getBlock",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetBlock(ctx, BitSwap_getBlock{call})
		},
	})

	return methods
}

// BitSwap_getBlock holds the state for a server call to BitSwap.getBlock.
// See server.Call for documentation.
type BitSwap_getBlock struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BitSwap_getBlock) Args() BitSwap_getBlock_Params {
	return BitSwap_getBlock_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BitSwap_getBlock) AllocResults() (BitSwap_getBlock_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BitSwap_getBlock_Results(r), err
}

// BitSwap_List is a list of BitSwap.
type BitSwap_List = capnp.CapList[BitSwap]

// NewBitSwap creates a new list of BitSwap.
func NewBitSwap_List(s *capnp.Segment, sz int32) (BitSwap_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BitSwap](l), err
}

type BitSwap_getBlock_Params capnp.Struct

// BitSwap_getBlock_Params_TypeID is the unique identifier for the type BitSwap_getBlock_Params.
const BitSwap_getBlock_Params_TypeID = 0xf9e9def5d682adfa

func NewBitSwap_getBlock_Params(s *capnp.Segment) (BitSwap_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BitSwap_getBlock_Params(st), err
}

func NewRootBitSwap_getBlock_Params(s *capnp.Segment) (BitSwap_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BitSwap_getBlock_Params(st), err
}

func ReadRootBitSwap_getBlock_Params(msg *capnp.Message) (BitSwap_getBlock_Params, error) {
	root, err := msg.Root()
	return BitSwap_getBlock_Params(root.Struct()), err
}

func (s BitSwap_getBlock_Params) String() string {
	str, _ := text.Marshal(0xf9e9def5d682adfa, capnp.Struct(s))
	return str
}

func (s BitSwap_getBlock_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BitSwap_getBlock_Params) DecodeFromPtr(p capnp.Ptr) BitSwap_getBlock_Params {
	return BitSwap_getBlock_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BitSwap_getBlock_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BitSwap_getBlock_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BitSwap_getBlock_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BitSwap_getBlock_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BitSwap_getBlock_Params) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BitSwap_getBlock_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BitSwap_getBlock_Params) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BitSwap_getBlock_Params_List is a list of BitSwap_getBlock_Params.
type BitSwap_getBlock_Params_List = capnp.StructList[BitSwap_getBlock_Params]

// NewBitSwap_getBlock_Params creates a new list of BitSwap_getBlock_Params.
func NewBitSwap_getBlock_Params_List(s *capnp.Segment, sz int32) (BitSwap_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BitSwap_getBlock_Params](l), err
}

// BitSwap_getBlock_Params_Future is a wrapper for a BitSwap_getBlock_Params promised by a client call.
type BitSwap_getBlock_Params_Future struct{ *capnp.Future }

func (f BitSwap_getBlock_Params_Future) Struct() (BitSwap_getBlock_Params, error) {
	p, err := f.Future.Ptr()
	return BitSwap_getBlock_Params(p.Struct()), err
}

type BitSwap_getBlock_Results capnp.Struct

// BitSwap_getBlock_Results_TypeID is the unique identifier for the type BitSwap_getBlock_Results.
const BitSwap_getBlock_Results_TypeID = 0xb5d24de3300e4367

func NewBitSwap_getBlock_Results(s *capnp.Segment) (BitSwap_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BitSwap_getBlock_Results(st), err
}

func NewRootBitSwap_getBlock_Results(s *capnp.Segment) (BitSwap_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BitSwap_getBlock_Results(st), err
}

func ReadRootBitSwap_getBlock_Results(msg *capnp.Message) (BitSwap_getBlock_Results, error) {
	root, err := msg.Root()
	return BitSwap_getBlock_Results(root.Struct()), err
}

func (s BitSwap_getBlock_Results) String() string {
	str, _ := text.Marshal(0xb5d24de3300e4367, capnp.Struct(s))
	return str
}

func (s BitSwap_getBlock_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BitSwap_getBlock_Results) DecodeFromPtr(p capnp.Ptr) BitSwap_getBlock_Results {
	return BitSwap_getBlock_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BitSwap_getBlock_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BitSwap_getBlock_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BitSwap_getBlock_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BitSwap_getBlock_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BitSwap_getBlock_Results) Block() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BitSwap_getBlock_Results) HasBlock() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BitSwap_getBlock_Results) SetBlock(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BitSwap_getBlock_Results_List is a list of BitSwap_getBlock_Results.
type BitSwap_getBlock_Results_List = capnp.StructList[BitSwap_getBlock_Results]

// NewBitSwap_getBlock_Results creates a new list of BitSwap_getBlock_Results.
func NewBitSwap_getBlock_Results_List(s *capnp.Segment, sz int32) (BitSwap_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BitSwap_getBlock_Results](l), err
}

// BitSwap_getBlock_Results_Future is a wrapper for a BitSwap_getBlock_Results promised by a client call.
type BitSwap_getBlock_Results_Future struct{ *capnp.Future }

func (f BitSwap_getBlock_Results_Future) Struct() (BitSwap_getBlock_Results, error) {
	p, err := f.Future.Ptr()
	return BitSwap_getBlock_Results(p.Struct()), err
}

const schema_ced7a3b0e18b5291 = "x\xda\x12\xe8s`1\xe4\xcdgb`\x0a\x94ae" +
	"\xfb\xdf\xf5\xea\xf0\xdb\xd4\x0d\xb1-\x0c\x82|\xcc\xff'" +
	"\x06u?\xdc\xb0\xf8\xfa9\x06\x06FaY\xc6M\xc2" +
	"\xaa\x8c\xec\x0c\x0c\xc2\x8a\x8c\xee\xc2\xbe \xd6\xfftg" +
	">\x83\xc7\xbe\x97\xb62\x08\x8a120\xb0\x82\xc4\x8c" +
	"M\x19\xad\x18\x19\x18\x85m\x19\xed\x19\x18\xff\xffZ\xdb" +
	"t\xed\xeb\xbd\x97?\x91\x15\xc42\x1a\x81\x14\xa42\xda" +
	"3\xe8\xfeO\xca,).O,\xd0cLN,\xc8" +
	"+\xb0r\xca\x94/\x09.O,\x08`d\x0cda" +
	"fe`\x80\x9b\xc0\x08\xb3KP\xd0\x8b\x81I\x90\x93" +
	"\xfd\x7fzj\x89SN~r6\x03\x03\x83\x03c\x00" +
	"##\xdc,f\x98Y`\xa3\xf4`\xeaT\x82\xecS" +
	"\x8bKsJ\x8a\x03Y\x98Y\x18\x18X\x18\x19\x18\x04" +
	"y\x8d\x18\x18\x029\x98\x19\x03E\x98\x18\xe5\x93@\xaa" +
	"\x18y\x19\x98\x18y\x19\x08\x9b\x16 \x9fX\x94\x98\x8b" +
	"b\x98\x12\xc20\xf6\xec\xd4J\x98Q\x80\x00\x00\x00\xff" +
	"\xff\x02\xe2`m"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ced7a3b0e18b5291,
		Nodes: []uint64{
			0x845db065edc3ea8a,
			0xb5d24de3300e4367,
			0xf9e9def5d682adfa,
		},
		Compressed: true,
	})
}
