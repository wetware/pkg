// Code generated by capnpc-go. DO NOT EDIT.

package discovery

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type DiscoveryService capnp.Client

// DiscoveryService_TypeID is the unique identifier for the type DiscoveryService.
const DiscoveryService_TypeID = 0xe4a48c5d3f25d6d0

func (c DiscoveryService) Provider(ctx context.Context, params func(DiscoveryService_provider_Params) error) (DiscoveryService_provider_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "provider",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_provider_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_provider_Results_Future{Future: ans.Future()}, release
}
func (c DiscoveryService) Locator(ctx context.Context, params func(DiscoveryService_locator_Params) error) (DiscoveryService_locator_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "locator",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_locator_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_locator_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c DiscoveryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c DiscoveryService) AddRef() DiscoveryService {
	return DiscoveryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c DiscoveryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c DiscoveryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c DiscoveryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (DiscoveryService) DecodeFromPtr(p capnp.Ptr) DiscoveryService {
	return DiscoveryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c DiscoveryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c DiscoveryService) IsSame(other DiscoveryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c DiscoveryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c DiscoveryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A DiscoveryService_Server is a DiscoveryService with a local implementation.
type DiscoveryService_Server interface {
	Provider(context.Context, DiscoveryService_provider) error

	Locator(context.Context, DiscoveryService_locator) error
}

// DiscoveryService_NewServer creates a new Server from an implementation of DiscoveryService_Server.
func DiscoveryService_NewServer(s DiscoveryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DiscoveryService_Methods(nil, s), s, c)
}

// DiscoveryService_ServerToClient creates a new Client from an implementation of DiscoveryService_Server.
// The caller is responsible for calling Release on the returned Client.
func DiscoveryService_ServerToClient(s DiscoveryService_Server) DiscoveryService {
	return DiscoveryService(capnp.NewClient(DiscoveryService_NewServer(s)))
}

// DiscoveryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DiscoveryService_Methods(methods []server.Method, s DiscoveryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "provider",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provider(ctx, DiscoveryService_provider{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "locator",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locator(ctx, DiscoveryService_locator{call})
		},
	})

	return methods
}

// DiscoveryService_provider holds the state for a server call to DiscoveryService.provider.
// See server.Call for documentation.
type DiscoveryService_provider struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_provider) Args() DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_provider) AllocResults() (DiscoveryService_provider_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(r), err
}

// DiscoveryService_locator holds the state for a server call to DiscoveryService.locator.
// See server.Call for documentation.
type DiscoveryService_locator struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_locator) Args() DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_locator) AllocResults() (DiscoveryService_locator_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(r), err
}

// DiscoveryService_List is a list of DiscoveryService.
type DiscoveryService_List = capnp.CapList[DiscoveryService]

// NewDiscoveryService creates a new list of DiscoveryService.
func NewDiscoveryService_List(s *capnp.Segment, sz int32) (DiscoveryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[DiscoveryService](l), err
}

type DiscoveryService_provider_Params capnp.Struct

// DiscoveryService_provider_Params_TypeID is the unique identifier for the type DiscoveryService_provider_Params.
const DiscoveryService_provider_Params_TypeID = 0xf8e8ab21195eede9

func NewDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func NewRootDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func ReadRootDiscoveryService_provider_Params(msg *capnp.Message) (DiscoveryService_provider_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Params(root.Struct()), err
}

func (s DiscoveryService_provider_Params) String() string {
	str, _ := text.Marshal(0xf8e8ab21195eede9, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_provider_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_provider_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_provider_Params_List is a list of DiscoveryService_provider_Params.
type DiscoveryService_provider_Params_List = capnp.StructList[DiscoveryService_provider_Params]

// NewDiscoveryService_provider_Params creates a new list of DiscoveryService_provider_Params.
func NewDiscoveryService_provider_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Params](l), err
}

// DiscoveryService_provider_Params_Future is a wrapper for a DiscoveryService_provider_Params promised by a client call.
type DiscoveryService_provider_Params_Future struct{ *capnp.Future }

func (f DiscoveryService_provider_Params_Future) Struct() (DiscoveryService_provider_Params, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_provider_Params(p.Struct()), err
}

type DiscoveryService_provider_Results capnp.Struct

// DiscoveryService_provider_Results_TypeID is the unique identifier for the type DiscoveryService_provider_Results.
const DiscoveryService_provider_Results_TypeID = 0xb14b5203df9fa7c8

func NewDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func NewRootDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func ReadRootDiscoveryService_provider_Results(msg *capnp.Message) (DiscoveryService_provider_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Results(root.Struct()), err
}

func (s DiscoveryService_provider_Results) String() string {
	str, _ := text.Marshal(0xb14b5203df9fa7c8, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Results {
	return DiscoveryService_provider_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Results) Provider() Provider {
	p, _ := capnp.Struct(s).Ptr(0)
	return Provider(p.Interface().Client())
}

func (s DiscoveryService_provider_Results) HasProvider() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Results) SetProvider(v Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_provider_Results_List is a list of DiscoveryService_provider_Results.
type DiscoveryService_provider_Results_List = capnp.StructList[DiscoveryService_provider_Results]

// NewDiscoveryService_provider_Results creates a new list of DiscoveryService_provider_Results.
func NewDiscoveryService_provider_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Results](l), err
}

// DiscoveryService_provider_Results_Future is a wrapper for a DiscoveryService_provider_Results promised by a client call.
type DiscoveryService_provider_Results_Future struct{ *capnp.Future }

func (f DiscoveryService_provider_Results_Future) Struct() (DiscoveryService_provider_Results, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_provider_Results(p.Struct()), err
}
func (p DiscoveryService_provider_Results_Future) Provider() Provider {
	return Provider(p.Future.Field(0, nil).Client())
}

type DiscoveryService_locator_Params capnp.Struct

// DiscoveryService_locator_Params_TypeID is the unique identifier for the type DiscoveryService_locator_Params.
const DiscoveryService_locator_Params_TypeID = 0xd40e2f0673af616c

func NewDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func NewRootDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func ReadRootDiscoveryService_locator_Params(msg *capnp.Message) (DiscoveryService_locator_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Params(root.Struct()), err
}

func (s DiscoveryService_locator_Params) String() string {
	str, _ := text.Marshal(0xd40e2f0673af616c, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_locator_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_locator_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_locator_Params_List is a list of DiscoveryService_locator_Params.
type DiscoveryService_locator_Params_List = capnp.StructList[DiscoveryService_locator_Params]

// NewDiscoveryService_locator_Params creates a new list of DiscoveryService_locator_Params.
func NewDiscoveryService_locator_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Params](l), err
}

// DiscoveryService_locator_Params_Future is a wrapper for a DiscoveryService_locator_Params promised by a client call.
type DiscoveryService_locator_Params_Future struct{ *capnp.Future }

func (f DiscoveryService_locator_Params_Future) Struct() (DiscoveryService_locator_Params, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_locator_Params(p.Struct()), err
}

type DiscoveryService_locator_Results capnp.Struct

// DiscoveryService_locator_Results_TypeID is the unique identifier for the type DiscoveryService_locator_Results.
const DiscoveryService_locator_Results_TypeID = 0xda5a597d0c3a72a4

func NewDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func NewRootDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func ReadRootDiscoveryService_locator_Results(msg *capnp.Message) (DiscoveryService_locator_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Results(root.Struct()), err
}

func (s DiscoveryService_locator_Results) String() string {
	str, _ := text.Marshal(0xda5a597d0c3a72a4, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Results {
	return DiscoveryService_locator_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Results) Locator() Locator {
	p, _ := capnp.Struct(s).Ptr(0)
	return Locator(p.Interface().Client())
}

func (s DiscoveryService_locator_Results) HasLocator() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Results) SetLocator(v Locator) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_locator_Results_List is a list of DiscoveryService_locator_Results.
type DiscoveryService_locator_Results_List = capnp.StructList[DiscoveryService_locator_Results]

// NewDiscoveryService_locator_Results creates a new list of DiscoveryService_locator_Results.
func NewDiscoveryService_locator_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Results](l), err
}

// DiscoveryService_locator_Results_Future is a wrapper for a DiscoveryService_locator_Results promised by a client call.
type DiscoveryService_locator_Results_Future struct{ *capnp.Future }

func (f DiscoveryService_locator_Results_Future) Struct() (DiscoveryService_locator_Results, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_locator_Results(p.Struct()), err
}
func (p DiscoveryService_locator_Results_Future) Locator() Locator {
	return Locator(p.Future.Field(0, nil).Client())
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcdc156a3faea6ebf

func (c Provider) Provide(ctx context.Context, params func(Provider_provide_Params) error) (Provider_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Provider",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_provide_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Provide(context.Context, Provider_provide) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Provider",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Provider_provide{call})
		},
	})

	return methods
}

// Provider_provide holds the state for a server call to Provider.provide.
// See server.Call for documentation.
type Provider_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_provide) Args() Provider_provide_Params {
	return Provider_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_provide) AllocResults() (Provider_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_provide_Params capnp.Struct

// Provider_provide_Params_TypeID is the unique identifier for the type Provider_provide_Params.
const Provider_provide_Params_TypeID = 0xd80e24dbc41b1f0d

func NewProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func NewRootProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func ReadRootProvider_provide_Params(msg *capnp.Message) (Provider_provide_Params, error) {
	root, err := msg.Root()
	return Provider_provide_Params(root.Struct()), err
}

func (s Provider_provide_Params) String() string {
	str, _ := text.Marshal(0xd80e24dbc41b1f0d, capnp.Struct(s))
	return str
}

func (s Provider_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Params) DecodeFromPtr(p capnp.Ptr) Provider_provide_Params {
	return Provider_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_provide_Params) Addrs() (Addr, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Addr(p.Struct()), err
}

func (s Provider_provide_Params) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_provide_Params) SetAddrs(v Addr) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s Provider_provide_Params) NewAddrs() (Addr, error) {
	ss, err := NewAddr(capnp.Struct(s).Segment())
	if err != nil {
		return Addr{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_provide_Params_List is a list of Provider_provide_Params.
type Provider_provide_Params_List = capnp.StructList[Provider_provide_Params]

// NewProvider_provide_Params creates a new list of Provider_provide_Params.
func NewProvider_provide_Params_List(s *capnp.Segment, sz int32) (Provider_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_provide_Params](l), err
}

// Provider_provide_Params_Future is a wrapper for a Provider_provide_Params promised by a client call.
type Provider_provide_Params_Future struct{ *capnp.Future }

func (f Provider_provide_Params_Future) Struct() (Provider_provide_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Params(p.Struct()), err
}
func (p Provider_provide_Params_Future) Addrs() Addr_Future {
	return Addr_Future{Future: p.Future.Field(0, nil)}
}

type Provider_provide_Results capnp.Struct

// Provider_provide_Results_TypeID is the unique identifier for the type Provider_provide_Results.
const Provider_provide_Results_TypeID = 0x9f93db577b084c4b

func NewProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func NewRootProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func ReadRootProvider_provide_Results(msg *capnp.Message) (Provider_provide_Results, error) {
	root, err := msg.Root()
	return Provider_provide_Results(root.Struct()), err
}

func (s Provider_provide_Results) String() string {
	str, _ := text.Marshal(0x9f93db577b084c4b, capnp.Struct(s))
	return str
}

func (s Provider_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Results) DecodeFromPtr(p capnp.Ptr) Provider_provide_Results {
	return Provider_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Provider_provide_Results_List is a list of Provider_provide_Results.
type Provider_provide_Results_List = capnp.StructList[Provider_provide_Results]

// NewProvider_provide_Results creates a new list of Provider_provide_Results.
func NewProvider_provide_Results_List(s *capnp.Segment, sz int32) (Provider_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Provider_provide_Results](l), err
}

// Provider_provide_Results_Future is a wrapper for a Provider_provide_Results promised by a client call.
type Provider_provide_Results_Future struct{ *capnp.Future }

func (f Provider_provide_Results_Future) Struct() (Provider_provide_Results, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Results(p.Struct()), err
}

type Locator capnp.Client

// Locator_TypeID is the unique identifier for the type Locator.
const Locator_TypeID = 0xd8eba41bb8f5845d

func (c Locator) FindProviders(ctx context.Context, params func(Locator_findProviders_Params) error) (Locator_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Locator",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Locator_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Locator_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Locator) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Locator) AddRef() Locator {
	return Locator(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Locator) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Locator) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Locator) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Locator) DecodeFromPtr(p capnp.Ptr) Locator {
	return Locator(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Locator) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Locator) IsSame(other Locator) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Locator) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Locator) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Locator_Server is a Locator with a local implementation.
type Locator_Server interface {
	FindProviders(context.Context, Locator_findProviders) error
}

// Locator_NewServer creates a new Server from an implementation of Locator_Server.
func Locator_NewServer(s Locator_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Locator_Methods(nil, s), s, c)
}

// Locator_ServerToClient creates a new Client from an implementation of Locator_Server.
// The caller is responsible for calling Release on the returned Client.
func Locator_ServerToClient(s Locator_Server) Locator {
	return Locator(capnp.NewClient(Locator_NewServer(s)))
}

// Locator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Locator_Methods(methods []server.Method, s Locator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Locator",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Locator_findProviders{call})
		},
	})

	return methods
}

// Locator_findProviders holds the state for a server call to Locator.findProviders.
// See server.Call for documentation.
type Locator_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Locator_findProviders) Args() Locator_findProviders_Params {
	return Locator_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Locator_findProviders) AllocResults() (Locator_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(r), err
}

// Locator_List is a list of Locator.
type Locator_List = capnp.CapList[Locator]

// NewLocator creates a new list of Locator.
func NewLocator_List(s *capnp.Segment, sz int32) (Locator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Locator](l), err
}

type Locator_findProviders_Params capnp.Struct

// Locator_findProviders_Params_TypeID is the unique identifier for the type Locator_findProviders_Params.
const Locator_findProviders_Params_TypeID = 0xa94bdd0b5449db25

func NewLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func NewRootLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func ReadRootLocator_findProviders_Params(msg *capnp.Message) (Locator_findProviders_Params, error) {
	root, err := msg.Root()
	return Locator_findProviders_Params(root.Struct()), err
}

func (s Locator_findProviders_Params) String() string {
	str, _ := text.Marshal(0xa94bdd0b5449db25, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Params {
	return Locator_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Locator_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Locator_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Locator_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Locator_findProviders_Params_List is a list of Locator_findProviders_Params.
type Locator_findProviders_Params_List = capnp.StructList[Locator_findProviders_Params]

// NewLocator_findProviders_Params creates a new list of Locator_findProviders_Params.
func NewLocator_findProviders_Params_List(s *capnp.Segment, sz int32) (Locator_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Locator_findProviders_Params](l), err
}

// Locator_findProviders_Params_Future is a wrapper for a Locator_findProviders_Params promised by a client call.
type Locator_findProviders_Params_Future struct{ *capnp.Future }

func (f Locator_findProviders_Params_Future) Struct() (Locator_findProviders_Params, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Params(p.Struct()), err
}
func (p Locator_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Locator_findProviders_Results capnp.Struct

// Locator_findProviders_Results_TypeID is the unique identifier for the type Locator_findProviders_Results.
const Locator_findProviders_Results_TypeID = 0xa33c37f7a390a3bf

func NewLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func NewRootLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func ReadRootLocator_findProviders_Results(msg *capnp.Message) (Locator_findProviders_Results, error) {
	root, err := msg.Root()
	return Locator_findProviders_Results(root.Struct()), err
}

func (s Locator_findProviders_Results) String() string {
	str, _ := text.Marshal(0xa33c37f7a390a3bf, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Results {
	return Locator_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Locator_findProviders_Results_List is a list of Locator_findProviders_Results.
type Locator_findProviders_Results_List = capnp.StructList[Locator_findProviders_Results]

// NewLocator_findProviders_Results creates a new list of Locator_findProviders_Results.
func NewLocator_findProviders_Results_List(s *capnp.Segment, sz int32) (Locator_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Locator_findProviders_Results](l), err
}

// Locator_findProviders_Results_Future is a wrapper for a Locator_findProviders_Results promised by a client call.
type Locator_findProviders_Results_Future struct{ *capnp.Future }

func (f Locator_findProviders_Results_Future) Struct() (Locator_findProviders_Results, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Results(p.Struct()), err
}

type Addr capnp.Struct

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0xd0ec85d808eaabd9

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Addr(st), err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Addr(st), err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.Root()
	return Addr(root.Struct()), err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0xd0ec85d808eaabd9, capnp.Struct(s))
	return str
}

func (s Addr) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Addr) DecodeFromPtr(p capnp.Ptr) Addr {
	return Addr(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Addr) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Addr) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Addr) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Addr) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Addr) Maddrs() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.DataList(p.List()), err
}

func (s Addr) HasMaddrs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Addr) SetMaddrs(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMaddrs sets the maddrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Addr) NewMaddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Addr_List is a list of Addr.
type Addr_List = capnp.StructList[Addr]

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Addr](l), err
}

// Addr_Future is a wrapper for a Addr promised by a client call.
type Addr_Future struct{ *capnp.Future }

func (f Addr_Future) Struct() (Addr, error) {
	p, err := f.Future.Ptr()
	return Addr(p.Struct()), err
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Request() (Message_Request, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Request(p.Struct()), err
}

func (s Message) HasRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetRequest(v Message_Request) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Message_Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Message_Request, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewMessage_Request(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Request{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() (Message_Response, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Response(p.Struct()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v Message_Response) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Message_Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Message_Response, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewMessage_Response(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Response{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Request() Message_Request_Future {
	return Message_Request_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_Response_Future {
	return Message_Response_Future{Future: p.Future.Field(0, nil)}
}

type Message_Request capnp.Struct

// Message_Request_TypeID is the unique identifier for the type Message_Request.
const Message_Request_TypeID = 0x9fe65a406fba5583

func NewMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func NewRootMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func ReadRootMessage_Request(msg *capnp.Message) (Message_Request, error) {
	root, err := msg.Root()
	return Message_Request(root.Struct()), err
}

func (s Message_Request) String() string {
	str, _ := text.Marshal(0x9fe65a406fba5583, capnp.Struct(s))
	return str
}

func (s Message_Request) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Request) DecodeFromPtr(p capnp.Ptr) Message_Request {
	return Message_Request(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Request) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Request) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Request) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Request) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Message_Request_List is a list of Message_Request.
type Message_Request_List = capnp.StructList[Message_Request]

// NewMessage_Request creates a new list of Message_Request.
func NewMessage_Request_List(s *capnp.Segment, sz int32) (Message_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Message_Request](l), err
}

// Message_Request_Future is a wrapper for a Message_Request promised by a client call.
type Message_Request_Future struct{ *capnp.Future }

func (f Message_Request_Future) Struct() (Message_Request, error) {
	p, err := f.Future.Ptr()
	return Message_Request(p.Struct()), err
}

type Message_Response capnp.Struct

// Message_Response_TypeID is the unique identifier for the type Message_Response.
const Message_Response_TypeID = 0xf42beb36cd723e35

func NewMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func NewRootMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func ReadRootMessage_Response(msg *capnp.Message) (Message_Response, error) {
	root, err := msg.Root()
	return Message_Response(root.Struct()), err
}

func (s Message_Response) String() string {
	str, _ := text.Marshal(0xf42beb36cd723e35, capnp.Struct(s))
	return str
}

func (s Message_Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Response) DecodeFromPtr(p capnp.Ptr) Message_Response {
	return Message_Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_Response) Addr() (Addr, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Addr(p.Struct()), err
}

func (s Message_Response) HasAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_Response) SetAddr(v Addr) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAddr sets the addr field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s Message_Response) NewAddr() (Addr, error) {
	ss, err := NewAddr(capnp.Struct(s).Segment())
	if err != nil {
		return Addr{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_Response_List is a list of Message_Response.
type Message_Response_List = capnp.StructList[Message_Response]

// NewMessage_Response creates a new list of Message_Response.
func NewMessage_Response_List(s *capnp.Segment, sz int32) (Message_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Message_Response](l), err
}

// Message_Response_Future is a wrapper for a Message_Response promised by a client call.
type Message_Response_Future struct{ *capnp.Future }

func (f Message_Response_Future) Struct() (Message_Response, error) {
	p, err := f.Future.Ptr()
	return Message_Response(p.Struct()), err
}
func (p Message_Response_Future) Addr() Addr_Future {
	return Addr_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcba4f486a351ac3 = "x\xda\x8cU]h\x1cU\x18\xfd\xce\x9d;\xbb[\xdd" +
	"M\xe62A\x1bKY\x02\x1b$jck\x89\x96 " +
	"f]*\xd5\xa4\xc5\x9d\xf5\x8f\x16*\x0e\xbb\xa3MI" +
	"v\xb73i$J\x09\xf8\x83(\x16D\x9f%\x0f\x09" +
	"H\xedC\xc9\x9bV\xa4X}\xb0B\xa0\x15\x95\xd4 " +
	"\"\x88\xb4\xa9\xf5E\xa5*\xea\x95;?;\xb3\x9b\xd8" +
	"\xe6m\x989\xf7|\xe7\x9e\xef|\xdfl\x7f\x86\x15\xf9" +
	"\x8e\xdc\xb5\x0c1\xeb\x90\x9e\x92c{3/>\xb5\xf2" +
	"\xce\x1c\x89^\x10\xf14\xd1N\x9b\x8f\x82\xb8|\xf9\x89" +
	"\xd3\x8d\xe2\x81\x9f\xe6Hl\x86\xcc\x9fkN\xfc\xbaz" +
	"\xea\xcb\x00\xb1\x8f3\x98\xfby\x9a4yf\xfe\xad\xf9" +
	"k\xf7\xdd?\xafP\xe1\xf9!\xee\xaa\xf3\xfd+\x8f<" +
	"~\xf3wc'\x82/:\xd4\xa7>~\x18\x04s\x1b" +
	"\x1f!\xc8\xcf\xdf\x9b\xfb^\xab\x8c-\x92\xe8k\x01\x8e" +
	"\xf1\xb7\x15\xe0\xb8\x0f8S_\xfdk\xfe\xc9O\x96H" +
	"\x18\x9a\xfc\xf4\xb6\xa1\xc3\x0f?z\xfao\"\x98\x8b\xfc" +
	"\x0b\xf3cU\xcb\xfc\x90\xef1\x7fPO\xf2\xe2\xc9\xd5" +
	"\xcc\xf2\xab?\x9f'a \x06\xfb\xac\xe69\xfe\xbey" +
	"\xc1\xc7/\xf9\xc4\xad\xdbX\x06\x12\xe0\x87\x90fD\xe6" +
	"?\xfc\xac\xa9\xeb\xb7\x13\x99[\xf5\xe7\x09r\xc2>\xe5" +
	"\xa5\xee\xee\xfa\xaaM\xa7\xfe\x92\xd2\xf9\xba\xae\xe8r\xf9" +
	"-\x9f\xad\x14\xba\x96\x03\x0f\x03\xc0\x09\xbd\xa4\x00\x8b>" +
	"\xe0\xe0+\xbf\x7f\xb0e\xe1\xca\xf2\x9a\x8b\\\xd0\xcf\x9a" +
	"\x17u%\xeck}\x8f\x89\x94\xba\xc8\x82;\x9c=\xb6" +
	"\xff\xc0\xb7\xc9r\x97\xf57\x14\xdb\x9f>\xdb\xf9o\xfa" +
	"G\x0e\xbe\xb9\xf0c'\xdb\xce\xde\xd4M0\x07\x14\x89" +
	"\xd9\x9fz\xcd\x9c\xf1\xe9\x86\x1ep\x97\xee\xbdr\xe7o" +
	"\xedm\x0chmu\xe0\x88\x7f`2\xa5\xa8/_}" +
	"\xba\xb7\xef\xe4\xa5?\x92\xb5\x8f\xa7\xfc\xda\xef\xa6F\xe8" +
	"\x05Y\x1b\xf7\xaa\x8di\xc7\xe53\x83U\xbbYo\x0e" +
	"\x97\xdd\xc6\xf4x\xcdq\x07\x9b\xc1C\xa1\xe2xG'" +
	"\xa6<\xa2\x16V\x8b\xb0\xfb\x1c\xcf\xb3\x9fs\x06+\xce" +
	"\x91\xa3\x8e7Ee`-\xe1\xdeF\xd5\x9ej\xb8\x83" +
	"\xcf\x8e\xd7k\x11\xb9W\xa88y\x9fv\xa3\xf8\xb2\xdd" +
	"\xed\xda\x93\x9e\xc55N\xc4A$rw\x10Y\x19\x0d" +
	"\xd6n\x86\xee\xea!\xbb\x0e!\x7f\xb9euW\xcf\xd5" +
	"\x8f.\x11Q\x11\x02y\x8b3$_\x0a\xdcjq\x00" +
	"(k\x80\x11G\x8c\x00A\xb1v=\xd2\xb2;|1" +
	"\xf3\x98\xe3N\x8fW\x9d\xc8\x147t\x05m\x82F\x89" +
	"\xac\xac\x06k3\x83\x8c\x80D\x04\x11\x07\xbf\xa3\x10\xeb" +
	"t\x9d\x94\x87\x16\xd7t\xa2V\x0a\x11\x8d\xb4\x10%b" +
	"BO\xcf\x86\xe4E$\x0dG\xc4\xd5\xfd`\xad\xe6\x06" +
	"4-i\xc3\xa1W\x05\x86\x91I\xbbVs=t\x91" +
	"\xefB\x8e\x98z\\+)l.Y\x19 \xb1;6" +
	"\x95\x12\x09\xd4Gg\xc3\xde\xcb\x8a\xe35\x1bu\xcf!" +
	"\xbf\x12\xcfJ\xe9W\x1e(\x11Y\x05\x0d\xd6v\x86\x1c" +
	"\xfe\x95=Po\xb7)\xab\xee\xd2`\xedb\x98u\x03" +
	"\x06\x18q\x15\x02\x0c\x82tcN\x18q\xd9\xf0\xeb\x8d" +
	"\xbb5\x11D\xa9P\xb6Uvh\xbd\xf0\xf40t\xd7" +
	"\xedI\x07Yb\xc8\x1260\x10\xeb\xb0\xdd\x13\xb3\xe5" +
	"\x03w\xdb\xc3e\xacgp\x18\xf4D\xc7\xa3\x0d\x8bh" +
	"\x09\x0b\xe1\x12\x13\x9b\xd22\x1a\x06\xca\xfb\xe3\xd0\xde\xf9" +
	"\x1b\x1b\xd0\x9a\xe1\xa4\xe8R,z6\x04B\xc4\xab\xad" +
	"#\xaa\xda\xff\x15\x09\"\x9b\xf1/\x10\xad\x1bD\xbf\x02" +
	"\xb1c\x94\x98\x18H#\xde\xba\x88\xf6\xa1\xd8\xaa\xe2," +
	"\xd2\xc9Y)\xb6\xa4\xb4_q\x9d\x95\x13E\xa3#\xe9" +
	"\xc9\xc6\xaaV\\\xa7\x13\x1b\x18\xf3\xb0\xd7\x1b\x8a\xce\x7f" +
	"\x01\x00\x00\xff\xffi\x00:\xc7"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x9f93db577b084c4b,
		0x9fe65a406fba5583,
		0xa33c37f7a390a3bf,
		0xa94bdd0b5449db25,
		0xb14b5203df9fa7c8,
		0xcdc156a3faea6ebf,
		0xd0ec85d808eaabd9,
		0xd2afeaf36c70c91f,
		0xd40e2f0673af616c,
		0xd80e24dbc41b1f0d,
		0xd8eba41bb8f5845d,
		0xda5a597d0c3a72a4,
		0xe4a48c5d3f25d6d0,
		0xf42beb36cd723e35,
		0xf8e8ab21195eede9)
}
