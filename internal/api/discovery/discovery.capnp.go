// Code generated by capnpc-go. DO NOT EDIT.

package discovery

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type DiscoveryService capnp.Client

// DiscoveryService_TypeID is the unique identifier for the type DiscoveryService.
const DiscoveryService_TypeID = 0xe4a48c5d3f25d6d0

func (c DiscoveryService) Provider(ctx context.Context, params func(DiscoveryService_provider_Params) error) (DiscoveryService_provider_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "provider",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_provider_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_provider_Results_Future{Future: ans.Future()}, release
}
func (c DiscoveryService) Locator(ctx context.Context, params func(DiscoveryService_locator_Params) error) (DiscoveryService_locator_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "locator",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DiscoveryService_locator_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DiscoveryService_locator_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c DiscoveryService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c DiscoveryService) AddRef() DiscoveryService {
	return DiscoveryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c DiscoveryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c DiscoveryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c DiscoveryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (DiscoveryService) DecodeFromPtr(p capnp.Ptr) DiscoveryService {
	return DiscoveryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c DiscoveryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c DiscoveryService) IsSame(other DiscoveryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c DiscoveryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c DiscoveryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A DiscoveryService_Server is a DiscoveryService with a local implementation.
type DiscoveryService_Server interface {
	Provider(context.Context, DiscoveryService_provider) error

	Locator(context.Context, DiscoveryService_locator) error
}

// DiscoveryService_NewServer creates a new Server from an implementation of DiscoveryService_Server.
func DiscoveryService_NewServer(s DiscoveryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DiscoveryService_Methods(nil, s), s, c)
}

// DiscoveryService_ServerToClient creates a new Client from an implementation of DiscoveryService_Server.
// The caller is responsible for calling Release on the returned Client.
func DiscoveryService_ServerToClient(s DiscoveryService_Server) DiscoveryService {
	return DiscoveryService(capnp.NewClient(DiscoveryService_NewServer(s)))
}

// DiscoveryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DiscoveryService_Methods(methods []server.Method, s DiscoveryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      0,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "provider",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provider(ctx, DiscoveryService_provider{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4a48c5d3f25d6d0,
			MethodID:      1,
			InterfaceName: "discovery.capnp:DiscoveryService",
			MethodName:    "locator",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locator(ctx, DiscoveryService_locator{call})
		},
	})

	return methods
}

// DiscoveryService_provider holds the state for a server call to DiscoveryService.provider.
// See server.Call for documentation.
type DiscoveryService_provider struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_provider) Args() DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_provider) AllocResults() (DiscoveryService_provider_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(r), err
}

// DiscoveryService_locator holds the state for a server call to DiscoveryService.locator.
// See server.Call for documentation.
type DiscoveryService_locator struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DiscoveryService_locator) Args() DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DiscoveryService_locator) AllocResults() (DiscoveryService_locator_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(r), err
}

// DiscoveryService_List is a list of DiscoveryService.
type DiscoveryService_List = capnp.CapList[DiscoveryService]

// NewDiscoveryService creates a new list of DiscoveryService.
func NewDiscoveryService_List(s *capnp.Segment, sz int32) (DiscoveryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[DiscoveryService](l), err
}

type DiscoveryService_provider_Params capnp.Struct

// DiscoveryService_provider_Params_TypeID is the unique identifier for the type DiscoveryService_provider_Params.
const DiscoveryService_provider_Params_TypeID = 0xf8e8ab21195eede9

func NewDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func NewRootDiscoveryService_provider_Params(s *capnp.Segment) (DiscoveryService_provider_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Params(st), err
}

func ReadRootDiscoveryService_provider_Params(msg *capnp.Message) (DiscoveryService_provider_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Params(root.Struct()), err
}

func (s DiscoveryService_provider_Params) String() string {
	str, _ := text.Marshal(0xf8e8ab21195eede9, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Params {
	return DiscoveryService_provider_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_provider_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_provider_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_provider_Params_List is a list of DiscoveryService_provider_Params.
type DiscoveryService_provider_Params_List = capnp.StructList[DiscoveryService_provider_Params]

// NewDiscoveryService_provider_Params creates a new list of DiscoveryService_provider_Params.
func NewDiscoveryService_provider_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Params](l), err
}

// DiscoveryService_provider_Params_Future is a wrapper for a DiscoveryService_provider_Params promised by a client call.
type DiscoveryService_provider_Params_Future struct{ *capnp.Future }

func (f DiscoveryService_provider_Params_Future) Struct() (DiscoveryService_provider_Params, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_provider_Params(p.Struct()), err
}

type DiscoveryService_provider_Results capnp.Struct

// DiscoveryService_provider_Results_TypeID is the unique identifier for the type DiscoveryService_provider_Results.
const DiscoveryService_provider_Results_TypeID = 0xb14b5203df9fa7c8

func NewDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func NewRootDiscoveryService_provider_Results(s *capnp.Segment) (DiscoveryService_provider_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_provider_Results(st), err
}

func ReadRootDiscoveryService_provider_Results(msg *capnp.Message) (DiscoveryService_provider_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_provider_Results(root.Struct()), err
}

func (s DiscoveryService_provider_Results) String() string {
	str, _ := text.Marshal(0xb14b5203df9fa7c8, capnp.Struct(s))
	return str
}

func (s DiscoveryService_provider_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_provider_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_provider_Results {
	return DiscoveryService_provider_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_provider_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_provider_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_provider_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_provider_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_provider_Results) Provider() Provider {
	p, _ := capnp.Struct(s).Ptr(0)
	return Provider(p.Interface().Client())
}

func (s DiscoveryService_provider_Results) HasProvider() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_provider_Results) SetProvider(v Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_provider_Results_List is a list of DiscoveryService_provider_Results.
type DiscoveryService_provider_Results_List = capnp.StructList[DiscoveryService_provider_Results]

// NewDiscoveryService_provider_Results creates a new list of DiscoveryService_provider_Results.
func NewDiscoveryService_provider_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_provider_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_provider_Results](l), err
}

// DiscoveryService_provider_Results_Future is a wrapper for a DiscoveryService_provider_Results promised by a client call.
type DiscoveryService_provider_Results_Future struct{ *capnp.Future }

func (f DiscoveryService_provider_Results_Future) Struct() (DiscoveryService_provider_Results, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_provider_Results(p.Struct()), err
}
func (p DiscoveryService_provider_Results_Future) Provider() Provider {
	return Provider(p.Future.Field(0, nil).Client())
}

type DiscoveryService_locator_Params capnp.Struct

// DiscoveryService_locator_Params_TypeID is the unique identifier for the type DiscoveryService_locator_Params.
const DiscoveryService_locator_Params_TypeID = 0xd40e2f0673af616c

func NewDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func NewRootDiscoveryService_locator_Params(s *capnp.Segment) (DiscoveryService_locator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Params(st), err
}

func ReadRootDiscoveryService_locator_Params(msg *capnp.Message) (DiscoveryService_locator_Params, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Params(root.Struct()), err
}

func (s DiscoveryService_locator_Params) String() string {
	str, _ := text.Marshal(0xd40e2f0673af616c, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Params) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Params {
	return DiscoveryService_locator_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscoveryService_locator_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscoveryService_locator_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DiscoveryService_locator_Params_List is a list of DiscoveryService_locator_Params.
type DiscoveryService_locator_Params_List = capnp.StructList[DiscoveryService_locator_Params]

// NewDiscoveryService_locator_Params creates a new list of DiscoveryService_locator_Params.
func NewDiscoveryService_locator_Params_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Params](l), err
}

// DiscoveryService_locator_Params_Future is a wrapper for a DiscoveryService_locator_Params promised by a client call.
type DiscoveryService_locator_Params_Future struct{ *capnp.Future }

func (f DiscoveryService_locator_Params_Future) Struct() (DiscoveryService_locator_Params, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_locator_Params(p.Struct()), err
}

type DiscoveryService_locator_Results capnp.Struct

// DiscoveryService_locator_Results_TypeID is the unique identifier for the type DiscoveryService_locator_Results.
const DiscoveryService_locator_Results_TypeID = 0xda5a597d0c3a72a4

func NewDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func NewRootDiscoveryService_locator_Results(s *capnp.Segment) (DiscoveryService_locator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DiscoveryService_locator_Results(st), err
}

func ReadRootDiscoveryService_locator_Results(msg *capnp.Message) (DiscoveryService_locator_Results, error) {
	root, err := msg.Root()
	return DiscoveryService_locator_Results(root.Struct()), err
}

func (s DiscoveryService_locator_Results) String() string {
	str, _ := text.Marshal(0xda5a597d0c3a72a4, capnp.Struct(s))
	return str
}

func (s DiscoveryService_locator_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscoveryService_locator_Results) DecodeFromPtr(p capnp.Ptr) DiscoveryService_locator_Results {
	return DiscoveryService_locator_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscoveryService_locator_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscoveryService_locator_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscoveryService_locator_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscoveryService_locator_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscoveryService_locator_Results) Locator() Locator {
	p, _ := capnp.Struct(s).Ptr(0)
	return Locator(p.Interface().Client())
}

func (s DiscoveryService_locator_Results) HasLocator() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscoveryService_locator_Results) SetLocator(v Locator) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// DiscoveryService_locator_Results_List is a list of DiscoveryService_locator_Results.
type DiscoveryService_locator_Results_List = capnp.StructList[DiscoveryService_locator_Results]

// NewDiscoveryService_locator_Results creates a new list of DiscoveryService_locator_Results.
func NewDiscoveryService_locator_Results_List(s *capnp.Segment, sz int32) (DiscoveryService_locator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[DiscoveryService_locator_Results](l), err
}

// DiscoveryService_locator_Results_Future is a wrapper for a DiscoveryService_locator_Results promised by a client call.
type DiscoveryService_locator_Results_Future struct{ *capnp.Future }

func (f DiscoveryService_locator_Results_Future) Struct() (DiscoveryService_locator_Results, error) {
	p, err := f.Future.Ptr()
	return DiscoveryService_locator_Results(p.Struct()), err
}
func (p DiscoveryService_locator_Results_Future) Locator() Locator {
	return Locator(p.Future.Field(0, nil).Client())
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcdc156a3faea6ebf

func (c Provider) Provide(ctx context.Context, params func(Provider_provide_Params) error) (Provider_provide_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Provider",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_provide_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_provide_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Provide(context.Context, Provider_provide) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcdc156a3faea6ebf,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Provider",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, Provider_provide{call})
		},
	})

	return methods
}

// Provider_provide holds the state for a server call to Provider.provide.
// See server.Call for documentation.
type Provider_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_provide) Args() Provider_provide_Params {
	return Provider_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_provide) AllocResults() (Provider_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_provide_Params capnp.Struct

// Provider_provide_Params_TypeID is the unique identifier for the type Provider_provide_Params.
const Provider_provide_Params_TypeID = 0xd80e24dbc41b1f0d

func NewProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func NewRootProvider_provide_Params(s *capnp.Segment) (Provider_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_provide_Params(st), err
}

func ReadRootProvider_provide_Params(msg *capnp.Message) (Provider_provide_Params, error) {
	root, err := msg.Root()
	return Provider_provide_Params(root.Struct()), err
}

func (s Provider_provide_Params) String() string {
	str, _ := text.Marshal(0xd80e24dbc41b1f0d, capnp.Struct(s))
	return str
}

func (s Provider_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Params) DecodeFromPtr(p capnp.Ptr) Provider_provide_Params {
	return Provider_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_provide_Params) Location() (SignedLocation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SignedLocation(p.Struct()), err
}

func (s Provider_provide_Params) HasLocation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_provide_Params) SetLocation(v SignedLocation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Provider_provide_Params) NewLocation() (SignedLocation, error) {
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_provide_Params_List is a list of Provider_provide_Params.
type Provider_provide_Params_List = capnp.StructList[Provider_provide_Params]

// NewProvider_provide_Params creates a new list of Provider_provide_Params.
func NewProvider_provide_Params_List(s *capnp.Segment, sz int32) (Provider_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_provide_Params](l), err
}

// Provider_provide_Params_Future is a wrapper for a Provider_provide_Params promised by a client call.
type Provider_provide_Params_Future struct{ *capnp.Future }

func (f Provider_provide_Params_Future) Struct() (Provider_provide_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Params(p.Struct()), err
}
func (p Provider_provide_Params_Future) Location() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(0, nil)}
}

type Provider_provide_Results capnp.Struct

// Provider_provide_Results_TypeID is the unique identifier for the type Provider_provide_Results.
const Provider_provide_Results_TypeID = 0x9f93db577b084c4b

func NewProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func NewRootProvider_provide_Results(s *capnp.Segment) (Provider_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Provider_provide_Results(st), err
}

func ReadRootProvider_provide_Results(msg *capnp.Message) (Provider_provide_Results, error) {
	root, err := msg.Root()
	return Provider_provide_Results(root.Struct()), err
}

func (s Provider_provide_Results) String() string {
	str, _ := text.Marshal(0x9f93db577b084c4b, capnp.Struct(s))
	return str
}

func (s Provider_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_provide_Results) DecodeFromPtr(p capnp.Ptr) Provider_provide_Results {
	return Provider_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Provider_provide_Results_List is a list of Provider_provide_Results.
type Provider_provide_Results_List = capnp.StructList[Provider_provide_Results]

// NewProvider_provide_Results creates a new list of Provider_provide_Results.
func NewProvider_provide_Results_List(s *capnp.Segment, sz int32) (Provider_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Provider_provide_Results](l), err
}

// Provider_provide_Results_Future is a wrapper for a Provider_provide_Results promised by a client call.
type Provider_provide_Results_Future struct{ *capnp.Future }

func (f Provider_provide_Results_Future) Struct() (Provider_provide_Results, error) {
	p, err := f.Future.Ptr()
	return Provider_provide_Results(p.Struct()), err
}

type Locator capnp.Client

// Locator_TypeID is the unique identifier for the type Locator.
const Locator_TypeID = 0xd8eba41bb8f5845d

func (c Locator) FindProviders(ctx context.Context, params func(Locator_findProviders_Params) error) (Locator_findProviders_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Locator",
			MethodName:    "findProviders",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Locator_findProviders_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Locator_findProviders_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Locator) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Locator) AddRef() Locator {
	return Locator(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Locator) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Locator) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Locator) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Locator) DecodeFromPtr(p capnp.Ptr) Locator {
	return Locator(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Locator) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Locator) IsSame(other Locator) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Locator) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Locator) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Locator_Server is a Locator with a local implementation.
type Locator_Server interface {
	FindProviders(context.Context, Locator_findProviders) error
}

// Locator_NewServer creates a new Server from an implementation of Locator_Server.
func Locator_NewServer(s Locator_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Locator_Methods(nil, s), s, c)
}

// Locator_ServerToClient creates a new Client from an implementation of Locator_Server.
// The caller is responsible for calling Release on the returned Client.
func Locator_ServerToClient(s Locator_Server) Locator {
	return Locator(capnp.NewClient(Locator_NewServer(s)))
}

// Locator_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Locator_Methods(methods []server.Method, s Locator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd8eba41bb8f5845d,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Locator",
			MethodName:    "findProviders",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindProviders(ctx, Locator_findProviders{call})
		},
	})

	return methods
}

// Locator_findProviders holds the state for a server call to Locator.findProviders.
// See server.Call for documentation.
type Locator_findProviders struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Locator_findProviders) Args() Locator_findProviders_Params {
	return Locator_findProviders_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Locator_findProviders) AllocResults() (Locator_findProviders_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(r), err
}

// Locator_List is a list of Locator.
type Locator_List = capnp.CapList[Locator]

// NewLocator creates a new list of Locator.
func NewLocator_List(s *capnp.Segment, sz int32) (Locator_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Locator](l), err
}

type Locator_findProviders_Params capnp.Struct

// Locator_findProviders_Params_TypeID is the unique identifier for the type Locator_findProviders_Params.
const Locator_findProviders_Params_TypeID = 0xa94bdd0b5449db25

func NewLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func NewRootLocator_findProviders_Params(s *capnp.Segment) (Locator_findProviders_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Locator_findProviders_Params(st), err
}

func ReadRootLocator_findProviders_Params(msg *capnp.Message) (Locator_findProviders_Params, error) {
	root, err := msg.Root()
	return Locator_findProviders_Params(root.Struct()), err
}

func (s Locator_findProviders_Params) String() string {
	str, _ := text.Marshal(0xa94bdd0b5449db25, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Params) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Params {
	return Locator_findProviders_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Locator_findProviders_Params) Chan() channel.Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return channel.Sender(p.Interface().Client())
}

func (s Locator_findProviders_Params) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Locator_findProviders_Params) SetChan(v channel.Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Locator_findProviders_Params_List is a list of Locator_findProviders_Params.
type Locator_findProviders_Params_List = capnp.StructList[Locator_findProviders_Params]

// NewLocator_findProviders_Params creates a new list of Locator_findProviders_Params.
func NewLocator_findProviders_Params_List(s *capnp.Segment, sz int32) (Locator_findProviders_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Locator_findProviders_Params](l), err
}

// Locator_findProviders_Params_Future is a wrapper for a Locator_findProviders_Params promised by a client call.
type Locator_findProviders_Params_Future struct{ *capnp.Future }

func (f Locator_findProviders_Params_Future) Struct() (Locator_findProviders_Params, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Params(p.Struct()), err
}
func (p Locator_findProviders_Params_Future) Chan() channel.Sender {
	return channel.Sender(p.Future.Field(0, nil).Client())
}

type Locator_findProviders_Results capnp.Struct

// Locator_findProviders_Results_TypeID is the unique identifier for the type Locator_findProviders_Results.
const Locator_findProviders_Results_TypeID = 0xa33c37f7a390a3bf

func NewLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func NewRootLocator_findProviders_Results(s *capnp.Segment) (Locator_findProviders_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Locator_findProviders_Results(st), err
}

func ReadRootLocator_findProviders_Results(msg *capnp.Message) (Locator_findProviders_Results, error) {
	root, err := msg.Root()
	return Locator_findProviders_Results(root.Struct()), err
}

func (s Locator_findProviders_Results) String() string {
	str, _ := text.Marshal(0xa33c37f7a390a3bf, capnp.Struct(s))
	return str
}

func (s Locator_findProviders_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Locator_findProviders_Results) DecodeFromPtr(p capnp.Ptr) Locator_findProviders_Results {
	return Locator_findProviders_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Locator_findProviders_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Locator_findProviders_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Locator_findProviders_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Locator_findProviders_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Locator_findProviders_Results_List is a list of Locator_findProviders_Results.
type Locator_findProviders_Results_List = capnp.StructList[Locator_findProviders_Results]

// NewLocator_findProviders_Results creates a new list of Locator_findProviders_Results.
func NewLocator_findProviders_Results_List(s *capnp.Segment, sz int32) (Locator_findProviders_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Locator_findProviders_Results](l), err
}

// Locator_findProviders_Results_Future is a wrapper for a Locator_findProviders_Results promised by a client call.
type Locator_findProviders_Results_Future struct{ *capnp.Future }

func (f Locator_findProviders_Results_Future) Struct() (Locator_findProviders_Results, error) {
	p, err := f.Future.Ptr()
	return Locator_findProviders_Results(p.Struct()), err
}

type SignedLocation capnp.Struct

// SignedLocation_TypeID is the unique identifier for the type SignedLocation.
const SignedLocation_TypeID = 0x95d97bd68e78b8dc

func NewSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func NewRootSignedLocation(s *capnp.Segment) (SignedLocation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedLocation(st), err
}

func ReadRootSignedLocation(msg *capnp.Message) (SignedLocation, error) {
	root, err := msg.Root()
	return SignedLocation(root.Struct()), err
}

func (s SignedLocation) String() string {
	str, _ := text.Marshal(0x95d97bd68e78b8dc, capnp.Struct(s))
	return str
}

func (s SignedLocation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SignedLocation) DecodeFromPtr(p capnp.Ptr) SignedLocation {
	return SignedLocation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SignedLocation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SignedLocation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SignedLocation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SignedLocation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SignedLocation) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedLocation) HasSignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SignedLocation) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SignedLocation) Location() (Location, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Location(p.Struct()), err
}

func (s SignedLocation) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SignedLocation) SetLocation(v Location) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated Location struct, preferring placement in s's segment.
func (s SignedLocation) NewLocation() (Location, error) {
	ss, err := NewLocation(capnp.Struct(s).Segment())
	if err != nil {
		return Location{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SignedLocation_List is a list of SignedLocation.
type SignedLocation_List = capnp.StructList[SignedLocation]

// NewSignedLocation creates a new list of SignedLocation.
func NewSignedLocation_List(s *capnp.Segment, sz int32) (SignedLocation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SignedLocation](l), err
}

// SignedLocation_Future is a wrapper for a SignedLocation promised by a client call.
type SignedLocation_Future struct{ *capnp.Future }

func (f SignedLocation_Future) Struct() (SignedLocation, error) {
	p, err := f.Future.Ptr()
	return SignedLocation(p.Struct()), err
}
func (p SignedLocation_Future) Location() Location_Future {
	return Location_Future{Future: p.Future.Field(1, nil)}
}

type Location capnp.Struct
type Location_Which uint16

const (
	Location_Which_maddrs Location_Which = 0
	Location_Which_anchor Location_Which = 1
	Location_Which_custom Location_Which = 2
)

func (w Location_Which) String() string {
	const s = "maddrsanchorcustom"
	switch w {
	case Location_Which_maddrs:
		return s[0:6]
	case Location_Which_anchor:
		return s[6:12]
	case Location_Which_custom:
		return s[12:18]

	}
	return "Location_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0xe61540af32cf81b6

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0xe61540af32cf81b6, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Location) Which() Location_Which {
	return Location_Which(capnp.Struct(s).Uint16(0))
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location) Maddrs() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != maddrs")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s Location) HasMaddrs() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetMaddrs(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMaddrs sets the maddrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Location) NewMaddrs(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(0, 0)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Location) Anchor() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != anchor")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Location) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) AnchorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Location) SetAnchor(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(1, v)
}

func (s Location) Custom() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != custom")
	}
	return capnp.Struct(s).Ptr(1)
}

func (s Location) HasCustom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetCustom(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(1, v)
}
func (s Location) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Location) HasMeta() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Location) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Custom() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Message capnp.Struct
type Message_Which uint16

const (
	Message_Which_request  Message_Which = 0
	Message_Which_response Message_Which = 1
)

func (w Message_Which) String() string {
	const s = "requestresponse"
	switch w {
	case Message_Which_request:
		return s[0:7]
	case Message_Which_response:
		return s[7:15]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xd2afeaf36c70c91f

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xd2afeaf36c70c91f, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Message) Which() Message_Which {
	return Message_Which(capnp.Struct(s).Uint16(0))
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Request() (Message_Request, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != request")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Request(p.Struct()), err
}

func (s Message) HasRequest() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetRequest(v Message_Request) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Message_Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Message_Request, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewMessage_Request(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Request{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Message) Response() (Message_Response, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != response")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Message_Response(p.Struct()), err
}

func (s Message) HasResponse() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) SetResponse(v Message_Response) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Message_Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Message_Response, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewMessage_Response(capnp.Struct(s).Segment())
	if err != nil {
		return Message_Response{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}
func (p Message_Future) Request() Message_Request_Future {
	return Message_Request_Future{Future: p.Future.Field(0, nil)}
}
func (p Message_Future) Response() Message_Response_Future {
	return Message_Response_Future{Future: p.Future.Field(0, nil)}
}

type Message_Request capnp.Struct

// Message_Request_TypeID is the unique identifier for the type Message_Request.
const Message_Request_TypeID = 0x9fe65a406fba5583

func NewMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func NewRootMessage_Request(s *capnp.Segment) (Message_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Message_Request(st), err
}

func ReadRootMessage_Request(msg *capnp.Message) (Message_Request, error) {
	root, err := msg.Root()
	return Message_Request(root.Struct()), err
}

func (s Message_Request) String() string {
	str, _ := text.Marshal(0x9fe65a406fba5583, capnp.Struct(s))
	return str
}

func (s Message_Request) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Request) DecodeFromPtr(p capnp.Ptr) Message_Request {
	return Message_Request(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Request) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Request) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Request) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Request) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Message_Request_List is a list of Message_Request.
type Message_Request_List = capnp.StructList[Message_Request]

// NewMessage_Request creates a new list of Message_Request.
func NewMessage_Request_List(s *capnp.Segment, sz int32) (Message_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Message_Request](l), err
}

// Message_Request_Future is a wrapper for a Message_Request promised by a client call.
type Message_Request_Future struct{ *capnp.Future }

func (f Message_Request_Future) Struct() (Message_Request, error) {
	p, err := f.Future.Ptr()
	return Message_Request(p.Struct()), err
}

type Message_Response capnp.Struct

// Message_Response_TypeID is the unique identifier for the type Message_Response.
const Message_Response_TypeID = 0xf42beb36cd723e35

func NewMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func NewRootMessage_Response(s *capnp.Segment) (Message_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Message_Response(st), err
}

func ReadRootMessage_Response(msg *capnp.Message) (Message_Response, error) {
	root, err := msg.Root()
	return Message_Response(root.Struct()), err
}

func (s Message_Response) String() string {
	str, _ := text.Marshal(0xf42beb36cd723e35, capnp.Struct(s))
	return str
}

func (s Message_Response) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message_Response) DecodeFromPtr(p capnp.Ptr) Message_Response {
	return Message_Response(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message_Response) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message_Response) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message_Response) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message_Response) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message_Response) Location() (SignedLocation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SignedLocation(p.Struct()), err
}

func (s Message_Response) HasLocation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message_Response) SetLocation(v SignedLocation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocation sets the location field to a newly
// allocated SignedLocation struct, preferring placement in s's segment.
func (s Message_Response) NewLocation() (SignedLocation, error) {
	ss, err := NewSignedLocation(capnp.Struct(s).Segment())
	if err != nil {
		return SignedLocation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Message_Response_List is a list of Message_Response.
type Message_Response_List = capnp.StructList[Message_Response]

// NewMessage_Response creates a new list of Message_Response.
func NewMessage_Response_List(s *capnp.Segment, sz int32) (Message_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Message_Response](l), err
}

// Message_Response_Future is a wrapper for a Message_Response promised by a client call.
type Message_Response_Future struct{ *capnp.Future }

func (f Message_Response_Future) Struct() (Message_Response, error) {
	p, err := f.Future.Ptr()
	return Message_Response(p.Struct()), err
}
func (p Message_Response_Future) Location() SignedLocation_Future {
	return SignedLocation_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcba4f486a351ac3 = "x\xda\xa4Ukh\x1cU\x14>\xe7\xde;;\xdb\xba" +
	"\x9b\xec\xed\xa4\xda\x07a)\xa4h}\xc4\xd6\x1a-\xa1" +
	"\xb8kh\x89MR\xdc\xbb\xf5A\x0b\x11\x87\xdd1\xdd" +
	"\x92\xdd\x8d3\x9b\xd8RC\xa8\x16\xa4\xa2\xd2\xaa\x85\x0a" +
	"J\x94\x04DD\x82\xf8\xa0VJ\xb1*h!\xf8@" +
	"J5\x06\xff\xd8RS\xea\x1f-J1\xbdrgv" +
	"v&k\xa2\x01\xff]\xee|\xf7<\xbe\xf3\x9do\xd6" +
	"\xbfG\xd2lC\xbc3\x0aD<\xaaE\xe4\x8f\xc7\xf7" +
	"\xbepv\xff\xf7G\x81'P~\xba\xaam\xcf}\xf7" +
	"\x9f\xf8\x0b4\xa2\x03\x18K\xd8Uc9S'\xce\x9e" +
	"\x00\x94\xdd=\xd1\xfd\x0fO\xbd4\x0a|%\x02\xa8\x0f" +
	"\x1b\x07Y\x17\x02\x93O?x\xa2\x9c\xdeua\x14\xf8" +
	"\x0a\x94\xc9/\x07\xfa\x7f\x9b\x99\xf8\xd6C\x98\x8c\xa0Q" +
	"d:Pyj\xec\xf0\xd8\x1fwo\x1eS\xa8\xea\xfb" +
	"m\xccV\xef\xd7Nm{\xe0\xba\xe9\xee\xb7\xbc/\x1a" +
	"\xaaOml\x0f\x02\x1a\xf7\xb2\x14\xa0\xfc\xe2\xcd\xd1\x9f" +
	"h\xb6\xfb]\xe0kj\x80#\xecE\x05x\xc3\x05\x9c" +
	"*\xcd\\\x1d{\xe8\x93I\xe0\x09\x1a\xf4\x01h|\xce" +
	"\xce\x18\xdf\xb8ML\xb2N\xe3\x8a:\x05\x15\x8a\x04\x86" +
	"\xba\xde\x8a:\x010\xa6\xd9i\xe3<\xbb\x11\xc0\x98u" +
	"\xdb\xee7'\x9c\xc8\xed\x0d\xdf\x85s\xf7jO\xa9\xdc" +
	"\x05M\xe5\x8e'W\x7f6\xd5\xd2p\xce\xe3\xc5\x03\x1c" +
	"\xd2:\x14\xe0\x88\x0b\xe8=x\xe5\xf8\xea\xf1K\xe7\xfe" +
	"Q\xdc\x07\xdai\xe3\xa4\xa6\x8a\xfbH\xeb4\xce\xab\x93" +
	"\x1c\xb7\xdbc\xc3;w\xfd\x10N7\xa9=\xab\xa2M" +
	"\xbb\xd1\xbe>\xbb6\xd5\xfb\xdc\xf8\xcf\xf5\xd16\xcej" +
	"K\xd1\x88G\xdc\xd1E\x9e1z\xd5I~x\xe0\xab" +
	";&\xd2\xcb/\xd4\xf7Ju\x0a`l\x8d\x9c1\x84" +
	"\xc2m\xdc\x1eI\"\xa0l\xbb\xc7\x9e\xbc\xeb\xd2-\xbf" +
	"\xcf\x9d\xa4W\xc5\xb0\xbe\x14\x8d\xe7u\x15\xff\x90\xae*" +
	"\xf9\xe5\xf2#+\xd7\xbc}\xf1\xcfp\xa9\xef\xe8n\xa9" +
	"'\xf5\x14\xec\x94\xf9\x82\x93+\x0fY6\xd9\xd7\x9a3" +
	"\x07J\x03\xed;\x0a}%+\xdfSN\xe5\xccJ\xa1" +
	"\\\xca \x8a(e\x00\x0c\x01\xf8\xba,\x80\xb8\x89\xa2" +
	"\xb8\x93 GlBu\xb9\xa1\x0b@\xac\xa7(6\x13" +
	"\x94N\xa1\xafdV\x06m@\x0b\xe3@0\xae\xc6S" +
	"\xf6b\x01\x00&\x82v\x011\x01X\xab\x80\xf9\x15d" +
	"\xec\xf2P!o\xd9\xad\x03\xde\xa1%k9\x83\xfd\x15" +
	"\x07\xa0\x86\xa5>v\xbb\xe58f\x9f\xd5\x9a\xb5\x1e\x1f" +
	"\xb4\x9c\x0adp\x9e\x80=*\x7f\xd9n}\xacP\xca" +
	"\xfb\xc1\x9d\x96\xac\x95t\xc3.\x16\x9f1\x1bm\xb3\xe8" +
	"\x08Vc#~3\x80\x88R\x14[\x086\xe6v\x9b" +
	"%\xe4\xf2\xd7\xebg65]\xfe\xf8\"\x00\xa4\x91c" +
	"R0\x82\xe1K\x8e7\x08\x86\x88\x98\xa1\x88\x89`\xb9" +
	"\x01\x91\x87\xc8\xd0\xfcZ\xb6T/\xf6\xed\xb0\xec\xa1B" +
	"\xce\xf2I\xb1\xab\xac\xe0\x9c\x82\xd4$b\x14\xc5\x0a\x82" +
	"\xd2\x07*\xd6y\xb0}u\x89H=\xeb\xa08\x14\x8c" +
	"j\x00\xb5\xb5A\xdfW8\xef\x00\xc25}\xa4\x1a<" +
	"\x8da\xc2I\xddT@D\x11C\xce\xb3\xa4#$^" +
	"\xadk\xa4:4\x99\xb5\x9c\x81r\xc9\xb1\xc0\xa5\x93\xc5" +
	"\xa4\xf4\xc4\xd6\x01 Z(\x8a\xf5\x04\xe3xMzj" +
	"\xbbM\xf5x+E\xb1\x89\xe0\x88\xedE\xc0D\x90\xa5" +
	"\xaa*;\x88\x89\x89 m\x9d\xe6\x16\xa6\xb9\xdf\xd3@" +
	"K\xc6TC\x87\xf9\xa6\xdeD\xb0\xb1d\x16-\x8c\x01" +
	"\xc1\xd8\xa2\x94<O\xb4\xf0\xc8\xe6.JX\x1b\x89\xf9" +
	"FV\xd5ih`\xbeK\xa3o\xe4\x9c\xdb@\xf8\x12" +
	"]\xfaZ\x86\xa4\xab\xe6\xb9\x83\xfbo\x1aj+\x18." +
	"\xbd# b\xa4\x0aD\x1eXi\x9d\xd2\xe8BI<" +
	"\xc5E\xdd\x06|\xbfB\xffw\xa2\xdc\x85\xf0u:\x06" +
	".\x8f\xbe\xff\xf2f\xa5F\xae\x87\xa5\x9e\xae\x95\xb2\x80" +
	"6{j\x1c\xab\xacM\xb5n\x86W\x01\x88\xbd\x14\xc5" +
	"A\x82\xcd(e\xd5\xdc\x0e\xb4\x03\x88')\x8ac\x04" +
	"\x9b\xc95uM\x00\xf8Qu}\x98\xa2x\x95`3" +
	"\x9dU\xd7\x14\x80\xbf\xa2\xae_\xa6(^'\xc8\x19i" +
	"B\x06\xc0_S\x829FQ\xbcO\x90\x16\xf2\xbe\\" +
	"RE3\x9f\xb7\x1dl\x00\xd7\x0b\x94Y6\x00\xa6\xcc" +
	"Rnw\xd9\xae\x81r\x83N\xa5\\\xc4e@p\x19" +
	"`c\xd1\xaa\x98\xfe\x8b\x98\xf7\xe2\xdfL\xd1\xdf\x01O" +
	"!\xffCs\x8b\xf0\xa3\xaa\xb6\x17\xb5*\x7f\x07\x00\x00" +
	"\xff\xff>y\x8a\x83"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x95d97bd68e78b8dc,
		0x9f93db577b084c4b,
		0x9fe65a406fba5583,
		0xa33c37f7a390a3bf,
		0xa94bdd0b5449db25,
		0xb14b5203df9fa7c8,
		0xcdc156a3faea6ebf,
		0xd2afeaf36c70c91f,
		0xd40e2f0673af616c,
		0xd80e24dbc41b1f0d,
		0xd8eba41bb8f5845d,
		0xda5a597d0c3a72a4,
		0xe4a48c5d3f25d6d0,
		0xe61540af32cf81b6,
		0xf42beb36cd723e35,
		0xf8e8ab21195eede9)
}
