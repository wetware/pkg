// Code generated by capnpc-go. DO NOT EDIT.

package discovery

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Discovery capnp.Client

// Discovery_TypeID is the unique identifier for the type Discovery.
const Discovery_TypeID = 0xf55e02a4ceb2c822

func (c Discovery) Advertise(ctx context.Context, params func(Discovery_advertise_Params) error) (Discovery_advertise_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf55e02a4ceb2c822,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Discovery",
			MethodName:    "advertise",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Discovery_advertise_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Discovery_advertise_Results_Future{Future: ans.Future()}, release
}
func (c Discovery) FindPeers(ctx context.Context, params func(Discovery_findPeers_Params) error) (Discovery_findPeers_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf55e02a4ceb2c822,
			MethodID:      1,
			InterfaceName: "discovery.capnp:Discovery",
			MethodName:    "findPeers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Discovery_findPeers_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Discovery_findPeers_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Discovery) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Discovery) AddRef() Discovery {
	return Discovery(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Discovery) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Discovery) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Discovery) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Discovery) DecodeFromPtr(p capnp.Ptr) Discovery {
	return Discovery(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Discovery) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Discovery) IsSame(other Discovery) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Discovery) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Discovery) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Discovery_Server is a Discovery with a local implementation.
type Discovery_Server interface {
	Advertise(context.Context, Discovery_advertise) error

	FindPeers(context.Context, Discovery_findPeers) error
}

// Discovery_NewServer creates a new Server from an implementation of Discovery_Server.
func Discovery_NewServer(s Discovery_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Discovery_Methods(nil, s), s, c)
}

// Discovery_ServerToClient creates a new Client from an implementation of Discovery_Server.
// The caller is responsible for calling Release on the returned Client.
func Discovery_ServerToClient(s Discovery_Server) Discovery {
	return Discovery(capnp.NewClient(Discovery_NewServer(s)))
}

// Discovery_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Discovery_Methods(methods []server.Method, s Discovery_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf55e02a4ceb2c822,
			MethodID:      0,
			InterfaceName: "discovery.capnp:Discovery",
			MethodName:    "advertise",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Advertise(ctx, Discovery_advertise{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf55e02a4ceb2c822,
			MethodID:      1,
			InterfaceName: "discovery.capnp:Discovery",
			MethodName:    "findPeers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindPeers(ctx, Discovery_findPeers{call})
		},
	})

	return methods
}

// Discovery_advertise holds the state for a server call to Discovery.advertise.
// See server.Call for documentation.
type Discovery_advertise struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Discovery_advertise) Args() Discovery_advertise_Params {
	return Discovery_advertise_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Discovery_advertise) AllocResults() (Discovery_advertise_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_advertise_Results(r), err
}

// Discovery_findPeers holds the state for a server call to Discovery.findPeers.
// See server.Call for documentation.
type Discovery_findPeers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Discovery_findPeers) Args() Discovery_findPeers_Params {
	return Discovery_findPeers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Discovery_findPeers) AllocResults() (Discovery_findPeers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_findPeers_Results(r), err
}

// Discovery_List is a list of Discovery.
type Discovery_List = capnp.CapList[Discovery]

// NewDiscovery creates a new list of Discovery.
func NewDiscovery_List(s *capnp.Segment, sz int32) (Discovery_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Discovery](l), err
}

type Discovery_Holder capnp.Client

// Discovery_Holder_TypeID is the unique identifier for the type Discovery_Holder.
const Discovery_Holder_TypeID = 0x83dadd6dc6fed279

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Discovery_Holder) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Discovery_Holder) AddRef() Discovery_Holder {
	return Discovery_Holder(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Discovery_Holder) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Discovery_Holder) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Discovery_Holder) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Discovery_Holder) DecodeFromPtr(p capnp.Ptr) Discovery_Holder {
	return Discovery_Holder(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Discovery_Holder) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Discovery_Holder) IsSame(other Discovery_Holder) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Discovery_Holder) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Discovery_Holder) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Discovery_Holder_Server is a Discovery_Holder with a local implementation.
type Discovery_Holder_Server interface {
}

// Discovery_Holder_NewServer creates a new Server from an implementation of Discovery_Holder_Server.
func Discovery_Holder_NewServer(s Discovery_Holder_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Discovery_Holder_Methods(nil, s), s, c)
}

// Discovery_Holder_ServerToClient creates a new Client from an implementation of Discovery_Holder_Server.
// The caller is responsible for calling Release on the returned Client.
func Discovery_Holder_ServerToClient(s Discovery_Holder_Server) Discovery_Holder {
	return Discovery_Holder(capnp.NewClient(Discovery_Holder_NewServer(s)))
}

// Discovery_Holder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Discovery_Holder_Methods(methods []server.Method, s Discovery_Holder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

// Discovery_Holder_List is a list of Discovery_Holder.
type Discovery_Holder_List = capnp.CapList[Discovery_Holder]

// NewDiscovery_Holder creates a new list of Discovery_Holder.
func NewDiscovery_Holder_List(s *capnp.Segment, sz int32) (Discovery_Holder_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Discovery_Holder](l), err
}

type Discovery_advertise_Params capnp.Struct

// Discovery_advertise_Params_TypeID is the unique identifier for the type Discovery_advertise_Params.
const Discovery_advertise_Params_TypeID = 0xee97f34f3aa6d31e

func NewDiscovery_advertise_Params(s *capnp.Segment) (Discovery_advertise_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Discovery_advertise_Params(st), err
}

func NewRootDiscovery_advertise_Params(s *capnp.Segment) (Discovery_advertise_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Discovery_advertise_Params(st), err
}

func ReadRootDiscovery_advertise_Params(msg *capnp.Message) (Discovery_advertise_Params, error) {
	root, err := msg.Root()
	return Discovery_advertise_Params(root.Struct()), err
}

func (s Discovery_advertise_Params) String() string {
	str, _ := text.Marshal(0xee97f34f3aa6d31e, capnp.Struct(s))
	return str
}

func (s Discovery_advertise_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Discovery_advertise_Params) DecodeFromPtr(p capnp.Ptr) Discovery_advertise_Params {
	return Discovery_advertise_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Discovery_advertise_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Discovery_advertise_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Discovery_advertise_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Discovery_advertise_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Discovery_advertise_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Discovery_advertise_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Discovery_advertise_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Discovery_advertise_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Discovery_advertise_Params) Addrs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Discovery_advertise_Params) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Discovery_advertise_Params) SetAddrs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Discovery_advertise_Params) NewAddrs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Discovery_advertise_Params_List is a list of Discovery_advertise_Params.
type Discovery_advertise_Params_List = capnp.StructList[Discovery_advertise_Params]

// NewDiscovery_advertise_Params creates a new list of Discovery_advertise_Params.
func NewDiscovery_advertise_Params_List(s *capnp.Segment, sz int32) (Discovery_advertise_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Discovery_advertise_Params](l), err
}

// Discovery_advertise_Params_Future is a wrapper for a Discovery_advertise_Params promised by a client call.
type Discovery_advertise_Params_Future struct{ *capnp.Future }

func (p Discovery_advertise_Params_Future) Struct() (Discovery_advertise_Params, error) {
	s, err := p.Future.Struct()
	return Discovery_advertise_Params(s), err
}

type Discovery_advertise_Results capnp.Struct

// Discovery_advertise_Results_TypeID is the unique identifier for the type Discovery_advertise_Results.
const Discovery_advertise_Results_TypeID = 0xa89fcdd856bdc236

func NewDiscovery_advertise_Results(s *capnp.Segment) (Discovery_advertise_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_advertise_Results(st), err
}

func NewRootDiscovery_advertise_Results(s *capnp.Segment) (Discovery_advertise_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_advertise_Results(st), err
}

func ReadRootDiscovery_advertise_Results(msg *capnp.Message) (Discovery_advertise_Results, error) {
	root, err := msg.Root()
	return Discovery_advertise_Results(root.Struct()), err
}

func (s Discovery_advertise_Results) String() string {
	str, _ := text.Marshal(0xa89fcdd856bdc236, capnp.Struct(s))
	return str
}

func (s Discovery_advertise_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Discovery_advertise_Results) DecodeFromPtr(p capnp.Ptr) Discovery_advertise_Results {
	return Discovery_advertise_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Discovery_advertise_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Discovery_advertise_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Discovery_advertise_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Discovery_advertise_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Discovery_advertise_Results) Holder() Discovery_Holder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Discovery_Holder(p.Interface().Client())
}

func (s Discovery_advertise_Results) HasHolder() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Discovery_advertise_Results) SetHolder(v Discovery_Holder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Discovery_advertise_Results_List is a list of Discovery_advertise_Results.
type Discovery_advertise_Results_List = capnp.StructList[Discovery_advertise_Results]

// NewDiscovery_advertise_Results creates a new list of Discovery_advertise_Results.
func NewDiscovery_advertise_Results_List(s *capnp.Segment, sz int32) (Discovery_advertise_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Discovery_advertise_Results](l), err
}

// Discovery_advertise_Results_Future is a wrapper for a Discovery_advertise_Results promised by a client call.
type Discovery_advertise_Results_Future struct{ *capnp.Future }

func (p Discovery_advertise_Results_Future) Struct() (Discovery_advertise_Results, error) {
	s, err := p.Future.Struct()
	return Discovery_advertise_Results(s), err
}

func (p Discovery_advertise_Results_Future) Holder() Discovery_Holder {
	return Discovery_Holder(p.Future.Field(0, nil).Client())
}

type Discovery_findPeers_Params capnp.Struct

// Discovery_findPeers_Params_TypeID is the unique identifier for the type Discovery_findPeers_Params.
const Discovery_findPeers_Params_TypeID = 0xf956b41a66945be6

func NewDiscovery_findPeers_Params(s *capnp.Segment) (Discovery_findPeers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_findPeers_Params(st), err
}

func NewRootDiscovery_findPeers_Params(s *capnp.Segment) (Discovery_findPeers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_findPeers_Params(st), err
}

func ReadRootDiscovery_findPeers_Params(msg *capnp.Message) (Discovery_findPeers_Params, error) {
	root, err := msg.Root()
	return Discovery_findPeers_Params(root.Struct()), err
}

func (s Discovery_findPeers_Params) String() string {
	str, _ := text.Marshal(0xf956b41a66945be6, capnp.Struct(s))
	return str
}

func (s Discovery_findPeers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Discovery_findPeers_Params) DecodeFromPtr(p capnp.Ptr) Discovery_findPeers_Params {
	return Discovery_findPeers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Discovery_findPeers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Discovery_findPeers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Discovery_findPeers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Discovery_findPeers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Discovery_findPeers_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Discovery_findPeers_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Discovery_findPeers_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Discovery_findPeers_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Discovery_findPeers_Params_List is a list of Discovery_findPeers_Params.
type Discovery_findPeers_Params_List = capnp.StructList[Discovery_findPeers_Params]

// NewDiscovery_findPeers_Params creates a new list of Discovery_findPeers_Params.
func NewDiscovery_findPeers_Params_List(s *capnp.Segment, sz int32) (Discovery_findPeers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Discovery_findPeers_Params](l), err
}

// Discovery_findPeers_Params_Future is a wrapper for a Discovery_findPeers_Params promised by a client call.
type Discovery_findPeers_Params_Future struct{ *capnp.Future }

func (p Discovery_findPeers_Params_Future) Struct() (Discovery_findPeers_Params, error) {
	s, err := p.Future.Struct()
	return Discovery_findPeers_Params(s), err
}

type Discovery_findPeers_Results capnp.Struct

// Discovery_findPeers_Results_TypeID is the unique identifier for the type Discovery_findPeers_Results.
const Discovery_findPeers_Results_TypeID = 0x98b754ce6c52aa6b

func NewDiscovery_findPeers_Results(s *capnp.Segment) (Discovery_findPeers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_findPeers_Results(st), err
}

func NewRootDiscovery_findPeers_Results(s *capnp.Segment) (Discovery_findPeers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Discovery_findPeers_Results(st), err
}

func ReadRootDiscovery_findPeers_Results(msg *capnp.Message) (Discovery_findPeers_Results, error) {
	root, err := msg.Root()
	return Discovery_findPeers_Results(root.Struct()), err
}

func (s Discovery_findPeers_Results) String() string {
	str, _ := text.Marshal(0x98b754ce6c52aa6b, capnp.Struct(s))
	return str
}

func (s Discovery_findPeers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Discovery_findPeers_Results) DecodeFromPtr(p capnp.Ptr) Discovery_findPeers_Results {
	return Discovery_findPeers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Discovery_findPeers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Discovery_findPeers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Discovery_findPeers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Discovery_findPeers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Discovery_findPeers_Results) Addrs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Discovery_findPeers_Results) HasAddrs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Discovery_findPeers_Results) SetAddrs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Discovery_findPeers_Results) NewAddrs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Discovery_findPeers_Results_List is a list of Discovery_findPeers_Results.
type Discovery_findPeers_Results_List = capnp.StructList[Discovery_findPeers_Results]

// NewDiscovery_findPeers_Results creates a new list of Discovery_findPeers_Results.
func NewDiscovery_findPeers_Results_List(s *capnp.Segment, sz int32) (Discovery_findPeers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Discovery_findPeers_Results](l), err
}

// Discovery_findPeers_Results_Future is a wrapper for a Discovery_findPeers_Results promised by a client call.
type Discovery_findPeers_Results_Future struct{ *capnp.Future }

func (p Discovery_findPeers_Results_Future) Struct() (Discovery_findPeers_Results, error) {
	s, err := p.Future.Struct()
	return Discovery_findPeers_Results(s), err
}

const schema_fcba4f486a351ac3 = "x\xda\x8c\x92?h\x14O\x1c\xc5\xdf\x9b\xd9\xfb\xed\xfd" +
	"4Q\x87\x8d\x08\x07*\xc8\x15I !1hq\xcd" +
	"]\x91\"]v\x0eI\xa1 \xac\xd9\x09\x9e\xde]\xc2" +
	"n\xfep\xa5X\x88\xbd\xa2\x9d\x04DD\xb0P\x04A" +
	"\xb0Q\x10-\x0c\x18\x11DHaci#\x16\x82:" +
	"2\x97\xdb\xbb\xf3\x0f\x9aba\xf9\xeeg\xdf\xcc\xfb\xbe" +
	"7\xb1\x9b\x15orpMB\xe8\xe1\xdc\x7f\xb6\xb5\xf9" +
	"\xfdYc\xeb\xddE\xa8\x82\xb4G\x9e\xdf\xdf\xb8)N" +
	"\x7f\x068\xb5\xce]\x0c\xee\xd1\x07\x82\xbb\xf4\xdd\x03\xd8" +
	"\xf3w\xaa\xf5\x8d\x13\x0f\xafC\x15\x08\xe4\xdcl\xea*" +
	"\xcf\x10\x0c\xd6Y\x06\xed\xf1'\x8f\xe7\xde\xbe\xbcq\xbb" +
	"\x1fx\xb5\x0dl\xb5\x81C\xafo\x95f?]\xfb\xd8" +
	"\x01\x84\x03\xbe\xf1\xa4\x03\xfe\x17k`\xef\x0ej\x9f\xb4" +
	"O\x0b\xc7\xce\xcd\xcc>\xfa\x0a0X\x11\x9b\xc1\x05q" +
	"\x00\x08.\x8bK\xc1{\xf7\xa7\xfdp\xea\xcaB\xe1\xc1" +
	"\xdc\x97\xfe\xe3^\x88\xb6\xda\x1bQ\xc6\x98\x8dk\xe9\xfc" +
	"\xe2\xaaIdk|>Zj.\x95\xa6;\x83\xd6\xf8" +
	"\xccb=6\x09\x10\x92\xa1\xcc\x85d\x17\xf6~\x87\x17" +
	"j\xcd84&I\x8bU\x93\xae\xf8\xf5\xe5T{\xd2" +
	"\x03<\x02j\xf0(\xa0\xf3\x92\xba(x8\x8a\xe3$" +
	"\xe5\x1e0\x94\xe4\x00\x84{\xfd\x9br\x14\xaf\x9ad\xb9" +
	"\x96\x9a?*\x97:\xcaC\x82\xe5\xb3\xed\x0bS\xf52" +
	"\x03\xa9v\xaa\x1eFI$\x1b\xa9\xcew\xc5GF\x01" +
	"]\x94\xd4\x13\x82\x8a\x1c\xa2\x1b\x8e9/\xc3\x92zZ" +
	"po3j\x98\xb6\x87\x01\xfc\xc3\x98\xf8\xf5h\xb6\xb4" +
	"G\xf6\xd5\x8b\xa5\xf2\xf6\xc6u^\xe6\x80n\x11\x98U" +
	"FMV!\xd4\x88Ovce\xd67u\xd0}\xdb" +
	"\xef\xdb\xcc\x0fh*\xb4Y*`Z\xe1\x8e\x13\xcc6" +
	"\xd1\xb7\xe6\xd1\xde\x9a\x7f2\xfd#\x00\x00\xff\xff\x09\x9c" +
	"\xe5\xbc"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0x83dadd6dc6fed279,
		0x98b754ce6c52aa6b,
		0xa89fcdd856bdc236,
		0xee97f34f3aa6d31e,
		0xf55e02a4ceb2c822,
		0xf956b41a66945be6)
}
