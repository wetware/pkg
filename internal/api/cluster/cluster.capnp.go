// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Record struct{ capnp.Struct }

// Record_TypeID is the unique identifier for the type Record.
const Record_TypeID = 0x82a35d1a82458a4a

func NewRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func NewRootRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func ReadRootRecord(msg *capnp.Message) (Record, error) {
	root, err := msg.Root()
	return Record{root.Struct()}, err
}

func (s Record) String() string {
	str, _ := text.Marshal(0x82a35d1a82458a4a, s.Struct)
	return str
}

func (s Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Record_List is a list of Record.
type Record_List struct{ capnp.List }

// NewRecord creates a new list of Record.
func NewRecord_List(s *capnp.Segment, sz int32) (Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Record_List{l}, err
}

func (s Record_List) At(i int) Record { return Record{s.List.Struct(i)} }

func (s Record_List) Set(i int, v Record) error { return s.List.SetStruct(i, v.Struct) }

func (s Record_List) String() string {
	str, _ := text.MarshalList(0x82a35d1a82458a4a, s.List)
	return str
}

// Record_Future is a wrapper for a Record promised by a client call.
type Record_Future struct{ *capnp.Future }

func (p Record_Future) Struct() (Record, error) {
	s, err := p.Future.Struct()
	return Record{s}, err
}

type Iteration struct{ capnp.Struct }

// Iteration_TypeID is the unique identifier for the type Iteration.
const Iteration_TypeID = 0xdc52a9a7339d80cd

func NewIteration(s *capnp.Segment) (Iteration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Iteration{st}, err
}

func NewRootIteration(s *capnp.Segment) (Iteration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Iteration{st}, err
}

func ReadRootIteration(msg *capnp.Message) (Iteration, error) {
	root, err := msg.Root()
	return Iteration{root.Struct()}, err
}

func (s Iteration) String() string {
	str, _ := text.Marshal(0xdc52a9a7339d80cd, s.Struct)
	return str
}

func (s Iteration) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s Iteration) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Iteration) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s Iteration) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Iteration) Deadline() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Iteration) SetDeadline(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Iteration_List is a list of Iteration.
type Iteration_List struct{ capnp.List }

// NewIteration creates a new list of Iteration.
func NewIteration_List(s *capnp.Segment, sz int32) (Iteration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Iteration_List{l}, err
}

func (s Iteration_List) At(i int) Iteration { return Iteration{s.List.Struct(i)} }

func (s Iteration_List) Set(i int, v Iteration) error { return s.List.SetStruct(i, v.Struct) }

func (s Iteration_List) String() string {
	str, _ := text.MarshalList(0xdc52a9a7339d80cd, s.List)
	return str
}

// Iteration_Future is a wrapper for a Iteration promised by a client call.
type Iteration_Future struct{ *capnp.Future }

func (p Iteration_Future) Struct() (Iteration, error) {
	s, err := p.Future.Struct()
	return Iteration{s}, err
}

func (p Iteration_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

type Cluster struct{ Client *capnp.Client }

// Cluster_TypeID is the unique identifier for the type Cluster.
const Cluster_TypeID = 0x89ea60fe991cc330

func (c Cluster) Iter(ctx context.Context, params func(Cluster_iter_Params) error) (Cluster_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_iter_Results_Future{Future: ans.Future()}, release
}
func (c Cluster) Lookup(ctx context.Context, params func(Cluster_lookup_Params) error) (Cluster_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_lookup_Results_Future{Future: ans.Future()}, release
}

func (c Cluster) AddRef() Cluster {
	return Cluster{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster) Release() {
	c.Client.Release()
}

// A Cluster_Server is a Cluster with a local implementation.
type Cluster_Server interface {
	Iter(context.Context, Cluster_iter) error

	Lookup(context.Context, Cluster_lookup) error
}

// Cluster_NewServer creates a new Server from an implementation of Cluster_Server.
func Cluster_NewServer(s Cluster_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Methods(nil, s), s, c, policy)
}

// Cluster_ServerToClient creates a new Client from an implementation of Cluster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ServerToClient(s Cluster_Server, policy *server.Policy) Cluster {
	return Cluster{Client: capnp.NewClient(Cluster_NewServer(s, policy))}
}

// Cluster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Methods(methods []server.Method, s Cluster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, Cluster_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, Cluster_lookup{call})
		},
	})

	return methods
}

// Cluster_iter holds the state for a server call to Cluster.iter.
// See server.Call for documentation.
type Cluster_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_iter) Args() Cluster_iter_Params {
	return Cluster_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_iter) AllocResults() (Cluster_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{Struct: r}, err
}

// Cluster_lookup holds the state for a server call to Cluster.lookup.
// See server.Call for documentation.
type Cluster_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_lookup) Args() Cluster_lookup_Params {
	return Cluster_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_lookup) AllocResults() (Cluster_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{Struct: r}, err
}

type Cluster_Handler struct{ Client *capnp.Client }

// Cluster_Handler_TypeID is the unique identifier for the type Cluster_Handler.
const Cluster_Handler_TypeID = 0xa8bd4ea1c77154c3

func (c Cluster_Handler) Handle(ctx context.Context, params func(Cluster_Handler_handle_Params) error) (Cluster_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Cluster_Handler) AddRef() Cluster_Handler {
	return Cluster_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster_Handler) Release() {
	c.Client.Release()
}

// A Cluster_Handler_Server is a Cluster_Handler with a local implementation.
type Cluster_Handler_Server interface {
	Handle(context.Context, Cluster_Handler_handle) error
}

// Cluster_Handler_NewServer creates a new Server from an implementation of Cluster_Handler_Server.
func Cluster_Handler_NewServer(s Cluster_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Handler_Methods(nil, s), s, c, policy)
}

// Cluster_Handler_ServerToClient creates a new Client from an implementation of Cluster_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Handler_ServerToClient(s Cluster_Handler_Server, policy *server.Policy) Cluster_Handler {
	return Cluster_Handler{Client: capnp.NewClient(Cluster_Handler_NewServer(s, policy))}
}

// Cluster_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Handler_Methods(methods []server.Method, s Cluster_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Cluster_Handler_handle{call})
		},
	})

	return methods
}

// Cluster_Handler_handle holds the state for a server call to Cluster_Handler.handle.
// See server.Call for documentation.
type Cluster_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Handler_handle) Args() Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_Handler_handle) AllocResults() (Cluster_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{Struct: r}, err
}

type Cluster_Handler_handle_Params struct{ capnp.Struct }

// Cluster_Handler_handle_Params_TypeID is the unique identifier for the type Cluster_Handler_handle_Params.
const Cluster_Handler_handle_Params_TypeID = 0x8f27eaf1e95f34b6

func NewCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func NewRootCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func ReadRootCluster_Handler_handle_Params(msg *capnp.Message) (Cluster_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Params{root.Struct()}, err
}

func (s Cluster_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8f27eaf1e95f34b6, s.Struct)
	return str
}

func (s Cluster_Handler_handle_Params) Iterations() (Iteration_List, error) {
	p, err := s.Struct.Ptr(0)
	return Iteration_List{List: p.List()}, err
}

func (s Cluster_Handler_handle_Params) HasIterations() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Handler_handle_Params) SetIterations(v Iteration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIterations sets the iterations field to a newly
// allocated Iteration_List, preferring placement in s's segment.
func (s Cluster_Handler_handle_Params) NewIterations(n int32) (Iteration_List, error) {
	l, err := NewIteration_List(s.Struct.Segment(), n)
	if err != nil {
		return Iteration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Cluster_Handler_handle_Params_List is a list of Cluster_Handler_handle_Params.
type Cluster_Handler_handle_Params_List struct{ capnp.List }

// NewCluster_Handler_handle_Params creates a new list of Cluster_Handler_handle_Params.
func NewCluster_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_Handler_handle_Params_List{l}, err
}

func (s Cluster_Handler_handle_Params_List) At(i int) Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Params_List) Set(i int, v Cluster_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8f27eaf1e95f34b6, s.List)
	return str
}

// Cluster_Handler_handle_Params_Future is a wrapper for a Cluster_Handler_handle_Params promised by a client call.
type Cluster_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Params_Future) Struct() (Cluster_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Params{s}, err
}

type Cluster_Handler_handle_Results struct{ capnp.Struct }

// Cluster_Handler_handle_Results_TypeID is the unique identifier for the type Cluster_Handler_handle_Results.
const Cluster_Handler_handle_Results_TypeID = 0xc97d97ad2c77fb6e

func NewCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func NewRootCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func ReadRootCluster_Handler_handle_Results(msg *capnp.Message) (Cluster_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Results{root.Struct()}, err
}

func (s Cluster_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xc97d97ad2c77fb6e, s.Struct)
	return str
}

// Cluster_Handler_handle_Results_List is a list of Cluster_Handler_handle_Results.
type Cluster_Handler_handle_Results_List struct{ capnp.List }

// NewCluster_Handler_handle_Results creates a new list of Cluster_Handler_handle_Results.
func NewCluster_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_Handler_handle_Results_List{l}, err
}

func (s Cluster_Handler_handle_Results_List) At(i int) Cluster_Handler_handle_Results {
	return Cluster_Handler_handle_Results{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Results_List) Set(i int, v Cluster_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xc97d97ad2c77fb6e, s.List)
	return str
}

// Cluster_Handler_handle_Results_Future is a wrapper for a Cluster_Handler_handle_Results promised by a client call.
type Cluster_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Results_Future) Struct() (Cluster_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Results{s}, err
}

type Cluster_iter_Params struct{ capnp.Struct }

// Cluster_iter_Params_TypeID is the unique identifier for the type Cluster_iter_Params.
const Cluster_iter_Params_TypeID = 0xfecdf9227b3adc3e

func NewCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func NewRootCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func ReadRootCluster_iter_Params(msg *capnp.Message) (Cluster_iter_Params, error) {
	root, err := msg.Root()
	return Cluster_iter_Params{root.Struct()}, err
}

func (s Cluster_iter_Params) String() string {
	str, _ := text.Marshal(0xfecdf9227b3adc3e, s.Struct)
	return str
}

func (s Cluster_iter_Params) Handler() Cluster_Handler {
	p, _ := s.Struct.Ptr(0)
	return Cluster_Handler{Client: p.Interface().Client()}
}

func (s Cluster_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_iter_Params) SetHandler(v Cluster_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Cluster_iter_Params) BufSize() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Cluster_iter_Params) SetBufSize(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Cluster_iter_Params_List is a list of Cluster_iter_Params.
type Cluster_iter_Params_List struct{ capnp.List }

// NewCluster_iter_Params creates a new list of Cluster_iter_Params.
func NewCluster_iter_Params_List(s *capnp.Segment, sz int32) (Cluster_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_iter_Params_List{l}, err
}

func (s Cluster_iter_Params_List) At(i int) Cluster_iter_Params {
	return Cluster_iter_Params{s.List.Struct(i)}
}

func (s Cluster_iter_Params_List) Set(i int, v Cluster_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xfecdf9227b3adc3e, s.List)
	return str
}

// Cluster_iter_Params_Future is a wrapper for a Cluster_iter_Params promised by a client call.
type Cluster_iter_Params_Future struct{ *capnp.Future }

func (p Cluster_iter_Params_Future) Struct() (Cluster_iter_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Params{s}, err
}

func (p Cluster_iter_Params_Future) Handler() Cluster_Handler {
	return Cluster_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Cluster_iter_Results struct{ capnp.Struct }

// Cluster_iter_Results_TypeID is the unique identifier for the type Cluster_iter_Results.
const Cluster_iter_Results_TypeID = 0xb4b55ec8b670d8c2

func NewCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func NewRootCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func ReadRootCluster_iter_Results(msg *capnp.Message) (Cluster_iter_Results, error) {
	root, err := msg.Root()
	return Cluster_iter_Results{root.Struct()}, err
}

func (s Cluster_iter_Results) String() string {
	str, _ := text.Marshal(0xb4b55ec8b670d8c2, s.Struct)
	return str
}

// Cluster_iter_Results_List is a list of Cluster_iter_Results.
type Cluster_iter_Results_List struct{ capnp.List }

// NewCluster_iter_Results creates a new list of Cluster_iter_Results.
func NewCluster_iter_Results_List(s *capnp.Segment, sz int32) (Cluster_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_iter_Results_List{l}, err
}

func (s Cluster_iter_Results_List) At(i int) Cluster_iter_Results {
	return Cluster_iter_Results{s.List.Struct(i)}
}

func (s Cluster_iter_Results_List) Set(i int, v Cluster_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xb4b55ec8b670d8c2, s.List)
	return str
}

// Cluster_iter_Results_Future is a wrapper for a Cluster_iter_Results promised by a client call.
type Cluster_iter_Results_Future struct{ *capnp.Future }

func (p Cluster_iter_Results_Future) Struct() (Cluster_iter_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Results{s}, err
}

type Cluster_lookup_Params struct{ capnp.Struct }

// Cluster_lookup_Params_TypeID is the unique identifier for the type Cluster_lookup_Params.
const Cluster_lookup_Params_TypeID = 0x932fba9e18ce7bd3

func NewCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func NewRootCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func ReadRootCluster_lookup_Params(msg *capnp.Message) (Cluster_lookup_Params, error) {
	root, err := msg.Root()
	return Cluster_lookup_Params{root.Struct()}, err
}

func (s Cluster_lookup_Params) String() string {
	str, _ := text.Marshal(0x932fba9e18ce7bd3, s.Struct)
	return str
}

func (s Cluster_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// Cluster_lookup_Params_List is a list of Cluster_lookup_Params.
type Cluster_lookup_Params_List struct{ capnp.List }

// NewCluster_lookup_Params creates a new list of Cluster_lookup_Params.
func NewCluster_lookup_Params_List(s *capnp.Segment, sz int32) (Cluster_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_lookup_Params_List{l}, err
}

func (s Cluster_lookup_Params_List) At(i int) Cluster_lookup_Params {
	return Cluster_lookup_Params{s.List.Struct(i)}
}

func (s Cluster_lookup_Params_List) Set(i int, v Cluster_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0x932fba9e18ce7bd3, s.List)
	return str
}

// Cluster_lookup_Params_Future is a wrapper for a Cluster_lookup_Params promised by a client call.
type Cluster_lookup_Params_Future struct{ *capnp.Future }

func (p Cluster_lookup_Params_Future) Struct() (Cluster_lookup_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Params{s}, err
}

type Cluster_lookup_Results struct{ capnp.Struct }

// Cluster_lookup_Results_TypeID is the unique identifier for the type Cluster_lookup_Results.
const Cluster_lookup_Results_TypeID = 0xa9f91e1c8368a4dc

func NewCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func NewRootCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func ReadRootCluster_lookup_Results(msg *capnp.Message) (Cluster_lookup_Results, error) {
	root, err := msg.Root()
	return Cluster_lookup_Results{root.Struct()}, err
}

func (s Cluster_lookup_Results) String() string {
	str, _ := text.Marshal(0xa9f91e1c8368a4dc, s.Struct)
	return str
}

func (s Cluster_lookup_Results) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s Cluster_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Results) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s Cluster_lookup_Results) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Cluster_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s Cluster_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// Cluster_lookup_Results_List is a list of Cluster_lookup_Results.
type Cluster_lookup_Results_List struct{ capnp.List }

// NewCluster_lookup_Results creates a new list of Cluster_lookup_Results.
func NewCluster_lookup_Results_List(s *capnp.Segment, sz int32) (Cluster_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_lookup_Results_List{l}, err
}

func (s Cluster_lookup_Results_List) At(i int) Cluster_lookup_Results {
	return Cluster_lookup_Results{s.List.Struct(i)}
}

func (s Cluster_lookup_Results_List) Set(i int, v Cluster_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xa9f91e1c8368a4dc, s.List)
	return str
}

// Cluster_lookup_Results_Future is a wrapper for a Cluster_lookup_Results promised by a client call.
type Cluster_lookup_Results_Future struct{ *capnp.Future }

func (p Cluster_lookup_Results_Future) Struct() (Cluster_lookup_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Results{s}, err
}

func (p Cluster_lookup_Results_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x8c\x93Oh\\U\x14\xc6\xbf\xef\xde7\xbe)" +
	"L3\xb9\xbe\x10m(-\x84\x8a5\xb45\xa5\x15\xca" +
	",\x9c1\xb6\x98\x14+sc]T\xf0\xcfk\xe6I" +
	"\xc7\xbe\xceL\xde\xcc\x100\x84H\\\x88n\\\xb8\x10" +
	"\x17\x11D\xa3F\"\x82\x98,\x84l\x92\x85\xba\x88\x1b" +
	"\x17\xba\xc8\xd2\x8d\x81,\"D\x08j\x9e\xdc7y\xf3" +
	"\x9c!FW\xef\xdd{\x0e\xe7\xfb\xce\xef\x9c;\xbc\xc0" +
	"\x82\xb8\x98\xfa\xc9\x02\xf4\x95\xd4}\xe1\xf5\xb7\xaf\xcd\x0d" +
	"\xbc\xf0\xd1\x1ct\x0fE\xb8\xf4\xc9\xe8/\xe9\xa5\xdf\xff" +
	"D\x8a6\xe0h\xf1\xb9sK\x98\xbf\xe7\xc4\x97`8" +
	"\xbc~\xf2\xfd\xfd\x97\xb7\xde\x82\xea\x91I.\xe8l\x8b" +
	"\xaf\x9c]\xf1\x00\xe0\xfc%\xdetnH\x1b\x08W." +
	"\xbf\xf4\xeb\xce\xd6\xc3\xef@\x9d\"Z\x05/=&o" +
	"\x13t\x9e\x90y0\xfcq\xfa\x87\x07?\xf8\xe6\xd1w" +
	"\xa1\xfa\xdb\x09M9h\x12f\xa2\x84\xf5\x9b\x93\xdf~" +
	"\xf8\xcc\xeagP\xfd2\xd1\x06\x9dy\xf9\x9b\xb3hD" +
	"\x9c\x05\xf9\x94\xb3\x11\xc9m~|\xe7\x8d\x93\xa7\xf6\x16" +
	"\xa1\xfb\xd9.\xb7,\x87L\xb9U9\x05\x86k?\xd7" +
	"V\xbe{q\xf9\xeb\x96\x9ee\xe2'\xac\x01\xc2\x0a+" +
	"\x7fL\x9d\xfb\xe2\xbd\x99\xef[V\xa3\x08\xadWMd" +
	"\xe3\xf5\xf9K\x9f.\x8eo\x1a<\xec\xc6\xb3-\xd7\x9c" +
	"\xdd\xc8\xc6N$\xf0\xf8fnzpoc\xbf\xc3\x82" +
	"\xb6\xee7\x16nYS8\x1fN\xf8\xcdz\xc3\x0b." +
	"p\xc2\xadUj\xb9q/;Q\x0dJERg\xa4" +
	"\x05X\x04\xd4\xb5!@\x17$\xf5\xd3\x82d\x9f\xa9\xa4" +
	"\xc6\x06\x01}UR\x17\x05\x95`\x1f\x05\xa0n\x98\xcb" +
	"QI}S0[\xf3\xbc\x80\x19\x08f@\xbb\xd1\xf0" +
	"\x99\x82`\x0a\xb4\xeb\xde$\x8fA\xf0\x18\xd8-\xff\xa4" +
	"\x7f::k\x8b\xff\x84\xcd\x91\xd9Q\xb7R\xf2\xbd@" +
	"\xa7e\x0ah\xf7\xc5\x98\xa0\xba8\x04\xa1\x1e\xb2\x99\x0c" +
	"\x911\x7fu\"\x07\xa1\x8e\xdb\xd9r\xc3\x0b\x0a\xcc\xfb" +
	"\xd5\xea\xddf\xad\xc0\"\x13}+\xd6o\x1d\x0f\xd4." +
	"\xdc\x89\xbeg\x8an`\xbb\xf7\xea\xdaj#9\xfe<" +
	"\xa03\x92\xfa\xac`h\xea\xba\x8dr\x15\xb2Rg\x0f" +
	"X\x94do2(\xd0\\\xb6\xa5d\xa7T\xcb\xcda" +
	"\x129@\xa7%u\x9f`\xde\xc0\x1c\xbb\x1a\xe3l\xd7" +
	"\x12\xdd\xb6OG\xbe\xcd\xf8\xac\x08T\xbc\xf2\x8c\x17J" +
	")\x03#e\xe7[\xaduR8\xdc\xda\xb8W\xcf6" +
	"\xfdF]\xa7\xdb\xde\x1e1\xde\xceH\xea\xe1d#\xce" +
	"\x0f\x00\xfa\xac\xa4\xbe,\x98\x0f<\xb3F\xecM^3" +
	"\xc8^PV\xef\x92\x10\xe4\xbf\x0314\x8df\xd3\x97" +
	"\x8d\xfa\xff\x1cPl\xb1\x1b\xcc\xd8\xc1d*0H\xfe" +
	"\xc3\xffu@\x9f\x93\xd4W\x8e\xf0\x1f\x96<\xb7\xe4\x97" +
	"+\x1e\x80x\xa1\x8fl\xa4\xe8\x06\xee=v\xb0\x1b9" +
	"D{$a7\xdb\xea)\xa0J^\x00H\x05\xce\xde" +
	"n\xbe\xf2l\xf95\x8f\x16\x04-\xf0\xef\x00\x00\x00\xff" +
	"\xff\x02#m\xe8"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x82a35d1a82458a4a,
		0x89ea60fe991cc330,
		0x8f27eaf1e95f34b6,
		0x932fba9e18ce7bd3,
		0xa8bd4ea1c77154c3,
		0xa9f91e1c8368a4dc,
		0xb4b55ec8b670d8c2,
		0xc97d97ad2c77fb6e,
		0xdc52a9a7339d80cd,
		0xfecdf9227b3adc3e)
}
