// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Cluster struct{ Client *capnp.Client }

// Cluster_TypeID is the unique identifier for the type Cluster.
const Cluster_TypeID = 0x89ea60fe991cc330

func (c Cluster) Iter(ctx context.Context, params func(Cluster_iter_Params) error) (Cluster_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_iter_Results_Future{Future: ans.Future()}, release
}
func (c Cluster) Lookup(ctx context.Context, params func(Cluster_lookup_Params) error) (Cluster_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_lookup_Results_Future{Future: ans.Future()}, release
}

func (c Cluster) AddRef() Cluster {
	return Cluster{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster) Release() {
	c.Client.Release()
}

// A Cluster_Server is a Cluster with a local implementation.
type Cluster_Server interface {
	Iter(context.Context, Cluster_iter) error

	Lookup(context.Context, Cluster_lookup) error
}

// Cluster_NewServer creates a new Server from an implementation of Cluster_Server.
func Cluster_NewServer(s Cluster_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Methods(nil, s), s, c, policy)
}

// Cluster_ServerToClient creates a new Client from an implementation of Cluster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ServerToClient(s Cluster_Server, policy *server.Policy) Cluster {
	return Cluster{Client: capnp.NewClient(Cluster_NewServer(s, policy))}
}

// Cluster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Methods(methods []server.Method, s Cluster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, Cluster_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, Cluster_lookup{call})
		},
	})

	return methods
}

// Cluster_iter holds the state for a server call to Cluster.iter.
// See server.Call for documentation.
type Cluster_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_iter) Args() Cluster_iter_Params {
	return Cluster_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_iter) AllocResults() (Cluster_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{Struct: r}, err
}

// Cluster_lookup holds the state for a server call to Cluster.lookup.
// See server.Call for documentation.
type Cluster_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_lookup) Args() Cluster_lookup_Params {
	return Cluster_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_lookup) AllocResults() (Cluster_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{Struct: r}, err
}

type Cluster_Handler struct{ Client *capnp.Client }

// Cluster_Handler_TypeID is the unique identifier for the type Cluster_Handler.
const Cluster_Handler_TypeID = 0xa8bd4ea1c77154c3

func (c Cluster_Handler) Handle(ctx context.Context, params func(Cluster_Handler_handle_Params) error) (Cluster_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Cluster_Handler) AddRef() Cluster_Handler {
	return Cluster_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster_Handler) Release() {
	c.Client.Release()
}

// A Cluster_Handler_Server is a Cluster_Handler with a local implementation.
type Cluster_Handler_Server interface {
	Handle(context.Context, Cluster_Handler_handle) error
}

// Cluster_Handler_NewServer creates a new Server from an implementation of Cluster_Handler_Server.
func Cluster_Handler_NewServer(s Cluster_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Handler_Methods(nil, s), s, c, policy)
}

// Cluster_Handler_ServerToClient creates a new Client from an implementation of Cluster_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Handler_ServerToClient(s Cluster_Handler_Server, policy *server.Policy) Cluster_Handler {
	return Cluster_Handler{Client: capnp.NewClient(Cluster_Handler_NewServer(s, policy))}
}

// Cluster_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Handler_Methods(methods []server.Method, s Cluster_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Cluster_Handler_handle{call})
		},
	})

	return methods
}

// Cluster_Handler_handle holds the state for a server call to Cluster_Handler.handle.
// See server.Call for documentation.
type Cluster_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Handler_handle) Args() Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_Handler_handle) AllocResults() (Cluster_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{Struct: r}, err
}

type Cluster_Handler_handle_Params struct{ capnp.Struct }

// Cluster_Handler_handle_Params_TypeID is the unique identifier for the type Cluster_Handler_handle_Params.
const Cluster_Handler_handle_Params_TypeID = 0x8f27eaf1e95f34b6

func NewCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func NewRootCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func ReadRootCluster_Handler_handle_Params(msg *capnp.Message) (Cluster_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Params{root.Struct()}, err
}

func (s Cluster_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8f27eaf1e95f34b6, s.Struct)
	return str
}

func (s Cluster_Handler_handle_Params) Records() (Cluster_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return Cluster_Record_List{List: p.List()}, err
}

func (s Cluster_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Handler_handle_Params) SetRecords(v Cluster_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated Cluster_Record_List, preferring placement in s's segment.
func (s Cluster_Handler_handle_Params) NewRecords(n int32) (Cluster_Record_List, error) {
	l, err := NewCluster_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return Cluster_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Cluster_Handler_handle_Params_List is a list of Cluster_Handler_handle_Params.
type Cluster_Handler_handle_Params_List struct{ capnp.List }

// NewCluster_Handler_handle_Params creates a new list of Cluster_Handler_handle_Params.
func NewCluster_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_Handler_handle_Params_List{l}, err
}

func (s Cluster_Handler_handle_Params_List) At(i int) Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Params_List) Set(i int, v Cluster_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8f27eaf1e95f34b6, s.List)
	return str
}

// Cluster_Handler_handle_Params_Future is a wrapper for a Cluster_Handler_handle_Params promised by a client call.
type Cluster_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Params_Future) Struct() (Cluster_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Params{s}, err
}

type Cluster_Handler_handle_Results struct{ capnp.Struct }

// Cluster_Handler_handle_Results_TypeID is the unique identifier for the type Cluster_Handler_handle_Results.
const Cluster_Handler_handle_Results_TypeID = 0xc97d97ad2c77fb6e

func NewCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func NewRootCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func ReadRootCluster_Handler_handle_Results(msg *capnp.Message) (Cluster_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Results{root.Struct()}, err
}

func (s Cluster_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xc97d97ad2c77fb6e, s.Struct)
	return str
}

// Cluster_Handler_handle_Results_List is a list of Cluster_Handler_handle_Results.
type Cluster_Handler_handle_Results_List struct{ capnp.List }

// NewCluster_Handler_handle_Results creates a new list of Cluster_Handler_handle_Results.
func NewCluster_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_Handler_handle_Results_List{l}, err
}

func (s Cluster_Handler_handle_Results_List) At(i int) Cluster_Handler_handle_Results {
	return Cluster_Handler_handle_Results{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Results_List) Set(i int, v Cluster_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xc97d97ad2c77fb6e, s.List)
	return str
}

// Cluster_Handler_handle_Results_Future is a wrapper for a Cluster_Handler_handle_Results promised by a client call.
type Cluster_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Results_Future) Struct() (Cluster_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Results{s}, err
}

type Cluster_Record struct{ capnp.Struct }

// Cluster_Record_TypeID is the unique identifier for the type Cluster_Record.
const Cluster_Record_TypeID = 0xaa4e2a5d60de9e67

func NewCluster_Record(s *capnp.Segment) (Cluster_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Cluster_Record{st}, err
}

func NewRootCluster_Record(s *capnp.Segment) (Cluster_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Cluster_Record{st}, err
}

func ReadRootCluster_Record(msg *capnp.Message) (Cluster_Record, error) {
	root, err := msg.Root()
	return Cluster_Record{root.Struct()}, err
}

func (s Cluster_Record) String() string {
	str, _ := text.Marshal(0xaa4e2a5d60de9e67, s.Struct)
	return str
}

func (s Cluster_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Cluster_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Cluster_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Cluster_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Cluster_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Cluster_Record_List is a list of Cluster_Record.
type Cluster_Record_List struct{ capnp.List }

// NewCluster_Record creates a new list of Cluster_Record.
func NewCluster_Record_List(s *capnp.Segment, sz int32) (Cluster_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Cluster_Record_List{l}, err
}

func (s Cluster_Record_List) At(i int) Cluster_Record { return Cluster_Record{s.List.Struct(i)} }

func (s Cluster_Record_List) Set(i int, v Cluster_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s Cluster_Record_List) String() string {
	str, _ := text.MarshalList(0xaa4e2a5d60de9e67, s.List)
	return str
}

// Cluster_Record_Future is a wrapper for a Cluster_Record promised by a client call.
type Cluster_Record_Future struct{ *capnp.Future }

func (p Cluster_Record_Future) Struct() (Cluster_Record, error) {
	s, err := p.Future.Struct()
	return Cluster_Record{s}, err
}

type Cluster_iter_Params struct{ capnp.Struct }

// Cluster_iter_Params_TypeID is the unique identifier for the type Cluster_iter_Params.
const Cluster_iter_Params_TypeID = 0xfecdf9227b3adc3e

func NewCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func NewRootCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func ReadRootCluster_iter_Params(msg *capnp.Message) (Cluster_iter_Params, error) {
	root, err := msg.Root()
	return Cluster_iter_Params{root.Struct()}, err
}

func (s Cluster_iter_Params) String() string {
	str, _ := text.Marshal(0xfecdf9227b3adc3e, s.Struct)
	return str
}

func (s Cluster_iter_Params) Handler() Cluster_Handler {
	p, _ := s.Struct.Ptr(0)
	return Cluster_Handler{Client: p.Interface().Client()}
}

func (s Cluster_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_iter_Params) SetHandler(v Cluster_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Cluster_iter_Params) BufSize() uint8 {
	return s.Struct.Uint8(0)
}

func (s Cluster_iter_Params) SetBufSize(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Cluster_iter_Params) Lim() uint8 {
	return s.Struct.Uint8(1)
}

func (s Cluster_iter_Params) SetLim(v uint8) {
	s.Struct.SetUint8(1, v)
}

// Cluster_iter_Params_List is a list of Cluster_iter_Params.
type Cluster_iter_Params_List struct{ capnp.List }

// NewCluster_iter_Params creates a new list of Cluster_iter_Params.
func NewCluster_iter_Params_List(s *capnp.Segment, sz int32) (Cluster_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_iter_Params_List{l}, err
}

func (s Cluster_iter_Params_List) At(i int) Cluster_iter_Params {
	return Cluster_iter_Params{s.List.Struct(i)}
}

func (s Cluster_iter_Params_List) Set(i int, v Cluster_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xfecdf9227b3adc3e, s.List)
	return str
}

// Cluster_iter_Params_Future is a wrapper for a Cluster_iter_Params promised by a client call.
type Cluster_iter_Params_Future struct{ *capnp.Future }

func (p Cluster_iter_Params_Future) Struct() (Cluster_iter_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Params{s}, err
}

func (p Cluster_iter_Params_Future) Handler() Cluster_Handler {
	return Cluster_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Cluster_iter_Results struct{ capnp.Struct }

// Cluster_iter_Results_TypeID is the unique identifier for the type Cluster_iter_Results.
const Cluster_iter_Results_TypeID = 0xb4b55ec8b670d8c2

func NewCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func NewRootCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func ReadRootCluster_iter_Results(msg *capnp.Message) (Cluster_iter_Results, error) {
	root, err := msg.Root()
	return Cluster_iter_Results{root.Struct()}, err
}

func (s Cluster_iter_Results) String() string {
	str, _ := text.Marshal(0xb4b55ec8b670d8c2, s.Struct)
	return str
}

// Cluster_iter_Results_List is a list of Cluster_iter_Results.
type Cluster_iter_Results_List struct{ capnp.List }

// NewCluster_iter_Results creates a new list of Cluster_iter_Results.
func NewCluster_iter_Results_List(s *capnp.Segment, sz int32) (Cluster_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_iter_Results_List{l}, err
}

func (s Cluster_iter_Results_List) At(i int) Cluster_iter_Results {
	return Cluster_iter_Results{s.List.Struct(i)}
}

func (s Cluster_iter_Results_List) Set(i int, v Cluster_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xb4b55ec8b670d8c2, s.List)
	return str
}

// Cluster_iter_Results_Future is a wrapper for a Cluster_iter_Results promised by a client call.
type Cluster_iter_Results_Future struct{ *capnp.Future }

func (p Cluster_iter_Results_Future) Struct() (Cluster_iter_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Results{s}, err
}

type Cluster_lookup_Params struct{ capnp.Struct }

// Cluster_lookup_Params_TypeID is the unique identifier for the type Cluster_lookup_Params.
const Cluster_lookup_Params_TypeID = 0x932fba9e18ce7bd3

func NewCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func NewRootCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func ReadRootCluster_lookup_Params(msg *capnp.Message) (Cluster_lookup_Params, error) {
	root, err := msg.Root()
	return Cluster_lookup_Params{root.Struct()}, err
}

func (s Cluster_lookup_Params) String() string {
	str, _ := text.Marshal(0x932fba9e18ce7bd3, s.Struct)
	return str
}

func (s Cluster_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// Cluster_lookup_Params_List is a list of Cluster_lookup_Params.
type Cluster_lookup_Params_List struct{ capnp.List }

// NewCluster_lookup_Params creates a new list of Cluster_lookup_Params.
func NewCluster_lookup_Params_List(s *capnp.Segment, sz int32) (Cluster_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_lookup_Params_List{l}, err
}

func (s Cluster_lookup_Params_List) At(i int) Cluster_lookup_Params {
	return Cluster_lookup_Params{s.List.Struct(i)}
}

func (s Cluster_lookup_Params_List) Set(i int, v Cluster_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0x932fba9e18ce7bd3, s.List)
	return str
}

// Cluster_lookup_Params_Future is a wrapper for a Cluster_lookup_Params promised by a client call.
type Cluster_lookup_Params_Future struct{ *capnp.Future }

func (p Cluster_lookup_Params_Future) Struct() (Cluster_lookup_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Params{s}, err
}

type Cluster_lookup_Results struct{ capnp.Struct }

// Cluster_lookup_Results_TypeID is the unique identifier for the type Cluster_lookup_Results.
const Cluster_lookup_Results_TypeID = 0xa9f91e1c8368a4dc

func NewCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func NewRootCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func ReadRootCluster_lookup_Results(msg *capnp.Message) (Cluster_lookup_Results, error) {
	root, err := msg.Root()
	return Cluster_lookup_Results{root.Struct()}, err
}

func (s Cluster_lookup_Results) String() string {
	str, _ := text.Marshal(0xa9f91e1c8368a4dc, s.Struct)
	return str
}

func (s Cluster_lookup_Results) Record() (Cluster_Record, error) {
	p, err := s.Struct.Ptr(0)
	return Cluster_Record{Struct: p.Struct()}, err
}

func (s Cluster_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Results) SetRecord(v Cluster_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Cluster_Record struct, preferring placement in s's segment.
func (s Cluster_lookup_Results) NewRecord() (Cluster_Record, error) {
	ss, err := NewCluster_Record(s.Struct.Segment())
	if err != nil {
		return Cluster_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Cluster_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s Cluster_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// Cluster_lookup_Results_List is a list of Cluster_lookup_Results.
type Cluster_lookup_Results_List struct{ capnp.List }

// NewCluster_lookup_Results creates a new list of Cluster_lookup_Results.
func NewCluster_lookup_Results_List(s *capnp.Segment, sz int32) (Cluster_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_lookup_Results_List{l}, err
}

func (s Cluster_lookup_Results_List) At(i int) Cluster_lookup_Results {
	return Cluster_lookup_Results{s.List.Struct(i)}
}

func (s Cluster_lookup_Results_List) Set(i int, v Cluster_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xa9f91e1c8368a4dc, s.List)
	return str
}

// Cluster_lookup_Results_Future is a wrapper for a Cluster_lookup_Results promised by a client call.
type Cluster_lookup_Results_Future struct{ *capnp.Future }

func (p Cluster_lookup_Results_Future) Struct() (Cluster_lookup_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Results{s}, err
}

func (p Cluster_lookup_Results_Future) Record() Cluster_Record_Future {
	return Cluster_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x8c\x93AHT[\x1c\xc6\xff\xdf9\xf7zG" +
	"P\xc7\xf3\xae\xc8{\"\x0a\xa2\xf8\xde\xf0\xf4)\xcf\xd5" +
	",\xde\xcc\x9b\xe7#\x85\x929\xe6\xa6E\xe5\xa8\xb74" +
	"\xaf\xcex\xef\x0cR\x12\xb3\x88\xa8V\x11-\xa2\x8d\x10" +
	"DT\x18B\xa4\x8b\xc0M.\xaa\x85m\"haA" +
	"P\x0b\xdd\x15\x14H\xe5\x8ds\xc7;\xa3\xa2\xd5j\xe6" +
	"\x9c\xf3\x9f\xef\xfb}\xdf9\xd3q\x11q\xd6\xa9\xe75" +
	"\"\xd9\xa5\x97y\x1d\xcb\xf5\xd77\x07\xd7/\x91\xa8\xe2" +
	"\xde\xdc\xad\x9e\xb7\xa1\xb9O_\x88`\xb6\xb0\xfbf\x1b" +
	"k%2\xffe\x17\xcc+\xcc \xf2\x16\xbb\x8e\xaf\xbd" +
	"_o\xbdL\xa2\x01D:\x0c\xa2\xbfO\xb3!\x10\xcc" +
	"\xf3,F\xf0\x9e\xcf<\xfbu\xf6\xe1_WI\xd4\x16" +
	"\x07\x16X\x93\x1aX\xf2\x07\x96\x07\xa6\x1e\xdf\xe8[\xba" +
	"M\xa2\x96\x97\xbc\x09\xe6+\xf6\xc1\\S&\xe6;v" +
	"\xc0\xac\xe4\xcan\xf5\xe6\xe8\xb9\xfa\x86\x8d;$kQ" +
	"\x94\xfb\xc8\"J\xee+\x9b&x'g_\x0f\x1e\x8d" +
	"\xf4\xddU\x13\xac\xa4\xe7O\x9aG\xf8\xbai)!3" +
	"\xc5\xe7\x09\xde\xa3\x97\x99\xc5'\xc7\x16\x1e\x14\xe04%" +
	"\xb6\xc1\xeb@\x9a7\xf9y\xfa\xcf{\xd7\xce>-\xe4" +
	"\xf2O\xde\xf0S\xea\xe4\x9f\xd5\xe8L\xd3\xc6\xca\xe6\x0e" +
	"\x84\x15\xfe\x8bBx\xc1\xe7\xa9\xcd\x1b\xb6sn\xd6r" +
	"\xda1\x9c\xcaLf\xa2\xff\xd9\x8d\xfeZ\x86\xb0=m" +
	"y\xa2\xc4*\xf4h\xbe'59b[N\xac\xdf\x1a" +
	"N;#2\xc4u\xa2\xa2\x19\x02R\xd1\x19!&Z" +
	"\x0c\x94\x9aEP\x8a\xf8-JLT\x1a\xe1\xb1\xac\xe5" +
	"\xc4\x11\xb3\xd3\xe9\xf1\\&\x8e$Pd\xd2\x02\xa6\xc2" +
	"r\xcb\xb4}\xd4\xfflN\xa6\x1c#5\xe1J\x8dk" +
	"D\x1a\x88De\x82H\x868d3C\xde\xf1\xd1\\" +
	"T\x11\x92\x1c\xa8.\x05 \xa8\xcd\xa2\x0b\xdf\xe9R\x00" +
	"\xd9K=\xba\xa5^\xc3\x10\xcbX\x96\xd3\xdb\x8d\x0ab" +
	"\xa8\xd8\xa6\xc5v\x137\xfa\xc8I@j~G\xc1\x13" +
	"DpgB\xa8\x1et#VH\xb5\xb3\x80\xbd\xd1\xfa" +
	"-7\x9c\xb3\xb3\xae\x0c\x15\xd9\xfePl\xcd\x1c\xb2\x83" +
	"\x01\xa8Qw-\xda\xea\x88\xe4\xef\x1c\xb2\x8b!Vh" +
	"cW\x0b\xd5\x04\x9e\x1e\x07\x88\x01\xfb\x87\xe8\xb7\xc2\xea" +
	"\xb7*CE\xd1\xf0\xff\x08\x91\x8cs\xc8\x83%\xc3\xde" +
	"&\"\xd9\xcd!\x93\x0c\x82\xa1\x06\x8cH\x1cR\x9b=" +
	"\x1cr\x80!\xacZ\x0b:3\xb2Y\x1b:1\xe8\x04" +
	"\xc3\xb5\xa6PN\x0c\xe5\xfb\xdf\x8bz'*z\xce\xe6" +
	"Y\xf7'\x9fH\xd0\xd4w5\x93)'5\x01w{" +
	"\xb8\xc4\x1e\xe1\x12?\x08\x97/x:\x10\xa5\xff\x0d\x01" +
	"\x82\x90\x1f\xca\x9d8<v\xc6B\x191\x94\x11\x0c{" +
	"l\"\xf8\xfe-\x00\x00\xff\xff\x12(R\xd3"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x89ea60fe991cc330,
		0x8f27eaf1e95f34b6,
		0x932fba9e18ce7bd3,
		0xa8bd4ea1c77154c3,
		0xa9f91e1c8368a4dc,
		0xaa4e2a5d60de9e67,
		0xb4b55ec8b670d8c2,
		0xc97d97ad2c77fb6e,
		0xfecdf9227b3adc3e)
}
