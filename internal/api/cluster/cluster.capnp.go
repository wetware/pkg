// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Child struct{ capnp.Struct }

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0x95dd102833f224c5

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child{root.Struct()}, err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0x95dd102833f224c5, s.Struct)
	return str
}

func (s Anchor_Child) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Child) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Child) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List = capnp.StructList[Anchor_Child]

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Child]{l}, err
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (p Anchor_Child_Future) Struct() (Anchor_Child, error) {
	s, err := p.Future.Struct()
	return Anchor_Child{s}, err
}

func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

func (s Anchor_ls_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_ls_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List = capnp.StructList[Anchor_ls_Params]

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Params]{l}, err
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Child_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List = capnp.StructList[Anchor_ls_Results]

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Results]{l}, err
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xbecada985190dfe6

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xbecada985190dfe6, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_walk_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List = capnp.StructList[Anchor_walk_Params]

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Params]{l}, err
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xa7762282e307ed37

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xa7762282e307ed37, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List = capnp.StructList[Anchor_walk_Results]

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Results]{l}, err
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Host struct{ Client *capnp.Client }

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) Join(ctx context.Context, params func(Host_join_Params) error) (Host_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Host_join_Results_Future{Future: ans.Future()}, release
}
func (c Host) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Host) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Host) AddRef() Host {
	return Host{
		Client: c.Client.AddRef(),
	}
}

func (c Host) Release() {
	c.Client.Release()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	Join(context.Context, Host_join) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c, policy)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server, policy *server.Policy) Host {
	return Host{Client: capnp.NewClient(Host_NewServer(s, policy))}
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Host_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Host_join holds the state for a server call to Host.join.
// See server.Call for documentation.
type Host_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_join) Args() Host_join_Params {
	return Host_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Host_join) AllocResults() (Host_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{Struct: r}, err
}

type Host_AddrInfo struct{ capnp.Struct }

// Host_AddrInfo_TypeID is the unique identifier for the type Host_AddrInfo.
const Host_AddrInfo_TypeID = 0xc46371f8329421db

func NewHost_AddrInfo(s *capnp.Segment) (Host_AddrInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Host_AddrInfo{st}, err
}

func NewRootHost_AddrInfo(s *capnp.Segment) (Host_AddrInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Host_AddrInfo{st}, err
}

func ReadRootHost_AddrInfo(msg *capnp.Message) (Host_AddrInfo, error) {
	root, err := msg.Root()
	return Host_AddrInfo{root.Struct()}, err
}

func (s Host_AddrInfo) String() string {
	str, _ := text.Marshal(0xc46371f8329421db, s.Struct)
	return str
}

func (s Host_AddrInfo) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Host_AddrInfo) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_AddrInfo) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Host_AddrInfo) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Host_AddrInfo) Addrs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s Host_AddrInfo) HasAddrs() bool {
	return s.Struct.HasPtr(1)
}

func (s Host_AddrInfo) SetAddrs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Host_AddrInfo) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Host_AddrInfo_List is a list of Host_AddrInfo.
type Host_AddrInfo_List = capnp.StructList[Host_AddrInfo]

// NewHost_AddrInfo creates a new list of Host_AddrInfo.
func NewHost_AddrInfo_List(s *capnp.Segment, sz int32) (Host_AddrInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Host_AddrInfo]{l}, err
}

// Host_AddrInfo_Future is a wrapper for a Host_AddrInfo promised by a client call.
type Host_AddrInfo_Future struct{ *capnp.Future }

func (p Host_AddrInfo_Future) Struct() (Host_AddrInfo, error) {
	s, err := p.Future.Struct()
	return Host_AddrInfo{s}, err
}

type Host_join_Params struct{ capnp.Struct }

// Host_join_Params_TypeID is the unique identifier for the type Host_join_Params.
const Host_join_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_join_Params(s *capnp.Segment) (Host_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_join_Params{st}, err
}

func NewRootHost_join_Params(s *capnp.Segment) (Host_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_join_Params{st}, err
}

func ReadRootHost_join_Params(msg *capnp.Message) (Host_join_Params, error) {
	root, err := msg.Root()
	return Host_join_Params{root.Struct()}, err
}

func (s Host_join_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, s.Struct)
	return str
}

func (s Host_join_Params) Peers() (Host_AddrInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return Host_AddrInfo_List{List: p.List()}, err
}

func (s Host_join_Params) HasPeers() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_join_Params) SetPeers(v Host_AddrInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Host_AddrInfo_List, preferring placement in s's segment.
func (s Host_join_Params) NewPeers(n int32) (Host_AddrInfo_List, error) {
	l, err := NewHost_AddrInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return Host_AddrInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Host_join_Params_List is a list of Host_join_Params.
type Host_join_Params_List = capnp.StructList[Host_join_Params]

// NewHost_join_Params creates a new list of Host_join_Params.
func NewHost_join_Params_List(s *capnp.Segment, sz int32) (Host_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_join_Params]{l}, err
}

// Host_join_Params_Future is a wrapper for a Host_join_Params promised by a client call.
type Host_join_Params_Future struct{ *capnp.Future }

func (p Host_join_Params_Future) Struct() (Host_join_Params, error) {
	s, err := p.Future.Struct()
	return Host_join_Params{s}, err
}

type Host_join_Results struct{ capnp.Struct }

// Host_join_Results_TypeID is the unique identifier for the type Host_join_Results.
const Host_join_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_join_Results(s *capnp.Segment) (Host_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{st}, err
}

func NewRootHost_join_Results(s *capnp.Segment) (Host_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_join_Results{st}, err
}

func ReadRootHost_join_Results(msg *capnp.Message) (Host_join_Results, error) {
	root, err := msg.Root()
	return Host_join_Results{root.Struct()}, err
}

func (s Host_join_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, s.Struct)
	return str
}

// Host_join_Results_List is a list of Host_join_Results.
type Host_join_Results_List = capnp.StructList[Host_join_Results]

// NewHost_join_Results creates a new list of Host_join_Results.
func NewHost_join_Results_List(s *capnp.Segment, sz int32) (Host_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_join_Results]{l}, err
}

// Host_join_Results_Future is a wrapper for a Host_join_Results promised by a client call.
type Host_join_Results_Future struct{ *capnp.Future }

func (p Host_join_Results_Future) Struct() (Host_join_Results, error) {
	s, err := p.Future.Struct()
	return Host_join_Results{s}, err
}

type Container struct{ Client *capnp.Client }

// Container_TypeID is the unique identifier for the type Container.
const Container_TypeID = 0xf6015788be04b4e3

func (c Container) Get(ctx context.Context, params func(Container_get_Params) error) (Container_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_get_Results_Future{Future: ans.Future()}, release
}
func (c Container) Set(ctx context.Context, params func(Container_set_Params) error) (Container_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_set_Results_Future{Future: ans.Future()}, release
}
func (c Container) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Container) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Container) AddRef() Container {
	return Container{
		Client: c.Client.AddRef(),
	}
}

func (c Container) Release() {
	c.Client.Release()
}

// A Container_Server is a Container with a local implementation.
type Container_Server interface {
	Get(context.Context, Container_get) error

	Set(context.Context, Container_set) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Container_NewServer creates a new Server from an implementation of Container_Server.
func Container_NewServer(s Container_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Container_Methods(nil, s), s, c, policy)
}

// Container_ServerToClient creates a new Client from an implementation of Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Container_ServerToClient(s Container_Server, policy *server.Policy) Container {
	return Container{Client: capnp.NewClient(Container_NewServer(s, policy))}
}

// Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Container_Methods(methods []server.Method, s Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Container_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Container_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Container_get holds the state for a server call to Container.get.
// See server.Call for documentation.
type Container_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_get) Args() Container_get_Params {
	return Container_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_get) AllocResults() (Container_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{Struct: r}, err
}

// Container_set holds the state for a server call to Container.set.
// See server.Call for documentation.
type Container_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_set) Args() Container_set_Params {
	return Container_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_set) AllocResults() (Container_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{Struct: r}, err
}

type Container_get_Params struct{ capnp.Struct }

// Container_get_Params_TypeID is the unique identifier for the type Container_get_Params.
const Container_get_Params_TypeID = 0xe13b74cbca1636d7

func NewContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func NewRootContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func ReadRootContainer_get_Params(msg *capnp.Message) (Container_get_Params, error) {
	root, err := msg.Root()
	return Container_get_Params{root.Struct()}, err
}

func (s Container_get_Params) String() string {
	str, _ := text.Marshal(0xe13b74cbca1636d7, s.Struct)
	return str
}

// Container_get_Params_List is a list of Container_get_Params.
type Container_get_Params_List = capnp.StructList[Container_get_Params]

// NewContainer_get_Params creates a new list of Container_get_Params.
func NewContainer_get_Params_List(s *capnp.Segment, sz int32) (Container_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Container_get_Params]{l}, err
}

// Container_get_Params_Future is a wrapper for a Container_get_Params promised by a client call.
type Container_get_Params_Future struct{ *capnp.Future }

func (p Container_get_Params_Future) Struct() (Container_get_Params, error) {
	s, err := p.Future.Struct()
	return Container_get_Params{s}, err
}

type Container_get_Results struct{ capnp.Struct }

// Container_get_Results_TypeID is the unique identifier for the type Container_get_Results.
const Container_get_Results_TypeID = 0xad17e9bd30bae1da

func NewContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func NewRootContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func ReadRootContainer_get_Results(msg *capnp.Message) (Container_get_Results, error) {
	root, err := msg.Root()
	return Container_get_Results{root.Struct()}, err
}

func (s Container_get_Results) String() string {
	str, _ := text.Marshal(0xad17e9bd30bae1da, s.Struct)
	return str
}

func (s Container_get_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_get_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_get_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_get_Results_List is a list of Container_get_Results.
type Container_get_Results_List = capnp.StructList[Container_get_Results]

// NewContainer_get_Results creates a new list of Container_get_Results.
func NewContainer_get_Results_List(s *capnp.Segment, sz int32) (Container_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Container_get_Results]{l}, err
}

// Container_get_Results_Future is a wrapper for a Container_get_Results promised by a client call.
type Container_get_Results_Future struct{ *capnp.Future }

func (p Container_get_Results_Future) Struct() (Container_get_Results, error) {
	s, err := p.Future.Struct()
	return Container_get_Results{s}, err
}

type Container_set_Params struct{ capnp.Struct }

// Container_set_Params_TypeID is the unique identifier for the type Container_set_Params.
const Container_set_Params_TypeID = 0xd8107c88f2d8bdfa

func NewContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func NewRootContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func ReadRootContainer_set_Params(msg *capnp.Message) (Container_set_Params, error) {
	root, err := msg.Root()
	return Container_set_Params{root.Struct()}, err
}

func (s Container_set_Params) String() string {
	str, _ := text.Marshal(0xd8107c88f2d8bdfa, s.Struct)
	return str
}

func (s Container_set_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_set_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_set_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_set_Params_List is a list of Container_set_Params.
type Container_set_Params_List = capnp.StructList[Container_set_Params]

// NewContainer_set_Params creates a new list of Container_set_Params.
func NewContainer_set_Params_List(s *capnp.Segment, sz int32) (Container_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Container_set_Params]{l}, err
}

// Container_set_Params_Future is a wrapper for a Container_set_Params promised by a client call.
type Container_set_Params_Future struct{ *capnp.Future }

func (p Container_set_Params_Future) Struct() (Container_set_Params, error) {
	s, err := p.Future.Struct()
	return Container_set_Params{s}, err
}

type Container_set_Results struct{ capnp.Struct }

// Container_set_Results_TypeID is the unique identifier for the type Container_set_Results.
const Container_set_Results_TypeID = 0xf135411ec88044d8

func NewContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func NewRootContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func ReadRootContainer_set_Results(msg *capnp.Message) (Container_set_Results, error) {
	root, err := msg.Root()
	return Container_set_Results{root.Struct()}, err
}

func (s Container_set_Results) String() string {
	str, _ := text.Marshal(0xf135411ec88044d8, s.Struct)
	return str
}

// Container_set_Results_List is a list of Container_set_Results.
type Container_set_Results_List = capnp.StructList[Container_set_Results]

// NewContainer_set_Results creates a new list of Container_set_Results.
func NewContainer_set_Results_List(s *capnp.Segment, sz int32) (Container_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Container_set_Results]{l}, err
}

// Container_set_Results_Future is a wrapper for a Container_set_Results promised by a client call.
type Container_set_Results_Future struct{ *capnp.Future }

func (p Container_set_Results_Future) Struct() (Container_set_Results, error) {
	s, err := p.Future.Struct()
	return Container_set_Results{s}, err
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List = capnp.StructList[View_Handler_handle_Params]

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_Handler_handle_Params]{l}, err
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List = capnp.StructList[View_Handler_handle_Results]

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_Handler_handle_Results]{l}, err
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[View_Record]{l}, err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_iter_Params]{l}, err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results]{l}, err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List = capnp.StructList[View_lookup_Params]

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Params]{l}, err
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List = capnp.StructList[View_lookup_Results]

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Results]{l}, err
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94V[l\x14e\x14>g.;S\xd3\xd2" +
	"\xfe\xfc(\xb6^*\xb5\xc4RmC[\xd0d1\xee" +
	"RJh+$\x1d.*\xbe\x98\xc9\xee@W\xb6\xbb" +
	"evjc\x82\xc1h\x04\xf4\x01\x09\xda\xc4\xf0\xc0\x83" +
	"\x11\xb0\x86F!@R\x13\x9a@l\x14\xbcE\x90\x00" +
	"5\x04\x91K\xe2\x03*\xa8\x04Hq\xcc\xff\xcf\xfe3" +
	"\xd3\xedb\xeaS7\xbb\xa7\xdf\xf9\xcew\xbe\xf3\xcd\xcc" +
	"]-\xc7\x95\xa6\xb2=% \x19\xbdj\xc4\x9d\xbe`" +
	"\xe7\x89G\x87\xb7\xbd\x09\xe4\x01\x04P4\x80\x96ae" +
	"9\x82\xe2\xee\xa8\x1d\x7f\xb1\xe5\x8f\x87\xde\x012Mv" +
	"\xf7\xeen\xbf\xa4\xef\xbd1\x0e\x80t\x97\xb2\x83\x0e)" +
	"\x8f\x01\xd0#\xcafJT\x0d\xc0=\xbcs\xf0\xd0w" +
	"=\xc3[=\x18\x15\x19\xce-\xa5\x13\x01\xa9\xaa\xc6\x00" +
	"\xdd\xbf\x7f\\\xfa\xd6\xd6\xed/\xbc\x0b\x84\x8a>\xf3U" +
	"\x89\xf5\xd1N\xbe\x94\x1c\x1f\xd900\xa9O\xa5\xba\x83" +
	"\xceRg\x02\xd0\x06u\x09]\xc5>\xb9\xa3\xb5\xd7[" +
	"\xea*\xce\x0d\x00\xb9\x17\xdd\xd1\xb3\x1d\x0f6l\x7f{" +
	"\x04TI\x03\xa0\x8b\xd51j06t\x99\xda\x0f\xe8" +
	"^\x1a\xee[\xf1\xecQ\xe5#\xaf%\xe7D\x07\xd5\xdb" +
	"\x80t\x88Sz\xea\xaav\xf1\x8d\x9aW\xf60,\xc1" +
	"\xf9\x9c:\x9dq\xbe\xcc\x0b\xc6.|>\xf7\xf0\xaf3" +
	"\x87\x80\xdc\xef\x17\xa8\x91\x1aVP\x16a\x05\x7f>s" +
	"\xed\xcbM\xf6\x9d\xcf\xc2\x08\x0d\x11\x89\x154\xf1\x02\x9f" +
	"a\xe1lV\xe4\x13\xda\x13a\xb3\xf5E6\xd3\xd1\x08" +
	"\xd3\xf0\xca\xf9m\xc6\x07c\xc7G\xc2hC\x91{\x18" +
	"\xdaA\x8e\xf6\xd3\xac\xf7\x9bo\xaeO|\xc1\x06\x0ad" +
	"\xf3\x86\xbf\x1c\xf9\x85^c0\xf4j\x84\x0d\xff\xc8k" +
	"+\xf6\x8f\xb4~\xff-\x18\x14\xa5`\x97\x9e\x0a\xab\xb5" +
	"\x13\xd4\xd2\xd8'S\xfb\x14\xd0=50\xb4\xe9\xc0\xb1" +
	"\xfe\x93\xa1\xce\xf4\x96\xc6\x94\xba\xa3\xb1\xc6\xb7\x0f\x9f\xb9" +
	"\xbeeC\xc5\x99\xb0\x10\x0dz\x15c6_g\x05\xe9" +
	"\xba\xc7o\xae\xfcy\xce\xd9\xb0\xd4\xabt\x06\xb0\x9a\xff" +
	"~\xfa\xc9\xfb\x8e\x7f\xed,\xb8\xe0\x01\xf0\xed\xbf\xca\xfe" +
	"_q\x7f?]}\xa8\xed\x9b\xce\xcb\x8c\xa7\x8fm\xea" +
	"|\x0b)\x9dMB\xc7?^2\xdd<\x7f%\xe4\x9c" +
	"Q\x9d;G~\xfa\xc3\xfd\x89\xdd\xef\xfd\x06\x84\xca\xc1" +
	"\x88\x80tP\x1f\xa3\x07uFb\x9f\xbe\x84\x9ee\x9f" +
	"\xdc3m\xaf\x7f\xf5\xf0\xc2\xf9\xd7B\x14\x8e\xe85\x08" +
	"\xca?\xf1y\xc7V\xed\x1a\xf8+\xa0\xde2\xa8s\xd5" +
	"\xf7q\xee\x17\x0f(#[\x9e\xc7\x1b\x93v\xf8\x83~" +
	"\xd4\xc3\xa6\xa7\xf4\xcdtv\xc9Lx\xc2M\xa4\xfbr" +
	"\x8ee7*\x09\xb37\xd3\x1b}.e\xf57\xb6\x9b" +
	"\x99d\xda\xb2\x1b\xbb\xf9\xdf\xda\xe5V\xae/\xed`\xce" +
	"\xafEQ+[\xfd\x86\x8e\x18\x9a\xab\xa45X$Q" +
	"\xa3\x1b\xf3P\xb1\xe5V\"k'\x0d]V\x01|\xf1" +
	"Q(E\x9a\xeaA\"\xb35D1[ 3\xa9\x8c" +
	"\x82D\xca\xb4\xf2\x94c\xd9q\x8c\xa5\xb3\xd9u}\xbd" +
	"q\xecB\x9c\x0a\xf9.\xd36{r\x00\x86\"+\x00" +
	"\x0a\x02\x90\xb2V\x00C\x97\xd1\xa8\x95p\xa3\xcd\x89\xe5" +
	"p\x1a`\x97\x8cX\x11\xd0\x07d_\xfa=T\xafG" +
	"{6\xe74\xbe\x9cMe\xf2\xb2\xe4@\x14\x88\xdf\xe5" +
	"\x9cc(\x186?v\xba\x0b\x93I\xbb#\xb3&\x0b" +
	"\x9c\x09\x13A\x1c;\x8a\xa0!\x84\x89\xa0j\xe5\x0c=" +
	"\x8e\x1c\xc3?G\x00\x9f\x88\xe45Z\x98Itg\xed" +
	"\xc6E\xdd)9\x9d\xecB4t\x7f\xc09\xf5\x00F" +
	"\xad\x8c\xc6\\\x09\x09\xe2\x0c\xe6S\xd2\x10\x050\xead" +
	"4\xe6IX\x9e1{,,\x05\x09K\x01c&G" +
	"B\x12\xea\x86HB\xa3K\x85\xa3\xc7<U\xc3\x9a6" +
	"\x07\x9aV\xf7Z\x96\x1dR\xd4\x17\xa2@Qy\xc2 " +
	"\xfdfz\x9do\xb50r4\x8f<C\x9a\x02\xd5<" +
	"\xe6\xa2l\xc61S\x19\xcbn\\k9\x1cUK;" +
	"\x13P\xeb\x03\xd4\xf2\xa4\xe9\x98X\x06\x12\x96\xdd\x95]" +
	":\xe7\xef;\x8c\xd2\x09`\x94\xcah\xd4I\xe8&\xba" +
	"S\xe9\xa4me\x00 \x98\xdd\x8f\xff\x82\xd9Q\xa0\x97" +
	"3xo\xd7\xfe\x93\x02\x9b\xab\x171\xb0\xfc\xb9\x88\xb0" +
	"C\x91\xde\xa4\xa9*\x7f.~\x04\xa3x6\x90\xcaz" +
	"~.r:\x17\xc7r&\xea\xc4S)\"z\xb1\x13" +
	"\xa9\x0f\xd6Y\xdek:\xddb\"\xe6\x99iw\xb1\x06" +
	"\xf7\xb8\x96Y\x93-pcU176\xe7\xdd\xd8&" +
	"\xa1\x9cJ\x0a/V\x9b\xc9d`\x9d\xb2\xe2\xcd\xf8\x99" +
	"\xf3@An\xfcR\xbf\xd5bF;.\xa3\xb1TB" +
	"\xd1\xa9\xa3\x06\xc0h\x93\xd1\xe8\x92\x90H8\x03%\x00" +
	"\xb2\x8c}\xd9.\xa3\xb1\x92\xcdgY\xb6 \xa09N" +
	"\x1aU\x90P\x05\xd4r\xd6z,\x01\x09K&s\x08" +
	"lQ\xe4\x16\xa6*\xde$\xb3\xe6,\x87oC\xee\xf9" +
	"\x7f^\x0d\x0b\xc3b\xb2\x18\xa9\xd6\x00d\xa3\x97\x8d\xec" +
	"\x8e\xfc\xe4\x9e\xca\x1d\xe5\xa9\x15\x16\xf1\xb6^,\x07\x07" +
	"\x1c\xda\x7f4\xd8\xbf\xbf\xfe\xaa \x8cb^\x04\x17D" +
	"o\x05\xa0\x9c]\x87\x08\x12b\x88W\xa4p\xd2\xe2)" +
	"\x1c<\x09d\xcbf\x1e\xf12W\xbc\xf4\xa1x\x89$" +
	"$\xca37\xe6)R\xf4T&\xaeGd\xc9\x7f\x89" +
	"P\xec\xa0\xc2)\xc6\x0c\xd7\xd1&,W\xb8E\xbf\x1f" +
	"xw\xc4\x88\x8b\xd7\x11\x14ox\xa4\xa9FD\x80x" +
	"\xd7A\xf1\xc2@*kx\x04hk-'\xce\\\xec" +
	"L~\x9a\xfc\x1b\x00\x00\xff\xffJ\xb8!v"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x8390b923d29e3b12,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0x8f58928e854cd4f5,
		0x957cbefc645fd307,
		0x95dd102833f224c5,
		0xa404c24b5375b9e4,
		0xa7762282e307ed37,
		0xad17e9bd30bae1da,
		0xb0fd7286c7f13ef3,
		0xbe89922d1c49d9c5,
		0xbecada985190dfe6,
		0xc46371f8329421db,
		0xcdcf42beb2537d20,
		0xd377c9b486ad95d5,
		0xd8107c88f2d8bdfa,
		0xd929e054f82b286c,
		0xe13b74cbca1636d7,
		0xe54acc44b61fd7ef,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xf135411ec88044d8,
		0xf495a555c9344000,
		0xf6015788be04b4e3)
}
