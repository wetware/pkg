// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Cluster struct{ Client *capnp.Client }

// Cluster_TypeID is the unique identifier for the type Cluster.
const Cluster_TypeID = 0x89ea60fe991cc330

func (c Cluster) Iter(ctx context.Context, params func(Cluster_iter_Params) error) (Cluster_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_iter_Results_Future{Future: ans.Future()}, release
}
func (c Cluster) Lookup(ctx context.Context, params func(Cluster_lookup_Params) error) (Cluster_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_lookup_Results_Future{Future: ans.Future()}, release
}

func (c Cluster) AddRef() Cluster {
	return Cluster{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster) Release() {
	c.Client.Release()
}

// A Cluster_Server is a Cluster with a local implementation.
type Cluster_Server interface {
	Iter(context.Context, Cluster_iter) error

	Lookup(context.Context, Cluster_lookup) error
}

// Cluster_NewServer creates a new Server from an implementation of Cluster_Server.
func Cluster_NewServer(s Cluster_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Methods(nil, s), s, c, policy)
}

// Cluster_ServerToClient creates a new Client from an implementation of Cluster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ServerToClient(s Cluster_Server, policy *server.Policy) Cluster {
	return Cluster{Client: capnp.NewClient(Cluster_NewServer(s, policy))}
}

// Cluster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Methods(methods []server.Method, s Cluster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, Cluster_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, Cluster_lookup{call})
		},
	})

	return methods
}

// Cluster_iter holds the state for a server call to Cluster.iter.
// See server.Call for documentation.
type Cluster_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_iter) Args() Cluster_iter_Params {
	return Cluster_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_iter) AllocResults() (Cluster_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{Struct: r}, err
}

// Cluster_lookup holds the state for a server call to Cluster.lookup.
// See server.Call for documentation.
type Cluster_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_lookup) Args() Cluster_lookup_Params {
	return Cluster_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_lookup) AllocResults() (Cluster_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{Struct: r}, err
}

type Cluster_Handler struct{ Client *capnp.Client }

// Cluster_Handler_TypeID is the unique identifier for the type Cluster_Handler.
const Cluster_Handler_TypeID = 0xa8bd4ea1c77154c3

func (c Cluster_Handler) Handle(ctx context.Context, params func(Cluster_Handler_handle_Params) error) (Cluster_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Cluster_Handler) AddRef() Cluster_Handler {
	return Cluster_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster_Handler) Release() {
	c.Client.Release()
}

// A Cluster_Handler_Server is a Cluster_Handler with a local implementation.
type Cluster_Handler_Server interface {
	Handle(context.Context, Cluster_Handler_handle) error
}

// Cluster_Handler_NewServer creates a new Server from an implementation of Cluster_Handler_Server.
func Cluster_Handler_NewServer(s Cluster_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Handler_Methods(nil, s), s, c, policy)
}

// Cluster_Handler_ServerToClient creates a new Client from an implementation of Cluster_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Handler_ServerToClient(s Cluster_Handler_Server, policy *server.Policy) Cluster_Handler {
	return Cluster_Handler{Client: capnp.NewClient(Cluster_Handler_NewServer(s, policy))}
}

// Cluster_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Handler_Methods(methods []server.Method, s Cluster_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Cluster_Handler_handle{call})
		},
	})

	return methods
}

// Cluster_Handler_handle holds the state for a server call to Cluster_Handler.handle.
// See server.Call for documentation.
type Cluster_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Handler_handle) Args() Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_Handler_handle) AllocResults() (Cluster_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{Struct: r}, err
}

type Cluster_Handler_handle_Params struct{ capnp.Struct }

// Cluster_Handler_handle_Params_TypeID is the unique identifier for the type Cluster_Handler_handle_Params.
const Cluster_Handler_handle_Params_TypeID = 0x8f27eaf1e95f34b6

func NewCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func NewRootCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func ReadRootCluster_Handler_handle_Params(msg *capnp.Message) (Cluster_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Params{root.Struct()}, err
}

func (s Cluster_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8f27eaf1e95f34b6, s.Struct)
	return str
}

func (s Cluster_Handler_handle_Params) Records() (Cluster_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return Cluster_Record_List{List: p.List()}, err
}

func (s Cluster_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Handler_handle_Params) SetRecords(v Cluster_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated Cluster_Record_List, preferring placement in s's segment.
func (s Cluster_Handler_handle_Params) NewRecords(n int32) (Cluster_Record_List, error) {
	l, err := NewCluster_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return Cluster_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Cluster_Handler_handle_Params_List is a list of Cluster_Handler_handle_Params.
type Cluster_Handler_handle_Params_List struct{ capnp.List }

// NewCluster_Handler_handle_Params creates a new list of Cluster_Handler_handle_Params.
func NewCluster_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_Handler_handle_Params_List{l}, err
}

func (s Cluster_Handler_handle_Params_List) At(i int) Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Params_List) Set(i int, v Cluster_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8f27eaf1e95f34b6, s.List)
	return str
}

// Cluster_Handler_handle_Params_Future is a wrapper for a Cluster_Handler_handle_Params promised by a client call.
type Cluster_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Params_Future) Struct() (Cluster_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Params{s}, err
}

type Cluster_Handler_handle_Results struct{ capnp.Struct }

// Cluster_Handler_handle_Results_TypeID is the unique identifier for the type Cluster_Handler_handle_Results.
const Cluster_Handler_handle_Results_TypeID = 0xc97d97ad2c77fb6e

func NewCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func NewRootCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func ReadRootCluster_Handler_handle_Results(msg *capnp.Message) (Cluster_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Results{root.Struct()}, err
}

func (s Cluster_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xc97d97ad2c77fb6e, s.Struct)
	return str
}

// Cluster_Handler_handle_Results_List is a list of Cluster_Handler_handle_Results.
type Cluster_Handler_handle_Results_List struct{ capnp.List }

// NewCluster_Handler_handle_Results creates a new list of Cluster_Handler_handle_Results.
func NewCluster_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_Handler_handle_Results_List{l}, err
}

func (s Cluster_Handler_handle_Results_List) At(i int) Cluster_Handler_handle_Results {
	return Cluster_Handler_handle_Results{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Results_List) Set(i int, v Cluster_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xc97d97ad2c77fb6e, s.List)
	return str
}

// Cluster_Handler_handle_Results_Future is a wrapper for a Cluster_Handler_handle_Results promised by a client call.
type Cluster_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Results_Future) Struct() (Cluster_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Results{s}, err
}

type Cluster_Record struct{ capnp.Struct }

// Cluster_Record_TypeID is the unique identifier for the type Cluster_Record.
const Cluster_Record_TypeID = 0xaa4e2a5d60de9e67

func NewCluster_Record(s *capnp.Segment) (Cluster_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Cluster_Record{st}, err
}

func NewRootCluster_Record(s *capnp.Segment) (Cluster_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Cluster_Record{st}, err
}

func ReadRootCluster_Record(msg *capnp.Message) (Cluster_Record, error) {
	root, err := msg.Root()
	return Cluster_Record{root.Struct()}, err
}

func (s Cluster_Record) String() string {
	str, _ := text.Marshal(0xaa4e2a5d60de9e67, s.Struct)
	return str
}

func (s Cluster_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Cluster_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Cluster_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Cluster_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Cluster_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Cluster_Record_List is a list of Cluster_Record.
type Cluster_Record_List struct{ capnp.List }

// NewCluster_Record creates a new list of Cluster_Record.
func NewCluster_Record_List(s *capnp.Segment, sz int32) (Cluster_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Cluster_Record_List{l}, err
}

func (s Cluster_Record_List) At(i int) Cluster_Record { return Cluster_Record{s.List.Struct(i)} }

func (s Cluster_Record_List) Set(i int, v Cluster_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s Cluster_Record_List) String() string {
	str, _ := text.MarshalList(0xaa4e2a5d60de9e67, s.List)
	return str
}

// Cluster_Record_Future is a wrapper for a Cluster_Record promised by a client call.
type Cluster_Record_Future struct{ *capnp.Future }

func (p Cluster_Record_Future) Struct() (Cluster_Record, error) {
	s, err := p.Future.Struct()
	return Cluster_Record{s}, err
}

type Cluster_iter_Params struct{ capnp.Struct }

// Cluster_iter_Params_TypeID is the unique identifier for the type Cluster_iter_Params.
const Cluster_iter_Params_TypeID = 0xfecdf9227b3adc3e

func NewCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func NewRootCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func ReadRootCluster_iter_Params(msg *capnp.Message) (Cluster_iter_Params, error) {
	root, err := msg.Root()
	return Cluster_iter_Params{root.Struct()}, err
}

func (s Cluster_iter_Params) String() string {
	str, _ := text.Marshal(0xfecdf9227b3adc3e, s.Struct)
	return str
}

func (s Cluster_iter_Params) Handler() Cluster_Handler {
	p, _ := s.Struct.Ptr(0)
	return Cluster_Handler{Client: p.Interface().Client()}
}

func (s Cluster_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_iter_Params) SetHandler(v Cluster_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Cluster_iter_Params_List is a list of Cluster_iter_Params.
type Cluster_iter_Params_List struct{ capnp.List }

// NewCluster_iter_Params creates a new list of Cluster_iter_Params.
func NewCluster_iter_Params_List(s *capnp.Segment, sz int32) (Cluster_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_iter_Params_List{l}, err
}

func (s Cluster_iter_Params_List) At(i int) Cluster_iter_Params {
	return Cluster_iter_Params{s.List.Struct(i)}
}

func (s Cluster_iter_Params_List) Set(i int, v Cluster_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xfecdf9227b3adc3e, s.List)
	return str
}

// Cluster_iter_Params_Future is a wrapper for a Cluster_iter_Params promised by a client call.
type Cluster_iter_Params_Future struct{ *capnp.Future }

func (p Cluster_iter_Params_Future) Struct() (Cluster_iter_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Params{s}, err
}

func (p Cluster_iter_Params_Future) Handler() Cluster_Handler {
	return Cluster_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Cluster_iter_Results struct{ capnp.Struct }

// Cluster_iter_Results_TypeID is the unique identifier for the type Cluster_iter_Results.
const Cluster_iter_Results_TypeID = 0xb4b55ec8b670d8c2

func NewCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func NewRootCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func ReadRootCluster_iter_Results(msg *capnp.Message) (Cluster_iter_Results, error) {
	root, err := msg.Root()
	return Cluster_iter_Results{root.Struct()}, err
}

func (s Cluster_iter_Results) String() string {
	str, _ := text.Marshal(0xb4b55ec8b670d8c2, s.Struct)
	return str
}

// Cluster_iter_Results_List is a list of Cluster_iter_Results.
type Cluster_iter_Results_List struct{ capnp.List }

// NewCluster_iter_Results creates a new list of Cluster_iter_Results.
func NewCluster_iter_Results_List(s *capnp.Segment, sz int32) (Cluster_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_iter_Results_List{l}, err
}

func (s Cluster_iter_Results_List) At(i int) Cluster_iter_Results {
	return Cluster_iter_Results{s.List.Struct(i)}
}

func (s Cluster_iter_Results_List) Set(i int, v Cluster_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xb4b55ec8b670d8c2, s.List)
	return str
}

// Cluster_iter_Results_Future is a wrapper for a Cluster_iter_Results promised by a client call.
type Cluster_iter_Results_Future struct{ *capnp.Future }

func (p Cluster_iter_Results_Future) Struct() (Cluster_iter_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Results{s}, err
}

type Cluster_lookup_Params struct{ capnp.Struct }

// Cluster_lookup_Params_TypeID is the unique identifier for the type Cluster_lookup_Params.
const Cluster_lookup_Params_TypeID = 0x932fba9e18ce7bd3

func NewCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func NewRootCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func ReadRootCluster_lookup_Params(msg *capnp.Message) (Cluster_lookup_Params, error) {
	root, err := msg.Root()
	return Cluster_lookup_Params{root.Struct()}, err
}

func (s Cluster_lookup_Params) String() string {
	str, _ := text.Marshal(0x932fba9e18ce7bd3, s.Struct)
	return str
}

func (s Cluster_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// Cluster_lookup_Params_List is a list of Cluster_lookup_Params.
type Cluster_lookup_Params_List struct{ capnp.List }

// NewCluster_lookup_Params creates a new list of Cluster_lookup_Params.
func NewCluster_lookup_Params_List(s *capnp.Segment, sz int32) (Cluster_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_lookup_Params_List{l}, err
}

func (s Cluster_lookup_Params_List) At(i int) Cluster_lookup_Params {
	return Cluster_lookup_Params{s.List.Struct(i)}
}

func (s Cluster_lookup_Params_List) Set(i int, v Cluster_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0x932fba9e18ce7bd3, s.List)
	return str
}

// Cluster_lookup_Params_Future is a wrapper for a Cluster_lookup_Params promised by a client call.
type Cluster_lookup_Params_Future struct{ *capnp.Future }

func (p Cluster_lookup_Params_Future) Struct() (Cluster_lookup_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Params{s}, err
}

type Cluster_lookup_Results struct{ capnp.Struct }

// Cluster_lookup_Results_TypeID is the unique identifier for the type Cluster_lookup_Results.
const Cluster_lookup_Results_TypeID = 0xa9f91e1c8368a4dc

func NewCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func NewRootCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func ReadRootCluster_lookup_Results(msg *capnp.Message) (Cluster_lookup_Results, error) {
	root, err := msg.Root()
	return Cluster_lookup_Results{root.Struct()}, err
}

func (s Cluster_lookup_Results) String() string {
	str, _ := text.Marshal(0xa9f91e1c8368a4dc, s.Struct)
	return str
}

func (s Cluster_lookup_Results) Record() (Cluster_Record, error) {
	p, err := s.Struct.Ptr(0)
	return Cluster_Record{Struct: p.Struct()}, err
}

func (s Cluster_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Results) SetRecord(v Cluster_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Cluster_Record struct, preferring placement in s's segment.
func (s Cluster_lookup_Results) NewRecord() (Cluster_Record, error) {
	ss, err := NewCluster_Record(s.Struct.Segment())
	if err != nil {
		return Cluster_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Cluster_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s Cluster_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// Cluster_lookup_Results_List is a list of Cluster_lookup_Results.
type Cluster_lookup_Results_List struct{ capnp.List }

// NewCluster_lookup_Results creates a new list of Cluster_lookup_Results.
func NewCluster_lookup_Results_List(s *capnp.Segment, sz int32) (Cluster_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_lookup_Results_List{l}, err
}

func (s Cluster_lookup_Results_List) At(i int) Cluster_lookup_Results {
	return Cluster_lookup_Results{s.List.Struct(i)}
}

func (s Cluster_lookup_Results_List) Set(i int, v Cluster_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xa9f91e1c8368a4dc, s.List)
	return str
}

// Cluster_lookup_Results_Future is a wrapper for a Cluster_lookup_Results promised by a client call.
type Cluster_lookup_Results_Future struct{ *capnp.Future }

func (p Cluster_lookup_Results_Future) Struct() (Cluster_lookup_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Results{s}, err
}

func (p Cluster_lookup_Results_Future) Record() Cluster_Record_Future {
	return Cluster_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x8c\x93AH\x14m\x1c\xc6\xff\xcf\xff\x9d\xf9f" +
	"\x05u}\xbfY\xe4\xfbD\x14D\xb1\x964%O{" +
	"h73R(\xd9W\xbct\xa8\xdct\xc8tu\xd7" +
	"\xd9]$$\xf6\x10\x11\x9d\":D\x17!\x88\xa80" +
	"\x82H\x0f\x81\x97<T\x07\xbbD\xd0\xc1\x82\xa0\x0ez" +
	"+(\x90\xca\x89w\xd6\xddU\xd1\xe8\xb4\xcc\xbc\xff}" +
	"\x9e\xdf\xf3\xbc\xff\xe9\x18C\x8c;\xcd\xbcA\xa4\xba\xcc" +
	"\x7f\xbc\x8e\xa5\xfa\xdb\x1bCk\xd7HV\x0bo\xee^" +
	"\xef\xa7\xc0\xdc\xf7\x9fD\xb0[\xf8\x89\xdd\xc6\xadD\xf6" +
	"\x11\xbej\xdf`\x8b\xc8[\xe8:\xbb\xfae\xad\xf5:" +
	"\xc9\x06\x10\x99\xb0\x88\x0e]\xe4s \xd8W8J\xf0" +
	"\xde\xcc\xbc\xfeo\xf6\xd9\xc1\x9b$kK\x03\xf3\xdc\xa4" +
	"\x07\x16\xfd\x81\xa5\xc1\xa9\x17w\xfa\x17\xef\x93\xac\x15e" +
	"o\x82\xfd\x9e\xbf\xda\xab\xda\xc4\xfe\xcc\xc7\xed*\xa1\xed" +
	"V\xee\x8e^\xaeoX\x7f@\xaa\x16%\xb9o\x1c\xd6" +
	"r\xbfx\x9a\xe0\x9d\x9f\xfd0t:\xdc\xffPOp" +
	"Y\xcf\x9f\xb4O\x895\xdb\xd1BvB<&x\xcf" +
	"\xdf\xa5\x17^\x9e\x99\x7fZ\x803\xb4\xd8\xba\xa8\x03\x19" +
	"\xde\xe4\x8f\xe9\x03\x8fn]zU\xc8\xe5\x9f|\x14c" +
	"\xfa\xe4\xf0Jd\xa6i}yck\xa0e\xf1\xaf&" +
	"x+\xa2\xd4\xe6\x0d's\x99\xac\xe3\xb6c8\x91\x9e" +
	"LG\x8e&\x1b\xfdg\x15\xc0\xd6\xb0\x15\xddeTi" +
	"F\xf2\xbd\x89\xc9\x91\xa4\xe3F\x07\x9c\xe1\x94;\xa2\x02" +
	"\xc2$*y\xa1\x08*;\xc3\xc4\xb2\xc5B\xb9X\x14" +
	";\x91\xffG\x88e\x95\x15\xbc\x90u\xdc\x18\xa2\xc9T" +
	"j<\x97\x8e!\x0e\x94\x98\x8c\"S\xe1q\xd3\xb4}" +
	"\xd4\xffm\x8e'\\+1\x91Q\x860\x88\x0c\x10\xc9" +
	"\xaan\"\x15\x10P\xcd\x8c\xbc\xeb\xa3ePM\x88\x0b" +
	"\xa0\xa6\x1c\x80\xa0_\x96\\\xc4v\x97\x02\xc8n\xea\x91" +
	"M\xf5\x10#\x9av\x1c\xb7\xaf\x07\x95\xc4\xa8\xdc\xa2\xc5" +
	";\x89\x1b}\xe48\xa0\x0c\xbf\xa3\xe2\x06\xa2xeR" +
	"\xea\x1eL+ZH\xb5\xbd\x80\xdd\xd1\x06\x9cL0\x97" +
	"\xccfT\xa0\xc4\xb6_\xb35\x0b\xa8\x0e\x06\x10\xd2\xdb" +
	"&\xdb\xea\x88\xd4>\x01\xd5\xc5\x88\x16\xda\xd8\xd1B\x0d" +
	"A\xa4\xc6\x01b`\xef\x10\x03NP\xffWg\xa8," +
	"\x19\x1e\x0b\x13\xa9\x98\x80:Q6\xeck\"R=\x02" +
	"*\xce\x90\x8c\x10\x98H\x9e\xd4/{\x05\xd4 #\xa8" +
	"[+vfe\xb3I\x98\xc40\x09V\xc6\x99B\x05" +
	"1*\xf6\xbe\x17\xbd':z.)\xb2\x99\xbf\\\x91" +
	"bS\x7f\xd4\x8c'\xdc\xc4\x04v\xdd\xa3\x10#_\x90" +
	"r!\xcb\x9f\x03\x01\x92\xf0;\x00\x00\xff\xff\xd0\x9fH" +
	"\xb1"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x89ea60fe991cc330,
		0x8f27eaf1e95f34b6,
		0x932fba9e18ce7bd3,
		0xa8bd4ea1c77154c3,
		0xa9f91e1c8368a4dc,
		0xaa4e2a5d60de9e67,
		0xb4b55ec8b670d8c2,
		0xc97d97ad2c77fb6e,
		0xfecdf9227b3adc3e)
}
