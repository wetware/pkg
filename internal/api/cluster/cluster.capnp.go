// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Handler struct{ Client *capnp.Client }

// Anchor_Handler_TypeID is the unique identifier for the type Anchor_Handler.
const Anchor_Handler_TypeID = 0xef686a9fa8c72009

func (c Anchor_Handler) Handle(ctx context.Context, params func(Anchor_Handler_handle_Params) error) (Anchor_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef686a9fa8c72009,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Anchor_Handler) AddRef() Anchor_Handler {
	return Anchor_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor_Handler) Release() {
	c.Client.Release()
}

// A Anchor_Handler_Server is a Anchor_Handler with a local implementation.
type Anchor_Handler_Server interface {
	Handle(context.Context, Anchor_Handler_handle) error
}

// Anchor_Handler_NewServer creates a new Server from an implementation of Anchor_Handler_Server.
func Anchor_Handler_NewServer(s Anchor_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Handler_Methods(nil, s), s, c, policy)
}

// Anchor_Handler_ServerToClient creates a new Client from an implementation of Anchor_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Handler_ServerToClient(s Anchor_Handler_Server, policy *server.Policy) Anchor_Handler {
	return Anchor_Handler{Client: capnp.NewClient(Anchor_Handler_NewServer(s, policy))}
}

// Anchor_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Handler_Methods(methods []server.Method, s Anchor_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef686a9fa8c72009,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Anchor_Handler_handle{call})
		},
	})

	return methods
}

// Anchor_Handler_handle holds the state for a server call to Anchor_Handler.handle.
// See server.Call for documentation.
type Anchor_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Handler_handle) Args() Anchor_Handler_handle_Params {
	return Anchor_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_Handler_handle) AllocResults() (Anchor_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{Struct: r}, err
}

type Anchor_Handler_AnchorElement struct{ capnp.Struct }

// Anchor_Handler_AnchorElement_TypeID is the unique identifier for the type Anchor_Handler_AnchorElement.
const Anchor_Handler_AnchorElement_TypeID = 0x88d885a4b923d2ec

func NewAnchor_Handler_AnchorElement(s *capnp.Segment) (Anchor_Handler_AnchorElement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Handler_AnchorElement{st}, err
}

func NewRootAnchor_Handler_AnchorElement(s *capnp.Segment) (Anchor_Handler_AnchorElement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Handler_AnchorElement{st}, err
}

func ReadRootAnchor_Handler_AnchorElement(msg *capnp.Message) (Anchor_Handler_AnchorElement, error) {
	root, err := msg.Root()
	return Anchor_Handler_AnchorElement{root.Struct()}, err
}

func (s Anchor_Handler_AnchorElement) String() string {
	str, _ := text.Marshal(0x88d885a4b923d2ec, s.Struct)
	return str
}

func (s Anchor_Handler_AnchorElement) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Handler_AnchorElement) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Handler_AnchorElement) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Handler_AnchorElement) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Handler_AnchorElement) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Handler_AnchorElement) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Handler_AnchorElement) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Handler_AnchorElement_List is a list of Anchor_Handler_AnchorElement.
type Anchor_Handler_AnchorElement_List struct{ capnp.List }

// NewAnchor_Handler_AnchorElement creates a new list of Anchor_Handler_AnchorElement.
func NewAnchor_Handler_AnchorElement_List(s *capnp.Segment, sz int32) (Anchor_Handler_AnchorElement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_Handler_AnchorElement_List{l}, err
}

func (s Anchor_Handler_AnchorElement_List) At(i int) Anchor_Handler_AnchorElement {
	return Anchor_Handler_AnchorElement{s.List.Struct(i)}
}

func (s Anchor_Handler_AnchorElement_List) Set(i int, v Anchor_Handler_AnchorElement) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_AnchorElement_List) String() string {
	str, _ := text.MarshalList(0x88d885a4b923d2ec, s.List)
	return str
}

// Anchor_Handler_AnchorElement_Future is a wrapper for a Anchor_Handler_AnchorElement promised by a client call.
type Anchor_Handler_AnchorElement_Future struct{ *capnp.Future }

func (p Anchor_Handler_AnchorElement_Future) Struct() (Anchor_Handler_AnchorElement, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_AnchorElement{s}, err
}

func (p Anchor_Handler_AnchorElement_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_Handler_handle_Params struct{ capnp.Struct }

// Anchor_Handler_handle_Params_TypeID is the unique identifier for the type Anchor_Handler_handle_Params.
const Anchor_Handler_handle_Params_TypeID = 0xdc1abfd88265e7ac

func NewAnchor_Handler_handle_Params(s *capnp.Segment) (Anchor_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Handler_handle_Params{st}, err
}

func NewRootAnchor_Handler_handle_Params(s *capnp.Segment) (Anchor_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Handler_handle_Params{st}, err
}

func ReadRootAnchor_Handler_handle_Params(msg *capnp.Message) (Anchor_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Anchor_Handler_handle_Params{root.Struct()}, err
}

func (s Anchor_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0xdc1abfd88265e7ac, s.Struct)
	return str
}

func (s Anchor_Handler_handle_Params) Anchors() (Anchor_Handler_AnchorElement_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Handler_AnchorElement_List{List: p.List()}, err
}

func (s Anchor_Handler_handle_Params) HasAnchors() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Handler_handle_Params) SetAnchors(v Anchor_Handler_AnchorElement_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated Anchor_Handler_AnchorElement_List, preferring placement in s's segment.
func (s Anchor_Handler_handle_Params) NewAnchors(n int32) (Anchor_Handler_AnchorElement_List, error) {
	l, err := NewAnchor_Handler_AnchorElement_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Handler_AnchorElement_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_Handler_handle_Params_List is a list of Anchor_Handler_handle_Params.
type Anchor_Handler_handle_Params_List struct{ capnp.List }

// NewAnchor_Handler_handle_Params creates a new list of Anchor_Handler_handle_Params.
func NewAnchor_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Anchor_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_Handler_handle_Params_List{l}, err
}

func (s Anchor_Handler_handle_Params_List) At(i int) Anchor_Handler_handle_Params {
	return Anchor_Handler_handle_Params{s.List.Struct(i)}
}

func (s Anchor_Handler_handle_Params_List) Set(i int, v Anchor_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0xdc1abfd88265e7ac, s.List)
	return str
}

// Anchor_Handler_handle_Params_Future is a wrapper for a Anchor_Handler_handle_Params promised by a client call.
type Anchor_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Anchor_Handler_handle_Params_Future) Struct() (Anchor_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_handle_Params{s}, err
}

type Anchor_Handler_handle_Results struct{ capnp.Struct }

// Anchor_Handler_handle_Results_TypeID is the unique identifier for the type Anchor_Handler_handle_Results.
const Anchor_Handler_handle_Results_TypeID = 0xe69783ef48548866

func NewAnchor_Handler_handle_Results(s *capnp.Segment) (Anchor_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{st}, err
}

func NewRootAnchor_Handler_handle_Results(s *capnp.Segment) (Anchor_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{st}, err
}

func ReadRootAnchor_Handler_handle_Results(msg *capnp.Message) (Anchor_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Anchor_Handler_handle_Results{root.Struct()}, err
}

func (s Anchor_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xe69783ef48548866, s.Struct)
	return str
}

// Anchor_Handler_handle_Results_List is a list of Anchor_Handler_handle_Results.
type Anchor_Handler_handle_Results_List struct{ capnp.List }

// NewAnchor_Handler_handle_Results creates a new list of Anchor_Handler_handle_Results.
func NewAnchor_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Anchor_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_Handler_handle_Results_List{l}, err
}

func (s Anchor_Handler_handle_Results_List) At(i int) Anchor_Handler_handle_Results {
	return Anchor_Handler_handle_Results{s.List.Struct(i)}
}

func (s Anchor_Handler_handle_Results_List) Set(i int, v Anchor_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xe69783ef48548866, s.List)
	return str
}

// Anchor_Handler_handle_Results_Future is a wrapper for a Anchor_Handler_handle_Results promised by a client call.
type Anchor_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Anchor_Handler_handle_Results_Future) Struct() (Anchor_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_handle_Results{s}, err
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

func (s Anchor_ls_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_ls_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Anchor_ls_Params) Handler() Anchor_Handler {
	p, _ := s.Struct.Ptr(1)
	return Anchor_Handler{Client: p.Interface().Client()}
}

func (s Anchor_ls_Params) HasHandler() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_ls_Params) SetHandler(v Anchor_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xd377c9b486ad95d5, s.List)
	return str
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

func (p Anchor_ls_Params_Future) Handler() Anchor_Handler {
	return Anchor_Handler{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xb0fd7286c7f13ef3, s.List)
	return str
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xbecada985190dfe6

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xbecada985190dfe6, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_walk_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xbecada985190dfe6, s.List)
	return str
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xa7762282e307ed37

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xa7762282e307ed37, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xa7762282e307ed37, s.List)
	return str
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Host struct{ Client *capnp.Client }

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) Host(ctx context.Context, params func(Host_host_Params) error) (Host_host_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "host",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_host_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Host_host_Results_Future{Future: ans.Future()}, release
}
func (c Host) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Host) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Host) AddRef() Host {
	return Host{
		Client: c.Client.AddRef(),
	}
}

func (c Host) Release() {
	c.Client.Release()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	Host(context.Context, Host_host) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c, policy)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server, policy *server.Policy) Host {
	return Host{Client: capnp.NewClient(Host_NewServer(s, policy))}
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "host",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Host(ctx, Host_host{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Host_host holds the state for a server call to Host.host.
// See server.Call for documentation.
type Host_host struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_host) Args() Host_host_Params {
	return Host_host_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Host_host) AllocResults() (Host_host_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{Struct: r}, err
}

type Host_host_Params struct{ capnp.Struct }

// Host_host_Params_TypeID is the unique identifier for the type Host_host_Params.
const Host_host_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_host_Params(s *capnp.Segment) (Host_host_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_host_Params{st}, err
}

func NewRootHost_host_Params(s *capnp.Segment) (Host_host_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_host_Params{st}, err
}

func ReadRootHost_host_Params(msg *capnp.Message) (Host_host_Params, error) {
	root, err := msg.Root()
	return Host_host_Params{root.Struct()}, err
}

func (s Host_host_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, s.Struct)
	return str
}

// Host_host_Params_List is a list of Host_host_Params.
type Host_host_Params_List struct{ capnp.List }

// NewHost_host_Params creates a new list of Host_host_Params.
func NewHost_host_Params_List(s *capnp.Segment, sz int32) (Host_host_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Host_host_Params_List{l}, err
}

func (s Host_host_Params_List) At(i int) Host_host_Params { return Host_host_Params{s.List.Struct(i)} }

func (s Host_host_Params_List) Set(i int, v Host_host_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_host_Params_List) String() string {
	str, _ := text.MarshalList(0xa404c24b5375b9e4, s.List)
	return str
}

// Host_host_Params_Future is a wrapper for a Host_host_Params promised by a client call.
type Host_host_Params_Future struct{ *capnp.Future }

func (p Host_host_Params_Future) Struct() (Host_host_Params, error) {
	s, err := p.Future.Struct()
	return Host_host_Params{s}, err
}

type Host_host_Results struct{ capnp.Struct }

// Host_host_Results_TypeID is the unique identifier for the type Host_host_Results.
const Host_host_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_host_Results(s *capnp.Segment) (Host_host_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{st}, err
}

func NewRootHost_host_Results(s *capnp.Segment) (Host_host_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{st}, err
}

func ReadRootHost_host_Results(msg *capnp.Message) (Host_host_Results, error) {
	root, err := msg.Root()
	return Host_host_Results{root.Struct()}, err
}

func (s Host_host_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, s.Struct)
	return str
}

func (s Host_host_Results) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Host_host_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_host_Results) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Host_host_Results) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

// Host_host_Results_List is a list of Host_host_Results.
type Host_host_Results_List struct{ capnp.List }

// NewHost_host_Results creates a new list of Host_host_Results.
func NewHost_host_Results_List(s *capnp.Segment, sz int32) (Host_host_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Host_host_Results_List{l}, err
}

func (s Host_host_Results_List) At(i int) Host_host_Results {
	return Host_host_Results{s.List.Struct(i)}
}

func (s Host_host_Results_List) Set(i int, v Host_host_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_host_Results_List) String() string {
	str, _ := text.MarshalList(0x8f58928e854cd4f5, s.List)
	return str
}

// Host_host_Results_Future is a wrapper for a Host_host_Results promised by a client call.
type Host_host_Results_Future struct{ *capnp.Future }

func (p Host_host_Results_Future) Struct() (Host_host_Results, error) {
	s, err := p.Future.Struct()
	return Host_host_Results{s}, err
}

type Container struct{ Client *capnp.Client }

// Container_TypeID is the unique identifier for the type Container.
const Container_TypeID = 0xf6015788be04b4e3

func (c Container) Get(ctx context.Context, params func(Container_get_Params) error) (Container_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_get_Results_Future{Future: ans.Future()}, release
}
func (c Container) Set(ctx context.Context, params func(Container_set_Params) error) (Container_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Container_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Container_set_Results_Future{Future: ans.Future()}, release
}
func (c Container) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Container) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Container) AddRef() Container {
	return Container{
		Client: c.Client.AddRef(),
	}
}

func (c Container) Release() {
	c.Client.Release()
}

// A Container_Server is a Container with a local implementation.
type Container_Server interface {
	Get(context.Context, Container_get) error

	Set(context.Context, Container_set) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Container_NewServer creates a new Server from an implementation of Container_Server.
func Container_NewServer(s Container_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Container_Methods(nil, s), s, c, policy)
}

// Container_ServerToClient creates a new Client from an implementation of Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Container_ServerToClient(s Container_Server, policy *server.Policy) Container {
	return Container{Client: capnp.NewClient(Container_NewServer(s, policy))}
}

// Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Container_Methods(methods []server.Method, s Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Container_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6015788be04b4e3,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Container",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Container_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Container_get holds the state for a server call to Container.get.
// See server.Call for documentation.
type Container_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_get) Args() Container_get_Params {
	return Container_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_get) AllocResults() (Container_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{Struct: r}, err
}

// Container_set holds the state for a server call to Container.set.
// See server.Call for documentation.
type Container_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Container_set) Args() Container_set_Params {
	return Container_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Container_set) AllocResults() (Container_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{Struct: r}, err
}

type Container_get_Params struct{ capnp.Struct }

// Container_get_Params_TypeID is the unique identifier for the type Container_get_Params.
const Container_get_Params_TypeID = 0xe13b74cbca1636d7

func NewContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func NewRootContainer_get_Params(s *capnp.Segment) (Container_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_get_Params{st}, err
}

func ReadRootContainer_get_Params(msg *capnp.Message) (Container_get_Params, error) {
	root, err := msg.Root()
	return Container_get_Params{root.Struct()}, err
}

func (s Container_get_Params) String() string {
	str, _ := text.Marshal(0xe13b74cbca1636d7, s.Struct)
	return str
}

// Container_get_Params_List is a list of Container_get_Params.
type Container_get_Params_List struct{ capnp.List }

// NewContainer_get_Params creates a new list of Container_get_Params.
func NewContainer_get_Params_List(s *capnp.Segment, sz int32) (Container_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Container_get_Params_List{l}, err
}

func (s Container_get_Params_List) At(i int) Container_get_Params {
	return Container_get_Params{s.List.Struct(i)}
}

func (s Container_get_Params_List) Set(i int, v Container_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_get_Params_List) String() string {
	str, _ := text.MarshalList(0xe13b74cbca1636d7, s.List)
	return str
}

// Container_get_Params_Future is a wrapper for a Container_get_Params promised by a client call.
type Container_get_Params_Future struct{ *capnp.Future }

func (p Container_get_Params_Future) Struct() (Container_get_Params, error) {
	s, err := p.Future.Struct()
	return Container_get_Params{s}, err
}

type Container_get_Results struct{ capnp.Struct }

// Container_get_Results_TypeID is the unique identifier for the type Container_get_Results.
const Container_get_Results_TypeID = 0xad17e9bd30bae1da

func NewContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func NewRootContainer_get_Results(s *capnp.Segment) (Container_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_get_Results{st}, err
}

func ReadRootContainer_get_Results(msg *capnp.Message) (Container_get_Results, error) {
	root, err := msg.Root()
	return Container_get_Results{root.Struct()}, err
}

func (s Container_get_Results) String() string {
	str, _ := text.Marshal(0xad17e9bd30bae1da, s.Struct)
	return str
}

func (s Container_get_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_get_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_get_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_get_Results_List is a list of Container_get_Results.
type Container_get_Results_List struct{ capnp.List }

// NewContainer_get_Results creates a new list of Container_get_Results.
func NewContainer_get_Results_List(s *capnp.Segment, sz int32) (Container_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Container_get_Results_List{l}, err
}

func (s Container_get_Results_List) At(i int) Container_get_Results {
	return Container_get_Results{s.List.Struct(i)}
}

func (s Container_get_Results_List) Set(i int, v Container_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_get_Results_List) String() string {
	str, _ := text.MarshalList(0xad17e9bd30bae1da, s.List)
	return str
}

// Container_get_Results_Future is a wrapper for a Container_get_Results promised by a client call.
type Container_get_Results_Future struct{ *capnp.Future }

func (p Container_get_Results_Future) Struct() (Container_get_Results, error) {
	s, err := p.Future.Struct()
	return Container_get_Results{s}, err
}

type Container_set_Params struct{ capnp.Struct }

// Container_set_Params_TypeID is the unique identifier for the type Container_set_Params.
const Container_set_Params_TypeID = 0xd8107c88f2d8bdfa

func NewContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func NewRootContainer_set_Params(s *capnp.Segment) (Container_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Container_set_Params{st}, err
}

func ReadRootContainer_set_Params(msg *capnp.Message) (Container_set_Params, error) {
	root, err := msg.Root()
	return Container_set_Params{root.Struct()}, err
}

func (s Container_set_Params) String() string {
	str, _ := text.Marshal(0xd8107c88f2d8bdfa, s.Struct)
	return str
}

func (s Container_set_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Container_set_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Container_set_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Container_set_Params_List is a list of Container_set_Params.
type Container_set_Params_List struct{ capnp.List }

// NewContainer_set_Params creates a new list of Container_set_Params.
func NewContainer_set_Params_List(s *capnp.Segment, sz int32) (Container_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Container_set_Params_List{l}, err
}

func (s Container_set_Params_List) At(i int) Container_set_Params {
	return Container_set_Params{s.List.Struct(i)}
}

func (s Container_set_Params_List) Set(i int, v Container_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_set_Params_List) String() string {
	str, _ := text.MarshalList(0xd8107c88f2d8bdfa, s.List)
	return str
}

// Container_set_Params_Future is a wrapper for a Container_set_Params promised by a client call.
type Container_set_Params_Future struct{ *capnp.Future }

func (p Container_set_Params_Future) Struct() (Container_set_Params, error) {
	s, err := p.Future.Struct()
	return Container_set_Params{s}, err
}

type Container_set_Results struct{ capnp.Struct }

// Container_set_Results_TypeID is the unique identifier for the type Container_set_Results.
const Container_set_Results_TypeID = 0xf135411ec88044d8

func NewContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func NewRootContainer_set_Results(s *capnp.Segment) (Container_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Container_set_Results{st}, err
}

func ReadRootContainer_set_Results(msg *capnp.Message) (Container_set_Results, error) {
	root, err := msg.Root()
	return Container_set_Results{root.Struct()}, err
}

func (s Container_set_Results) String() string {
	str, _ := text.Marshal(0xf135411ec88044d8, s.Struct)
	return str
}

// Container_set_Results_List is a list of Container_set_Results.
type Container_set_Results_List struct{ capnp.List }

// NewContainer_set_Results creates a new list of Container_set_Results.
func NewContainer_set_Results_List(s *capnp.Segment, sz int32) (Container_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Container_set_Results_List{l}, err
}

func (s Container_set_Results_List) At(i int) Container_set_Results {
	return Container_set_Results{s.List.Struct(i)}
}

func (s Container_set_Results_List) Set(i int, v Container_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Container_set_Results_List) String() string {
	str, _ := text.MarshalList(0xf135411ec88044d8, s.List)
	return str
}

// Container_set_Results_Future is a wrapper for a Container_set_Results promised by a client call.
type Container_set_Results_Future struct{ *capnp.Future }

func (p Container_set_Results_Future) Struct() (Container_set_Results, error) {
	s, err := p.Future.Struct()
	return Container_set_Results{s}, err
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94V{l\x14\xd5\x17>gf\xe7QB)" +
	"\x97[~\xfc\xa8V\xb0\x94\x08U\x1a\x1a\xf0\xc1\xa2\xee" +
	"RK\xda\"$\x1d@\x11\xfe1c;\xd2\xca>\xca" +
	"\xce\xd4\xfa\x07\x06\x03)T\x13\x111D%\x11\x83A" +
	"\x04\x03Q\x09%\xa9IkBB\x10|E\x90\xd0\x12" +
	"\x09\x12\x10\x83Q\x11\x1fDIq\xcc\xbd\xb3wf\xba" +
	"\x1d\x05\xffjw\xf7\xcc9\xdf\xf9\xcew\xbe933" +
	"rR\xaaQ\x96\x8d\x020\x9eQTw\xdc\xdc\xed\xc7" +
	"\xa7\xf4n^\x0f\xe4\x16\x04\x88i\x00\xb3\x88\xb2\x18!" +
	"\xe6\xfep|J\xef\xce\xae\x81n \xe5\xe8\x16M>" +
	"\xb2\xfb\xcd\xa7Z/\x83\"\xb1\x90\xeb\xb1\x15H\x89\xa2" +
	"\x01\xd0b\xa5\x13\xd0\xddV9\xb4b\xd6\xcf\xe5/\x00" +
	"\x19#\xbb{w5\\\xd0\xf7^\x1d\x02@\xda\xa6l" +
	"\xa3\xab\x95;\x00h\x97\xb2\x91\x9ed\x8f\xb8}\xdb\xf7" +
	"\x1c\xfc<\xdd\xbb\xc9\xab\xa9 \xcb\xd8\xa7,@@z" +
	"TI\x00\xba\xbf\x7f\xb5\xb0k\xd3\x96\xc7^\x02B\xfd" +
	"\x80?\x15\x89\x05\\\xe7\x01\xda\x89\xc7[\x86\xfa\xd7l" +
	"\x1dQ\xae\\\xddF\xa7\xaa\x0c\xd7\xedj=mT'" +
	"\x00\xb8\x17z;\x96<|(\xb6\xd3\xcb\xc6Z\xa4s" +
	"\xd4k\x10s\xef\xfdQ;\xbf\xae\xe2\xe9w\x80\x8c\xf7" +
	"\xcb\x94\xab\xe3X\x99\xa9*+s\xfa\xdc\x873\xfb." +
	"M\xd8\x07\xe4\xff~\xc0|\xb5\x82\x05,\xe2\x01\xbf>" +
	"x\xe5\xc8\x86\xdc\xf5\xf7\xbd\x0c\x9c\xbd\xb4*1\xf6\x0e" +
	"\x0f6\xde:c\xcb\xf3\xfd#\x10\x1a\xea\xbbt9\xc3" +
	"EMu#\xfd\x80au/\x9e\xddl\xbcv\xfaX" +
	"\x7f\x18\xc8\xeb\xea(Vg\x07\xaf3\xf9\xd9%\xfb\xfb" +
	"k\xbf\xf8\x0c\x0c\x8aR@6\x8f\xa4_\xaa\xc7\xe9\x19" +
	"\xde\xf3\xa0\xfa\x1e\xa0{r\xeb\xbe\x0d\x07\x8ev\x9e\xc8" +
	"gc\x03\xa3\xab\xb5k\x80\xb4Cc\xb3\xba\xd67\xf0" +
	"K\xf7\x9a\xb1\x03\xe1\xae\xceie\xac\xda%\x8dUK" +
	"M\xbb\xf3\x8f\xa5\xdfL\x1f\x0c\xd1O\x8bt\x96\xa0X" +
	"g\xbf\xef\xfd\xceZ7\xf0Q\xd9\xd7L\x19\"\xc1\x0c" +
	"}\x05K0\x87\x07\x9c\xba\xe7\x7f\xc7>q\xe6\x9e\xf3" +
	"*pZ\xda\xf42F\xcb\xe5S\x93\x0e\xd6}\xba\xe0" +
	"[\xd6\x88\xff\xac\xa1s\xce\x97\xeb\x0c\xdd\x93\xddK\x1b" +
	".\xaf\x7f\xf5\xa2\x97\x9c?\xdb\xa3?\xc1\x9e\xa5C\xbb" +
	"\xeb\xc7\x99g/\x06s\x9c\xb5C\xe7d\xcb\xf7\xbf\xb5" +
	"\xbfy\xd7+?\x01\xa1r\xc0\x0e \xed\xd2O\xd3\x97" +
	"u\x86\xffE\xbd\x9e\xf6\xb0\xff\x02)\x93\xf1r0&" +
	"@\xfa\x86\xfe=\xdd\xa3\xb3\xc9\xf4\xe8\xf5\xf4\x0c\x0f\x1e" +
	"\xa8{\xee\xe3\xdb\xe6\xdd}%\xd4\xc9a\xbd\x02!\xf6" +
	"Wr\xf6\xd1G\xde\xde\xfa[H\xa1\xfbt>\xb1\x1e" +
	"N\xc1\xf9\x03\xb1\xfe\xeeexu\xc4\xfcO\xea\x87\xbc" +
	"\xdctP\xdfH\xa7\x17M\x80\xbb\xdc\xe6T\x87\xedX" +
	"\xb9\xeaX\xb3\xd9\x9ei\x8f?\xdafuV7\x98\x99" +
	"\x96\x94\x95\xabn\xe5\x7f+\x17[vG\xcaA\xbb0" +
	"v^\xa6\xb95\x9b\xf3\xa3\xbd\x8f\xf3SV\xda\x923" +
	"N\x13\xa2\xa1\xcb1\x80\x18\x02\x90\xe9U\x00F\xa5\x8c" +
	"\xc6L\x09\x09b)\x1b\x00\x99\x11\x070\xa6\xc9h\xcc" +
	"\x96\xb0$c\xa6-\x1c\x0d\x12\x8e\x06L\x98<\x15\x92" +
	"0GH\x00}\x04(\xd0\xcaV\xa7\xa1#\x86\xc6P" +
	"T\x1bH\x96(\xf1\xb5yx\x89\xc5Vs6\xd7b" +
	"\xe8\xb2\x02\xe0\xcb\x0c\xc5`IM\x15Hd\xaa\x86(" +
	"\xd8\x0d\xf4B&\xc6A\"\xc5ZI\x9bc\xe5\x92\x98" +
	"He\xb3\xab:\xda\x93\xd8\x84x3\xf45\x9993" +
	"m\x03\x181\x9f\x8e\xe2Z\x00C\x97\xd1\xa8\x94pm" +
	"\x8e\x03\xb3q\x0c`\x93\x8c86\x80\x0f\xc8\xbe\xf4k" +
	"\xc8^\x8d\x86\xac\xedT\xb7fm'?\x18{X\xe6" +
	"\xaa|\xe6R\x09KX\x90\xe0\xb4\x90\xba\x86\xacl\xf3" +
	"!\xc58!\xc2\xa8P\xf8\x1f!\x8c\x10E\xe3I\x92" +
	"h\xc4\x10C\xd3\x00?\x9dT\x08*\xe1\xf5[\x88:" +
	"/\x96N3\xb5\xca\x17T\x18w<\xc0}\xe3\xf1\xe7" +
	"s>\x94\xcd8f[\xc6\xcaU\xaf\xb4<6\xb4\x94" +
	"c\xff\x13\x1b-\xa6cb1HX\x1c\xca\xa4\x0cC" +
	"\x97\xb2}NE\x80\xf8\xbd\x84\x05p\x16\x82%\xc6Z" +
	"\xa1\xae\xbc\xac\x84\xfd\xa10gRS\x96\x97\x95o\xb4" +
	"(\xac\x9fL\xac\xe2\xb2\x92Sv\x12K\x181\xc3%" +
	"\x15A\\\x94\x94\xaa\x02)\x95\xb4\x9bN\xab\xd0\x11\x9b" +
	"{X=RH\xa1|\x17\xb0\x85\x8d\x7f\xb4\x9fi>" +
	"\xcb\x94\x94\xd1X(\xa1X\xd1\xc6\x0a\x00\xa3NF\xa3" +
	"IB\"a)J\x00d\x11\xfb\xb2AFc)+" +
	"iY9\xa11\xcdqR\xa8\x80\x84\x0a\xa0f[\xab" +
	"\xb1\x08$,\x1a\x89!`;/\x96(\xa7H\x86\x9c" +
	"\xe2\x01\xb6/\xf7\xc9h\xd4E7\xb9\xd6[5&\x19" +
	"\x7f:7\x92\x8cm9\x9cO9\xfd\xdf\x14\x13\xe6\x91" +
	"\x19\x82\xdfC\xc4z\x97Jah\xbeG\x15@\x8b\xb6" +
	"\xd3\x90{\xc8\xd1\xd9\x99yx\xab\x122\x0f\xfft\x8a" +
	"6\x8f\xe1+\x93O^\x18\xc4{\xf3\\.\xd8\xd5\xd0" +
	"\x88\xe2\x81\x99\xfb^^\x16xy\xc2s\xb4\x02'\x1b" +
	"\x0b(gW!\x82\x84x\xb3\xcd\x8b\x95\xf6\xa3\xd5B" +
	"\xf2\xa3\xd75\xb0a\xd9\xca\x05&'\x8e?\x14\x97'" +
	"!qnr\x09\xaf\xde\xf0\xfd\x93\x0a\x91\x95\xf0Mg" +
	"\x16\x10\xdc\xa7\x98s\xc5{\x0f&Yi+\xe3\xe4k" +
	"\x89C\x05\xc5Q\xf1\xaf\xb5\"\xd59\xa2\xfb\x88\xf1D" +
	"9B\xd8J\xd9z6\xd6\x8dx\x09H\x05\xf5\xc0{" +
	"]3\xe0\xe2\x80Bq\x81\x92\x9a\x0a\xe1a\xe2|C" +
	"q\x9b\x90\x89\x15\xdc\xc3\xb4\x95\x96\x93d;\x1f\xf1\xaa" +
	"\xf8;\x00\x00\xff\xff`3jH"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x8390b923d29e3b12,
		0x88d885a4b923d2ec,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0x8f58928e854cd4f5,
		0x957cbefc645fd307,
		0xa404c24b5375b9e4,
		0xa7762282e307ed37,
		0xad17e9bd30bae1da,
		0xb0fd7286c7f13ef3,
		0xbe89922d1c49d9c5,
		0xbecada985190dfe6,
		0xcdcf42beb2537d20,
		0xd377c9b486ad95d5,
		0xd8107c88f2d8bdfa,
		0xd929e054f82b286c,
		0xdc1abfd88265e7ac,
		0xe13b74cbca1636d7,
		0xe54acc44b61fd7ef,
		0xe69783ef48548866,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xef686a9fa8c72009,
		0xf135411ec88044d8,
		0xf495a555c9344000,
		0xf6015788be04b4e3)
}
