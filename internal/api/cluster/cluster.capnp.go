// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Handler struct{ Client *capnp.Client }

// Anchor_Handler_TypeID is the unique identifier for the type Anchor_Handler.
const Anchor_Handler_TypeID = 0xef686a9fa8c72009

func (c Anchor_Handler) Handle(ctx context.Context, params func(Anchor_Handler_handle_Params) error) (Anchor_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef686a9fa8c72009,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Anchor_Handler) AddRef() Anchor_Handler {
	return Anchor_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor_Handler) Release() {
	c.Client.Release()
}

// A Anchor_Handler_Server is a Anchor_Handler with a local implementation.
type Anchor_Handler_Server interface {
	Handle(context.Context, Anchor_Handler_handle) error
}

// Anchor_Handler_NewServer creates a new Server from an implementation of Anchor_Handler_Server.
func Anchor_Handler_NewServer(s Anchor_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Handler_Methods(nil, s), s, c, policy)
}

// Anchor_Handler_ServerToClient creates a new Client from an implementation of Anchor_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Handler_ServerToClient(s Anchor_Handler_Server, policy *server.Policy) Anchor_Handler {
	return Anchor_Handler{Client: capnp.NewClient(Anchor_Handler_NewServer(s, policy))}
}

// Anchor_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Handler_Methods(methods []server.Method, s Anchor_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef686a9fa8c72009,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Anchor_Handler_handle{call})
		},
	})

	return methods
}

// Anchor_Handler_handle holds the state for a server call to Anchor_Handler.handle.
// See server.Call for documentation.
type Anchor_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Handler_handle) Args() Anchor_Handler_handle_Params {
	return Anchor_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_Handler_handle) AllocResults() (Anchor_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{Struct: r}, err
}

type Anchor_Handler_AnchorElement struct{ capnp.Struct }

// Anchor_Handler_AnchorElement_TypeID is the unique identifier for the type Anchor_Handler_AnchorElement.
const Anchor_Handler_AnchorElement_TypeID = 0x88d885a4b923d2ec

func NewAnchor_Handler_AnchorElement(s *capnp.Segment) (Anchor_Handler_AnchorElement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Handler_AnchorElement{st}, err
}

func NewRootAnchor_Handler_AnchorElement(s *capnp.Segment) (Anchor_Handler_AnchorElement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Handler_AnchorElement{st}, err
}

func ReadRootAnchor_Handler_AnchorElement(msg *capnp.Message) (Anchor_Handler_AnchorElement, error) {
	root, err := msg.Root()
	return Anchor_Handler_AnchorElement{root.Struct()}, err
}

func (s Anchor_Handler_AnchorElement) String() string {
	str, _ := text.Marshal(0x88d885a4b923d2ec, s.Struct)
	return str
}

func (s Anchor_Handler_AnchorElement) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Handler_AnchorElement) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Handler_AnchorElement) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Handler_AnchorElement) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Handler_AnchorElement) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Handler_AnchorElement) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Handler_AnchorElement) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Handler_AnchorElement_List is a list of Anchor_Handler_AnchorElement.
type Anchor_Handler_AnchorElement_List struct{ capnp.List }

// NewAnchor_Handler_AnchorElement creates a new list of Anchor_Handler_AnchorElement.
func NewAnchor_Handler_AnchorElement_List(s *capnp.Segment, sz int32) (Anchor_Handler_AnchorElement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_Handler_AnchorElement_List{l}, err
}

func (s Anchor_Handler_AnchorElement_List) At(i int) Anchor_Handler_AnchorElement {
	return Anchor_Handler_AnchorElement{s.List.Struct(i)}
}

func (s Anchor_Handler_AnchorElement_List) Set(i int, v Anchor_Handler_AnchorElement) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_AnchorElement_List) String() string {
	str, _ := text.MarshalList(0x88d885a4b923d2ec, s.List)
	return str
}

// Anchor_Handler_AnchorElement_Future is a wrapper for a Anchor_Handler_AnchorElement promised by a client call.
type Anchor_Handler_AnchorElement_Future struct{ *capnp.Future }

func (p Anchor_Handler_AnchorElement_Future) Struct() (Anchor_Handler_AnchorElement, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_AnchorElement{s}, err
}

func (p Anchor_Handler_AnchorElement_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_Handler_handle_Params struct{ capnp.Struct }

// Anchor_Handler_handle_Params_TypeID is the unique identifier for the type Anchor_Handler_handle_Params.
const Anchor_Handler_handle_Params_TypeID = 0xdc1abfd88265e7ac

func NewAnchor_Handler_handle_Params(s *capnp.Segment) (Anchor_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Handler_handle_Params{st}, err
}

func NewRootAnchor_Handler_handle_Params(s *capnp.Segment) (Anchor_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Handler_handle_Params{st}, err
}

func ReadRootAnchor_Handler_handle_Params(msg *capnp.Message) (Anchor_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Anchor_Handler_handle_Params{root.Struct()}, err
}

func (s Anchor_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0xdc1abfd88265e7ac, s.Struct)
	return str
}

func (s Anchor_Handler_handle_Params) Anchors() (Anchor_Handler_AnchorElement_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Handler_AnchorElement_List{List: p.List()}, err
}

func (s Anchor_Handler_handle_Params) HasAnchors() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Handler_handle_Params) SetAnchors(v Anchor_Handler_AnchorElement_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated Anchor_Handler_AnchorElement_List, preferring placement in s's segment.
func (s Anchor_Handler_handle_Params) NewAnchors(n int32) (Anchor_Handler_AnchorElement_List, error) {
	l, err := NewAnchor_Handler_AnchorElement_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Handler_AnchorElement_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_Handler_handle_Params_List is a list of Anchor_Handler_handle_Params.
type Anchor_Handler_handle_Params_List struct{ capnp.List }

// NewAnchor_Handler_handle_Params creates a new list of Anchor_Handler_handle_Params.
func NewAnchor_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Anchor_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_Handler_handle_Params_List{l}, err
}

func (s Anchor_Handler_handle_Params_List) At(i int) Anchor_Handler_handle_Params {
	return Anchor_Handler_handle_Params{s.List.Struct(i)}
}

func (s Anchor_Handler_handle_Params_List) Set(i int, v Anchor_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0xdc1abfd88265e7ac, s.List)
	return str
}

// Anchor_Handler_handle_Params_Future is a wrapper for a Anchor_Handler_handle_Params promised by a client call.
type Anchor_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Anchor_Handler_handle_Params_Future) Struct() (Anchor_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_handle_Params{s}, err
}

type Anchor_Handler_handle_Results struct{ capnp.Struct }

// Anchor_Handler_handle_Results_TypeID is the unique identifier for the type Anchor_Handler_handle_Results.
const Anchor_Handler_handle_Results_TypeID = 0xe69783ef48548866

func NewAnchor_Handler_handle_Results(s *capnp.Segment) (Anchor_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{st}, err
}

func NewRootAnchor_Handler_handle_Results(s *capnp.Segment) (Anchor_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Handler_handle_Results{st}, err
}

func ReadRootAnchor_Handler_handle_Results(msg *capnp.Message) (Anchor_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Anchor_Handler_handle_Results{root.Struct()}, err
}

func (s Anchor_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xe69783ef48548866, s.Struct)
	return str
}

// Anchor_Handler_handle_Results_List is a list of Anchor_Handler_handle_Results.
type Anchor_Handler_handle_Results_List struct{ capnp.List }

// NewAnchor_Handler_handle_Results creates a new list of Anchor_Handler_handle_Results.
func NewAnchor_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Anchor_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_Handler_handle_Results_List{l}, err
}

func (s Anchor_Handler_handle_Results_List) At(i int) Anchor_Handler_handle_Results {
	return Anchor_Handler_handle_Results{s.List.Struct(i)}
}

func (s Anchor_Handler_handle_Results_List) Set(i int, v Anchor_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xe69783ef48548866, s.List)
	return str
}

// Anchor_Handler_handle_Results_Future is a wrapper for a Anchor_Handler_handle_Results promised by a client call.
type Anchor_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Anchor_Handler_handle_Results_Future) Struct() (Anchor_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_Handler_handle_Results{s}, err
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

func (s Anchor_ls_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_ls_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Anchor_ls_Params) Handler() Anchor_Handler {
	p, _ := s.Struct.Ptr(1)
	return Anchor_Handler{Client: p.Interface().Client()}
}

func (s Anchor_ls_Params) HasHandler() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_ls_Params) SetHandler(v Anchor_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List struct{ capnp.List }

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_ls_Params_List{l}, err
}

func (s Anchor_ls_Params_List) At(i int) Anchor_ls_Params { return Anchor_ls_Params{s.List.Struct(i)} }

func (s Anchor_ls_Params_List) Set(i int, v Anchor_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xd377c9b486ad95d5, s.List)
	return str
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

func (p Anchor_ls_Params_Future) Handler() Anchor_Handler {
	return Anchor_Handler{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List struct{ capnp.List }

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_ls_Results_List{l}, err
}

func (s Anchor_ls_Results_List) At(i int) Anchor_ls_Results {
	return Anchor_ls_Results{s.List.Struct(i)}
}

func (s Anchor_ls_Results_List) Set(i int, v Anchor_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xb0fd7286c7f13ef3, s.List)
	return str
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xbecada985190dfe6

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xbecada985190dfe6, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Anchor_walk_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List struct{ capnp.List }

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Params_List{l}, err
}

func (s Anchor_walk_Params_List) At(i int) Anchor_walk_Params {
	return Anchor_walk_Params{s.List.Struct(i)}
}

func (s Anchor_walk_Params_List) Set(i int, v Anchor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xbecada985190dfe6, s.List)
	return str
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xa7762282e307ed37

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xa7762282e307ed37, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List struct{ capnp.List }

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_walk_Results_List{l}, err
}

func (s Anchor_walk_Results_List) At(i int) Anchor_walk_Results {
	return Anchor_walk_Results{s.List.Struct(i)}
}

func (s Anchor_walk_Results_List) Set(i int, v Anchor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xa7762282e307ed37, s.List)
	return str
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type Host struct{ Client *capnp.Client }

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) Host(ctx context.Context, params func(Host_host_Params) error) (Host_host_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "host",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_host_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Host_host_Results_Future{Future: ans.Future()}, release
}
func (c Host) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Host) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Host) AddRef() Host {
	return Host{
		Client: c.Client.AddRef(),
	}
}

func (c Host) Release() {
	c.Client.Release()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	Host(context.Context, Host_host) error

	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c, policy)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server, policy *server.Policy) Host {
	return Host{Client: capnp.NewClient(Host_NewServer(s, policy))}
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "host",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Host(ctx, Host_host{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Host_host holds the state for a server call to Host.host.
// See server.Call for documentation.
type Host_host struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_host) Args() Host_host_Params {
	return Host_host_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Host_host) AllocResults() (Host_host_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{Struct: r}, err
}

type Host_host_Params struct{ capnp.Struct }

// Host_host_Params_TypeID is the unique identifier for the type Host_host_Params.
const Host_host_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_host_Params(s *capnp.Segment) (Host_host_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_host_Params{st}, err
}

func NewRootHost_host_Params(s *capnp.Segment) (Host_host_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_host_Params{st}, err
}

func ReadRootHost_host_Params(msg *capnp.Message) (Host_host_Params, error) {
	root, err := msg.Root()
	return Host_host_Params{root.Struct()}, err
}

func (s Host_host_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, s.Struct)
	return str
}

// Host_host_Params_List is a list of Host_host_Params.
type Host_host_Params_List struct{ capnp.List }

// NewHost_host_Params creates a new list of Host_host_Params.
func NewHost_host_Params_List(s *capnp.Segment, sz int32) (Host_host_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Host_host_Params_List{l}, err
}

func (s Host_host_Params_List) At(i int) Host_host_Params { return Host_host_Params{s.List.Struct(i)} }

func (s Host_host_Params_List) Set(i int, v Host_host_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_host_Params_List) String() string {
	str, _ := text.MarshalList(0xa404c24b5375b9e4, s.List)
	return str
}

// Host_host_Params_Future is a wrapper for a Host_host_Params promised by a client call.
type Host_host_Params_Future struct{ *capnp.Future }

func (p Host_host_Params_Future) Struct() (Host_host_Params, error) {
	s, err := p.Future.Struct()
	return Host_host_Params{s}, err
}

type Host_host_Results struct{ capnp.Struct }

// Host_host_Results_TypeID is the unique identifier for the type Host_host_Results.
const Host_host_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_host_Results(s *capnp.Segment) (Host_host_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{st}, err
}

func NewRootHost_host_Results(s *capnp.Segment) (Host_host_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_host_Results{st}, err
}

func ReadRootHost_host_Results(msg *capnp.Message) (Host_host_Results, error) {
	root, err := msg.Root()
	return Host_host_Results{root.Struct()}, err
}

func (s Host_host_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, s.Struct)
	return str
}

func (s Host_host_Results) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Host_host_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s Host_host_Results) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Host_host_Results) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

// Host_host_Results_List is a list of Host_host_Results.
type Host_host_Results_List struct{ capnp.List }

// NewHost_host_Results creates a new list of Host_host_Results.
func NewHost_host_Results_List(s *capnp.Segment, sz int32) (Host_host_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Host_host_Results_List{l}, err
}

func (s Host_host_Results_List) At(i int) Host_host_Results {
	return Host_host_Results{s.List.Struct(i)}
}

func (s Host_host_Results_List) Set(i int, v Host_host_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Host_host_Results_List) String() string {
	str, _ := text.MarshalList(0x8f58928e854cd4f5, s.List)
	return str
}

// Host_host_Results_Future is a wrapper for a Host_host_Results promised by a client call.
type Host_host_Results_Future struct{ *capnp.Future }

func (p Host_host_Results_Future) Struct() (Host_host_Results, error) {
	s, err := p.Future.Struct()
	return Host_host_Results{s}, err
}

type Container struct{ Client *capnp.Client }

// Container_TypeID is the unique identifier for the type Container.
const Container_TypeID = 0xf6015788be04b4e3

func (c Container) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Container) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Container) AddRef() Container {
	return Container{
		Client: c.Client.AddRef(),
	}
}

func (c Container) Release() {
	c.Client.Release()
}

// A Container_Server is a Container with a local implementation.
type Container_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Container_NewServer creates a new Server from an implementation of Container_Server.
func Container_NewServer(s Container_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Container_Methods(nil, s), s, c, policy)
}

// Container_ServerToClient creates a new Client from an implementation of Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Container_ServerToClient(s Container_Server, policy *server.Policy) Container {
	return Container{Client: capnp.NewClient(Container_NewServer(s, policy))}
}

// Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Container_Methods(methods []server.Method, s Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x8cV}\x88T\xe5\x17>\xe7\xde\xfb\xce;\xf3" +
	"\xc3u|}WD\x7f\x89\xa2+\xe9\x96\x8b\xa2PM" +
	"\x1f3m+;k\x0as\xd5>\x10\"n\xbb7f" +
	"s>\xd6{\xef\xb4\x04\x85\xa4\xf8\xd5\x1f&\xc6R\x0a" +
	"\x19\x84\x9a\x86Q\x88\x09\xf3G\x1b\x0a!\x1bm\xc1\x9a" +
	"\xe4Ja\xa0n\x10\xd5\x16\xa5\xd5\xb2u\xe3}\xef\xdc" +
	"\x8f\x9d\x1d\xca\xbfvv\xe6p\x9e\xe7<\xe79\xcf\xbd" +
	"+'\x94\x8c\xb2\x8a\xfc\x1e\x07\xd0\xf3$\xe6\xce\xbe\xff" +
	"\xc8\xc8\x92\xea\x81\x9d\xc0\xfe\x8f\x00\x1a\x05Xmh\x1b" +
	"\x114\xf7\x87\x91%\xd5\xa3\xbb.\xef\x05\xb6\x00\xdd\xc4" +
	"\xa2\x0b'\xdez.?\x0eD\x11%\x1b\xb4-\xc8\x0d" +
	"Q\xcd\x9f\xd2\xfa\x01\xdd\xc3-\x93[V\xff\xbc\xe0\x15" +
	"`3U\xf7\xd4\xf1\xec\xf5\xf8\xa9[\x93\x00\xc8\xab\xda" +
	"a~N\xbb\x13\x80_\xd2\xf6\xf0\xa5\x84\x02\xb8\x1f\x1d" +
	"9y\xf6\xf3bu\xbf\x87IPtl\"\xeb\x10\x90" +
	"\xcf#i@\xf7\xe6\x97\xebw\xed?\xf8\xe4\xab\xc0x" +
	"P\xd0E\x14Q\xb0A\x16\xd0\x8bO\xf7L\x0e\xbe8" +
	"0\x0d\xaeH\x0e\xf3\x8a\x00\xe1\xdbH'?D\xe6\x02" +
	"\xb8\xd7\xab\x95M\x8f\x9e\xd7\x8ez\xdd$\xe9}d\x02" +
	"4\xf7\x9e\x1f\xe9\xb5\x1d\x8b\x9f\x7f\x07\xd8\x9c\x00\xa6H" +
	"f\x0b\x98\x8a\x84\xf9\xf5\xa1_.\xec\xb6\xfe\xfa\xc0+" +
	"\x90\xe2\x0c\x08\x1a\x9a\xfb\xc9h\xd7\x1d+\x0e\xee\x1b\x9c" +
	"F\xe0\x05\xf2.\x7fY\xc0\xf2}d\x0f\x1f\x95\xf3\x8e" +
	"]=\xa0\xbfq\xe5\xd3\xc1(\xce9\xf2?\x813$" +
	"q\x16\xbd\xb4\xe9\xf4`\xfb\x17\xc3\xa0sTB-e" +
	"%\xff\x93\x8cp\x12\x13\x9f0\xf6>\xa0{i\xe0\xbd" +
	"\xddg\x86\xfa/\xd6\xba\x89}\xf0C\xb1\x09@\xfef" +
	"L\xac\xa2\xb0\xec\xae?6\x7f\xbb|4\"\x1eOP" +
	"\xf1{\x13\x15`\xa7\xbe3w\\\xfex\xfe\xd7b\xaf" +
	">\x9b\x15t\x8b`s\x9f,\x18\xffj\xe1\xd9\x8e\xcf" +
	"\xd6\xdd\x10l\x82\x8a^*u\xd9F\x05\xc4\xb3{7" +
	"g\xc7w\xbe>\xe6\xb5\x90\xba\x0c\xd3g\x84.|\xf2" +
	"D\xe7l\xe3\xeaX\xa8\xf5\xea*\x95\x8a\xa9\x0f\xbc}" +
	"\xba\xfb\xf8k?\x01\xe3j8\xa2`M\xaf\xf0\x93T" +
	"\xb0<F;\xf9\xb0\xf8\x14\xda\x8d\xcdQC\xad\x01\xf9" +
	"\x87\xf4{~\x8e\x0ay\x87i'\xbf)\x8a\xff\xce\xac" +
	"\x19z\xec\xd8\xc0o\x11\xaf|C\xa5\xb87\xe48\xd7" +
	"\xceh\x83{\x9f\xc0[\xd3VE\xe2\xe7yS\\\xca" +
	"\x13\xa7<\x11\x9f\x0bw\xbb\xdd\x85\x8a\xed\x98V\x9b\xd6" +
	"m\xf4\x95\xfaR\x8f\xf7\x9a\xfdmY\xa3\xd4S0\xad" +
	"\xb6\xbc\xfc\xdb\xb2\xd1\xb4+\x05\x07\xed\xfa\xda\x87K\xdd" +
	"\xf9\xb2\x15T{\xff\xae-\x98ES-99D=" +
	"\xaej\x00\x1a\x02\xb0\xe5\xad\x00z\x8b\x8a\xfaJ\x05\x19" +
	"b\xb3\x90\x99\xadH\x01\xe8\xcbT\xd4\xd7(\x98,\x19" +
	"E\x13g\x80\x823\x00\xd3\x86l\x85,\xaa\x042\xc0" +
	"\x80\x01\xfalU\xb3_\x8f#F\xc4N\xb4\x87\xeeb" +
	"$\xb5\xbdF/\xbd\xd1\xec.[=z\\%\x00\x81" +
	"e\xd0_\x1f[\xd5\x0a\x0a[J\x11}uCW\xb0" +
	"y)PX\x13M\xf6:\xa6\x95\xc1t\xa1\\\xdeZ" +
	"\xe9\xcb`\x0e\xf1v\xe4\xcb\x19\x96Q\xb4\x01t-\x90" +
	"\xa3\xa9\x1d@\x8f\xab\xa8\xb7(\xb8\xdd\x92\xc4l\x9c\x09" +
	"\x98S\x11g\x85\xf4\x01\xc5\x97\x01\x86\xeaad\xcb\xb6" +
	"\xd3\x96/\xdbNm1\xf6\x94\xce\xad\xb5\xce\xcd\x0a&" +
	"E\x91\xafi\xbdt\xd9\xb2j\xcb%iR\x10?2" +
	"\xd0O\"\xc6\x84 \x84\xca&\x19\xd45\xc4\xc86 " +
	"h\xa7\xd4\x93J{\xf3\xd6\xb3\xae\x99\xa5\xdf(l\x0d" +
	"\x0c\x15\xe5\x9d\x0ay\xff\xf7\xfa\xc9\x94\x9e\x05;P\xc2" +
	"/\xf0\x7fO\x8a\x02\xc9=<0l\xf7=Q3\x83" +
	"\x9f/\xe8\xa7\x1f[5\xbff\x86 \xc9\xd0\x8fN6" +
	"\xafU\x9aA-\xd8\x19L\x8aq\xa6\x1a\xa1\xc1\xb8\x8d" +
	"\x0c\xd0\x1a\x1a \xd9g8y\x7f\xfbb[\xd1\x9d+" +
	"\x11_I\x07c\x8fX\xda\x8c\xa0\xd3Z\xd1)\xa3\xa2" +
	"\xbe^A\xff\xb0\xba\x16\x03\xe8\x1d*\xea9\x05\x99\x82" +
	"\xcd\xa8\x00\xb0\x0d\xe2\xcb\xac\x8a\xfaf\x01i\x9a\x96\xef" +
	"\x0c\xea8\x05$\xa0 \x01\xa4\xb6\xb9\x0d\x13\xa0`b" +
	":\x87P\xed\xda\x8a\x1b\xddw&r\xdf\x0f\x0a\x97\xdf" +
	"\xab\xa2\xde\xd1x\xc8\xed\xde\x81\x88E\x07\xdb\xa9[t" +
	"t|q}\x01t\x83[jV\xa2\x1d\x83@\xa8\xeb" +
	"\xd88\xbb\"\xa7\xaa6\xee..\xd5\xf3e\xe4R\x83" +
	"7\x86\xc6\x97*i{i\x11z>\"Z*\x0c\xc5" +
	" \x13\xe7\x87\x99\x98\xf6\x92\xa1.\x11f\x01\xaa\xe5\xad" +
	"\x88\xa0 \xde\xee\\\x02\x9c\x16\x9c\xf0(c\xf5\xba6" +
	">\xa00\xceT\xd3\x0a\xc3\xc2\x7f\x9dA\xff]\x8a\xb1" +
	"\x94\x0c\x8b\xb4\x877\xf5\"\x94zfIy{\xe2(" +
	"\xc37.\xb4\\\xff\xf9\x01\x0b\xcd\xa2YrjX\xfe" +
	"\xc3\x1b\xfdG\xf0\xbfb5\x10\xbe\xd1\xf5E\xc3F\x9c" +
	"BW\xc7\xb4\x98\xac\xb1~\xa4\\r\x8c\xde\x92iA" +
	"\x0e1\xa7\x92\xfa\x1c\xfc'\x00\x00\xff\xff\x8e\x89\xf3A"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x8390b923d29e3b12,
		0x88d885a4b923d2ec,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0x8f58928e854cd4f5,
		0x957cbefc645fd307,
		0xa404c24b5375b9e4,
		0xa7762282e307ed37,
		0xb0fd7286c7f13ef3,
		0xbe89922d1c49d9c5,
		0xbecada985190dfe6,
		0xcdcf42beb2537d20,
		0xd377c9b486ad95d5,
		0xd929e054f82b286c,
		0xdc1abfd88265e7ac,
		0xe54acc44b61fd7ef,
		0xe69783ef48548866,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xef686a9fa8c72009,
		0xf495a555c9344000,
		0xf6015788be04b4e3)
}
