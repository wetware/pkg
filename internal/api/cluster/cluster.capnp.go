// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Record struct{ capnp.Struct }

// Record_TypeID is the unique identifier for the type Record.
const Record_TypeID = 0x82a35d1a82458a4a

func NewRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func NewRootRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func ReadRootRecord(msg *capnp.Message) (Record, error) {
	root, err := msg.Root()
	return Record{root.Struct()}, err
}

func (s Record) String() string {
	str, _ := text.Marshal(0x82a35d1a82458a4a, s.Struct)
	return str
}

func (s Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Record_List is a list of Record.
type Record_List struct{ capnp.List }

// NewRecord creates a new list of Record.
func NewRecord_List(s *capnp.Segment, sz int32) (Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Record_List{l}, err
}

func (s Record_List) At(i int) Record { return Record{s.List.Struct(i)} }

func (s Record_List) Set(i int, v Record) error { return s.List.SetStruct(i, v.Struct) }

func (s Record_List) String() string {
	str, _ := text.MarshalList(0x82a35d1a82458a4a, s.List)
	return str
}

// Record_Future is a wrapper for a Record promised by a client call.
type Record_Future struct{ *capnp.Future }

func (p Record_Future) Struct() (Record, error) {
	s, err := p.Future.Struct()
	return Record{s}, err
}

type Iteration struct{ capnp.Struct }

// Iteration_TypeID is the unique identifier for the type Iteration.
const Iteration_TypeID = 0xdc52a9a7339d80cd

func NewIteration(s *capnp.Segment) (Iteration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Iteration{st}, err
}

func NewRootIteration(s *capnp.Segment) (Iteration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Iteration{st}, err
}

func ReadRootIteration(msg *capnp.Message) (Iteration, error) {
	root, err := msg.Root()
	return Iteration{root.Struct()}, err
}

func (s Iteration) String() string {
	str, _ := text.Marshal(0xdc52a9a7339d80cd, s.Struct)
	return str
}

func (s Iteration) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s Iteration) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Iteration) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s Iteration) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Iteration) Dedadline() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Iteration) SetDedadline(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Iteration_List is a list of Iteration.
type Iteration_List struct{ capnp.List }

// NewIteration creates a new list of Iteration.
func NewIteration_List(s *capnp.Segment, sz int32) (Iteration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Iteration_List{l}, err
}

func (s Iteration_List) At(i int) Iteration { return Iteration{s.List.Struct(i)} }

func (s Iteration_List) Set(i int, v Iteration) error { return s.List.SetStruct(i, v.Struct) }

func (s Iteration_List) String() string {
	str, _ := text.MarshalList(0xdc52a9a7339d80cd, s.List)
	return str
}

// Iteration_Future is a wrapper for a Iteration promised by a client call.
type Iteration_Future struct{ *capnp.Future }

func (p Iteration_Future) Struct() (Iteration, error) {
	s, err := p.Future.Struct()
	return Iteration{s}, err
}

func (p Iteration_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

type Cluster struct{ Client *capnp.Client }

// Cluster_TypeID is the unique identifier for the type Cluster.
const Cluster_TypeID = 0x89ea60fe991cc330

func (c Cluster) Iter(ctx context.Context, params func(Cluster_iter_Params) error) (Cluster_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "api/cluster.capnp:Cluster",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_iter_Results_Future{Future: ans.Future()}, release
}
func (c Cluster) Lookup(ctx context.Context, params func(Cluster_lookup_Params) error) (Cluster_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "api/cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_lookup_Results_Future{Future: ans.Future()}, release
}

func (c Cluster) AddRef() Cluster {
	return Cluster{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster) Release() {
	c.Client.Release()
}

// A Cluster_Server is a Cluster with a local implementation.
type Cluster_Server interface {
	Iter(context.Context, Cluster_iter) error

	Lookup(context.Context, Cluster_lookup) error
}

// Cluster_NewServer creates a new Server from an implementation of Cluster_Server.
func Cluster_NewServer(s Cluster_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Methods(nil, s), s, c, policy)
}

// Cluster_ServerToClient creates a new Client from an implementation of Cluster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ServerToClient(s Cluster_Server, policy *server.Policy) Cluster {
	return Cluster{Client: capnp.NewClient(Cluster_NewServer(s, policy))}
}

// Cluster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Methods(methods []server.Method, s Cluster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      0,
			InterfaceName: "api/cluster.capnp:Cluster",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, Cluster_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89ea60fe991cc330,
			MethodID:      1,
			InterfaceName: "api/cluster.capnp:Cluster",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, Cluster_lookup{call})
		},
	})

	return methods
}

// Cluster_iter holds the state for a server call to Cluster.iter.
// See server.Call for documentation.
type Cluster_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_iter) Args() Cluster_iter_Params {
	return Cluster_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_iter) AllocResults() (Cluster_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{Struct: r}, err
}

// Cluster_lookup holds the state for a server call to Cluster.lookup.
// See server.Call for documentation.
type Cluster_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_lookup) Args() Cluster_lookup_Params {
	return Cluster_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_lookup) AllocResults() (Cluster_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{Struct: r}, err
}

type Cluster_Handler struct{ Client *capnp.Client }

// Cluster_Handler_TypeID is the unique identifier for the type Cluster_Handler.
const Cluster_Handler_TypeID = 0xa8bd4ea1c77154c3

func (c Cluster_Handler) Handle(ctx context.Context, params func(Cluster_Handler_handle_Params) error) (Cluster_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "api/cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Cluster_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Cluster_Handler) AddRef() Cluster_Handler {
	return Cluster_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Cluster_Handler) Release() {
	c.Client.Release()
}

// A Cluster_Handler_Server is a Cluster_Handler with a local implementation.
type Cluster_Handler_Server interface {
	Handle(context.Context, Cluster_Handler_handle) error
}

// Cluster_Handler_NewServer creates a new Server from an implementation of Cluster_Handler_Server.
func Cluster_Handler_NewServer(s Cluster_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Handler_Methods(nil, s), s, c, policy)
}

// Cluster_Handler_ServerToClient creates a new Client from an implementation of Cluster_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Handler_ServerToClient(s Cluster_Handler_Server, policy *server.Policy) Cluster_Handler {
	return Cluster_Handler{Client: capnp.NewClient(Cluster_Handler_NewServer(s, policy))}
}

// Cluster_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Handler_Methods(methods []server.Method, s Cluster_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8bd4ea1c77154c3,
			MethodID:      0,
			InterfaceName: "api/cluster.capnp:Cluster.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Cluster_Handler_handle{call})
		},
	})

	return methods
}

// Cluster_Handler_handle holds the state for a server call to Cluster_Handler.handle.
// See server.Call for documentation.
type Cluster_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Handler_handle) Args() Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Cluster_Handler_handle) AllocResults() (Cluster_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{Struct: r}, err
}

type Cluster_Handler_handle_Params struct{ capnp.Struct }

// Cluster_Handler_handle_Params_TypeID is the unique identifier for the type Cluster_Handler_handle_Params.
const Cluster_Handler_handle_Params_TypeID = 0x8f27eaf1e95f34b6

func NewCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func NewRootCluster_Handler_handle_Params(s *capnp.Segment) (Cluster_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Handler_handle_Params{st}, err
}

func ReadRootCluster_Handler_handle_Params(msg *capnp.Message) (Cluster_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Params{root.Struct()}, err
}

func (s Cluster_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8f27eaf1e95f34b6, s.Struct)
	return str
}

func (s Cluster_Handler_handle_Params) Iterations() (Iteration_List, error) {
	p, err := s.Struct.Ptr(0)
	return Iteration_List{List: p.List()}, err
}

func (s Cluster_Handler_handle_Params) HasIterations() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_Handler_handle_Params) SetIterations(v Iteration_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIterations sets the iterations field to a newly
// allocated Iteration_List, preferring placement in s's segment.
func (s Cluster_Handler_handle_Params) NewIterations(n int32) (Iteration_List, error) {
	l, err := NewIteration_List(s.Struct.Segment(), n)
	if err != nil {
		return Iteration_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Cluster_Handler_handle_Params_List is a list of Cluster_Handler_handle_Params.
type Cluster_Handler_handle_Params_List struct{ capnp.List }

// NewCluster_Handler_handle_Params creates a new list of Cluster_Handler_handle_Params.
func NewCluster_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_Handler_handle_Params_List{l}, err
}

func (s Cluster_Handler_handle_Params_List) At(i int) Cluster_Handler_handle_Params {
	return Cluster_Handler_handle_Params{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Params_List) Set(i int, v Cluster_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8f27eaf1e95f34b6, s.List)
	return str
}

// Cluster_Handler_handle_Params_Future is a wrapper for a Cluster_Handler_handle_Params promised by a client call.
type Cluster_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Params_Future) Struct() (Cluster_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Params{s}, err
}

type Cluster_Handler_handle_Results struct{ capnp.Struct }

// Cluster_Handler_handle_Results_TypeID is the unique identifier for the type Cluster_Handler_handle_Results.
const Cluster_Handler_handle_Results_TypeID = 0xc97d97ad2c77fb6e

func NewCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func NewRootCluster_Handler_handle_Results(s *capnp.Segment) (Cluster_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Handler_handle_Results{st}, err
}

func ReadRootCluster_Handler_handle_Results(msg *capnp.Message) (Cluster_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Cluster_Handler_handle_Results{root.Struct()}, err
}

func (s Cluster_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xc97d97ad2c77fb6e, s.Struct)
	return str
}

// Cluster_Handler_handle_Results_List is a list of Cluster_Handler_handle_Results.
type Cluster_Handler_handle_Results_List struct{ capnp.List }

// NewCluster_Handler_handle_Results creates a new list of Cluster_Handler_handle_Results.
func NewCluster_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Cluster_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_Handler_handle_Results_List{l}, err
}

func (s Cluster_Handler_handle_Results_List) At(i int) Cluster_Handler_handle_Results {
	return Cluster_Handler_handle_Results{s.List.Struct(i)}
}

func (s Cluster_Handler_handle_Results_List) Set(i int, v Cluster_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xc97d97ad2c77fb6e, s.List)
	return str
}

// Cluster_Handler_handle_Results_Future is a wrapper for a Cluster_Handler_handle_Results promised by a client call.
type Cluster_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Cluster_Handler_handle_Results_Future) Struct() (Cluster_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_Handler_handle_Results{s}, err
}

type Cluster_iter_Params struct{ capnp.Struct }

// Cluster_iter_Params_TypeID is the unique identifier for the type Cluster_iter_Params.
const Cluster_iter_Params_TypeID = 0xfecdf9227b3adc3e

func NewCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func NewRootCluster_iter_Params(s *capnp.Segment) (Cluster_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_iter_Params{st}, err
}

func ReadRootCluster_iter_Params(msg *capnp.Message) (Cluster_iter_Params, error) {
	root, err := msg.Root()
	return Cluster_iter_Params{root.Struct()}, err
}

func (s Cluster_iter_Params) String() string {
	str, _ := text.Marshal(0xfecdf9227b3adc3e, s.Struct)
	return str
}

func (s Cluster_iter_Params) Handler() Cluster_Handler {
	p, _ := s.Struct.Ptr(0)
	return Cluster_Handler{Client: p.Interface().Client()}
}

func (s Cluster_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_iter_Params) SetHandler(v Cluster_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Cluster_iter_Params) BufSize() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Cluster_iter_Params) SetBufSize(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Cluster_iter_Params_List is a list of Cluster_iter_Params.
type Cluster_iter_Params_List struct{ capnp.List }

// NewCluster_iter_Params creates a new list of Cluster_iter_Params.
func NewCluster_iter_Params_List(s *capnp.Segment, sz int32) (Cluster_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_iter_Params_List{l}, err
}

func (s Cluster_iter_Params_List) At(i int) Cluster_iter_Params {
	return Cluster_iter_Params{s.List.Struct(i)}
}

func (s Cluster_iter_Params_List) Set(i int, v Cluster_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xfecdf9227b3adc3e, s.List)
	return str
}

// Cluster_iter_Params_Future is a wrapper for a Cluster_iter_Params promised by a client call.
type Cluster_iter_Params_Future struct{ *capnp.Future }

func (p Cluster_iter_Params_Future) Struct() (Cluster_iter_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Params{s}, err
}

func (p Cluster_iter_Params_Future) Handler() Cluster_Handler {
	return Cluster_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Cluster_iter_Results struct{ capnp.Struct }

// Cluster_iter_Results_TypeID is the unique identifier for the type Cluster_iter_Results.
const Cluster_iter_Results_TypeID = 0xb4b55ec8b670d8c2

func NewCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func NewRootCluster_iter_Results(s *capnp.Segment) (Cluster_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_iter_Results{st}, err
}

func ReadRootCluster_iter_Results(msg *capnp.Message) (Cluster_iter_Results, error) {
	root, err := msg.Root()
	return Cluster_iter_Results{root.Struct()}, err
}

func (s Cluster_iter_Results) String() string {
	str, _ := text.Marshal(0xb4b55ec8b670d8c2, s.Struct)
	return str
}

// Cluster_iter_Results_List is a list of Cluster_iter_Results.
type Cluster_iter_Results_List struct{ capnp.List }

// NewCluster_iter_Results creates a new list of Cluster_iter_Results.
func NewCluster_iter_Results_List(s *capnp.Segment, sz int32) (Cluster_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Cluster_iter_Results_List{l}, err
}

func (s Cluster_iter_Results_List) At(i int) Cluster_iter_Results {
	return Cluster_iter_Results{s.List.Struct(i)}
}

func (s Cluster_iter_Results_List) Set(i int, v Cluster_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xb4b55ec8b670d8c2, s.List)
	return str
}

// Cluster_iter_Results_Future is a wrapper for a Cluster_iter_Results promised by a client call.
type Cluster_iter_Results_Future struct{ *capnp.Future }

func (p Cluster_iter_Results_Future) Struct() (Cluster_iter_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_iter_Results{s}, err
}

type Cluster_lookup_Params struct{ capnp.Struct }

// Cluster_lookup_Params_TypeID is the unique identifier for the type Cluster_lookup_Params.
const Cluster_lookup_Params_TypeID = 0x932fba9e18ce7bd3

func NewCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func NewRootCluster_lookup_Params(s *capnp.Segment) (Cluster_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_lookup_Params{st}, err
}

func ReadRootCluster_lookup_Params(msg *capnp.Message) (Cluster_lookup_Params, error) {
	root, err := msg.Root()
	return Cluster_lookup_Params{root.Struct()}, err
}

func (s Cluster_lookup_Params) String() string {
	str, _ := text.Marshal(0x932fba9e18ce7bd3, s.Struct)
	return str
}

func (s Cluster_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cluster_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// Cluster_lookup_Params_List is a list of Cluster_lookup_Params.
type Cluster_lookup_Params_List struct{ capnp.List }

// NewCluster_lookup_Params creates a new list of Cluster_lookup_Params.
func NewCluster_lookup_Params_List(s *capnp.Segment, sz int32) (Cluster_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Cluster_lookup_Params_List{l}, err
}

func (s Cluster_lookup_Params_List) At(i int) Cluster_lookup_Params {
	return Cluster_lookup_Params{s.List.Struct(i)}
}

func (s Cluster_lookup_Params_List) Set(i int, v Cluster_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0x932fba9e18ce7bd3, s.List)
	return str
}

// Cluster_lookup_Params_Future is a wrapper for a Cluster_lookup_Params promised by a client call.
type Cluster_lookup_Params_Future struct{ *capnp.Future }

func (p Cluster_lookup_Params_Future) Struct() (Cluster_lookup_Params, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Params{s}, err
}

type Cluster_lookup_Results struct{ capnp.Struct }

// Cluster_lookup_Results_TypeID is the unique identifier for the type Cluster_lookup_Results.
const Cluster_lookup_Results_TypeID = 0xa9f91e1c8368a4dc

func NewCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func NewRootCluster_lookup_Results(s *capnp.Segment) (Cluster_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_lookup_Results{st}, err
}

func ReadRootCluster_lookup_Results(msg *capnp.Message) (Cluster_lookup_Results, error) {
	root, err := msg.Root()
	return Cluster_lookup_Results{root.Struct()}, err
}

func (s Cluster_lookup_Results) String() string {
	str, _ := text.Marshal(0xa9f91e1c8368a4dc, s.Struct)
	return str
}

func (s Cluster_lookup_Results) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s Cluster_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Cluster_lookup_Results) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s Cluster_lookup_Results) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Cluster_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s Cluster_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// Cluster_lookup_Results_List is a list of Cluster_lookup_Results.
type Cluster_lookup_Results_List struct{ capnp.List }

// NewCluster_lookup_Results creates a new list of Cluster_lookup_Results.
func NewCluster_lookup_Results_List(s *capnp.Segment, sz int32) (Cluster_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Cluster_lookup_Results_List{l}, err
}

func (s Cluster_lookup_Results_List) At(i int) Cluster_lookup_Results {
	return Cluster_lookup_Results{s.List.Struct(i)}
}

func (s Cluster_lookup_Results_List) Set(i int, v Cluster_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Cluster_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xa9f91e1c8368a4dc, s.List)
	return str
}

// Cluster_lookup_Results_Future is a wrapper for a Cluster_lookup_Results promised by a client call.
type Cluster_lookup_Results_Future struct{ *capnp.Future }

func (p Cluster_lookup_Results_Future) Struct() (Cluster_lookup_Results, error) {
	s, err := p.Future.Struct()
	return Cluster_lookup_Results{s}, err
}

func (p Cluster_lookup_Results_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94\x93OhcU\x18\xc5\xcf\xb9\xf7>_\x0b" +
	"\xa9\xd3\xdbWP\xc3\xa0P*\xce\x0c3\x9d\x8e\x9d\xc5" +
	"\x10\xd0\x848\x83\xcd\xa0\x92\x1b\xc7\x85\xc2\xa8\xb1y\xd2" +
	"\xd0\x98\xa4/\x09\x05K\xa9TD\xec\xc6\x85\x0bq\xa1" +
	" \xfe-VD\xb0]\x08.\xb4\x0b\xff@]\xe8B" +
	"\x85\xae\xc4\x8d\xddu#\x14\xb5O\xee\x8b\xc9kk\xda" +
	"\xe2\xea=\xee\xfd\xf8\xce\xf9~\xe7\xbb\xe3\x1f1#." +
	"9?)\xc0\\qn\x09\xaf/_[J\xde|g" +
	"\x09f\x88\"\\}\x7f\xf2\xb7\xbe\xd5?\xfe\x82C\x17" +
	"\xf0\x8c\xf8\xce\xbb)\xec\xdf\xe3\xe2\x130\x1c\xdf8\xfd" +
	"\xc6\xde\xd3\xdb\xaf@\x0f\xc9\xb8\x16\xf4v\xc4\x0f\xde\xdf" +
	"\xe26\xc0s\xe4\xcb\xdec\xd2\x05\xc2\xf5\xcbO\xfd\xbe" +
	"\xb3}\xcf\xab\xd0#D\xbb\xe1\xc4}r\x89\xa0\x97\x93" +
	"i0\xfcq\xfe\xfb\xdb\xdf\xfa\xfc\xe2k\xd0\xc9n\xc1" +
	"\x82\xcc\xda\x82\x97\xa2\x82\x8d\x1b\xb3_\xbf\xfd\xc8\x17\x1f" +
	"B'e\xac\x0dN\xbc'\x87\xe8\xadY\x15\xefS\xf9" +
	"\xa0\xf7K\xa4\xb7\xf5\xee\xf4\x8b\xa7\xef\xdc]\x81I\xb2" +
	"\xdb\xefKy\xdd\xf6\xdb\x94s`\xf8\xd5\xcf\xf5\xf5o" +
	"\x9e\\\xfb\xac-\xa8\xec\xfdY\x95\"TX\xfds\xee" +
	"\xfc\xc7\xaf/|\xdb\xf6\x1a\xddh\xb5lo6_x" +
	"s\xe2\x83\x95\xc2\x96\xe5\xc3\xc3|\xa8~\xf5\x06l\xb5" +
	"\xd7\xaf\xac\xc0\xfd[\xa9\xf9\x91\xdd\xcd\xbd\x03\x16\xca\xea" +
	"^kaV\xcd\xe1BX\xac\x97/NUZ\x0d\xd1" +
	"\xf4\x83\xb1\xa9b\xbdZO\x15\xfc\xa9ZP\x02\xf2\xa4" +
	"IH\x05(\x02\xfa\xda9\xc0d$\xcdC\x82\xe4\xb0" +
	"m\xa7s#\x80\xb9*i\xf2\x82Zp\x98\x02\xd0\x0f" +
	"\xdb\xc3IIsC\xf0T\xdd\xf7\x03& \x98\x00\xdd" +
	"f\xb3B\x07\x82\x0e\xe86\xfcY\xf6C\xb0\x1f\xec\xe5" +
	"\xe1\x81J\xab\xd1\xf4\x19\x18\xc5\xfd\xd8\x99]\x9c,V" +
	"K\x15?0}\xd2\x01\xba\x03\xb2\x83R_:\x07\xa1" +
	"\xefv\x19\xc7\xc9N\x10\xfa\x8e\x14\x84\x1epO\x95\x9b" +
	"~\x90a\xbaR\xab\xcd\xb4\xea\x19\xe6\x19{p\x0e{" +
	"\x08\xc6\xfeU\x1c\x9b\x8e\xbe\xa3\xf9bP|\xae\x01\xa3" +
	"\xbah\x06\x9e\x00LB\xd2\x9c\x11\x0cm\xefb\xb3\\" +
	"\x83\xac6x+\x98\x97\xe4`\x9c\x1ah\x0f\xbbr\xea" +
	"\xbfrmW\xbddR\x80\xe9\x934\xc3\x82i\x0b6" +
	"w\xb5\x83\xb6\xdbO\x1ee\x9f\x81\x8dSE\xd0:\x0f" +
	"\x81\x9d-\xd3\xda\x82q\xdct{\xc4\x83D\x8e\xb6X" +
	"\xf0\x1b\xadJ\xb3\x11\xb9\xea\x98<kM\x8eJ\x9a\xf1" +
	"xM.$\x01sF\xd2\\\x16L\x07\xd1vq0" +
	"~\xe8 \x07AY\x9b!!\xc8\xe3\xa7\xb1xG\x0b" +
	"\xe9\xb6\xf2\xffH\xad\xeb\xb5\xd7\xb6\xe5\xa2\xcc\xdcr\xad" +
	"j!\x9d0L\x010\xe7%\xcd\x95c\x86\x09K~" +
	"\xa9X\xaa\x94\xab\xa0\xdfY\xf9\x13\xa7\xca\xdf\x15E\xbe" +
	"_?\xdbC?\x1b\xc3\\l\x0f\x17P\xc7o\x04\xa4" +
	"\x06\x17\x9fi=\xfbh\xf9y\x9f\x0a\x82\x0a\xfc'\x00" +
	"\x00\xff\xff\xc4\xcfz\x13"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x82a35d1a82458a4a,
		0x89ea60fe991cc330,
		0x8f27eaf1e95f34b6,
		0x932fba9e18ce7bd3,
		0xa8bd4ea1c77154c3,
		0xa9f91e1c8368a4dc,
		0xb4b55ec8b670d8c2,
		0xc97d97ad2c77fb6e,
		0xdc52a9a7339d80cd,
		0xfecdf9227b3adc3e)
}
