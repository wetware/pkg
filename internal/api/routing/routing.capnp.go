// Code generated by capnpc-go. DO NOT EDIT.

package routing

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Record struct{ capnp.Struct }

// Record_TypeID is the unique identifier for the type Record.
const Record_TypeID = 0x82a35d1a82458a4a

func NewRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func NewRootRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Record{st}, err
}

func ReadRootRecord(msg *capnp.Message) (Record, error) {
	root, err := msg.Root()
	return Record{root.Struct()}, err
}

func (s Record) String() string {
	str, _ := text.Marshal(0x82a35d1a82458a4a, s.Struct)
	return str
}

func (s Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// Record_List is a list of Record.
type Record_List struct{ capnp.List }

// NewRecord creates a new list of Record.
func NewRecord_List(s *capnp.Segment, sz int32) (Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Record_List{l}, err
}

func (s Record_List) At(i int) Record { return Record{s.List.Struct(i)} }

func (s Record_List) Set(i int, v Record) error { return s.List.SetStruct(i, v.Struct) }

func (s Record_List) String() string {
	str, _ := text.MarshalList(0x82a35d1a82458a4a, s.List)
	return str
}

// Record_Future is a wrapper for a Record promised by a client call.
type Record_Future struct{ *capnp.Future }

func (p Record_Future) Struct() (Record, error) {
	s, err := p.Future.Struct()
	return Record{s}, err
}

type PushedIteration struct{ capnp.Struct }

// PushedIteration_TypeID is the unique identifier for the type PushedIteration.
const PushedIteration_TypeID = 0xc2ad1ddee90a4454

func NewPushedIteration(s *capnp.Segment) (PushedIteration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PushedIteration{st}, err
}

func NewRootPushedIteration(s *capnp.Segment) (PushedIteration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PushedIteration{st}, err
}

func ReadRootPushedIteration(msg *capnp.Message) (PushedIteration, error) {
	root, err := msg.Root()
	return PushedIteration{root.Struct()}, err
}

func (s PushedIteration) String() string {
	str, _ := text.Marshal(0xc2ad1ddee90a4454, s.Struct)
	return str
}

func (s PushedIteration) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s PushedIteration) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s PushedIteration) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s PushedIteration) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PushedIteration) Dedadline() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PushedIteration) SetDedadline(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// PushedIteration_List is a list of PushedIteration.
type PushedIteration_List struct{ capnp.List }

// NewPushedIteration creates a new list of PushedIteration.
func NewPushedIteration_List(s *capnp.Segment, sz int32) (PushedIteration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PushedIteration_List{l}, err
}

func (s PushedIteration_List) At(i int) PushedIteration { return PushedIteration{s.List.Struct(i)} }

func (s PushedIteration_List) Set(i int, v PushedIteration) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PushedIteration_List) String() string {
	str, _ := text.MarshalList(0xc2ad1ddee90a4454, s.List)
	return str
}

// PushedIteration_Future is a wrapper for a PushedIteration promised by a client call.
type PushedIteration_Future struct{ *capnp.Future }

func (p PushedIteration_Future) Struct() (PushedIteration, error) {
	s, err := p.Future.Struct()
	return PushedIteration{s}, err
}

func (p PushedIteration_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

type Routing struct{ Client *capnp.Client }

// Routing_TypeID is the unique identifier for the type Routing.
const Routing_TypeID = 0x9e7310daa8a8af1e

func (c Routing) Iter(ctx context.Context, params func(Routing_iter_Params) error) (Routing_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9e7310daa8a8af1e,
			MethodID:      0,
			InterfaceName: "api/routing.capnp:Routing",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Routing_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Routing_iter_Results_Future{Future: ans.Future()}, release
}
func (c Routing) Lookup(ctx context.Context, params func(Routing_lookup_Params) error) (Routing_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9e7310daa8a8af1e,
			MethodID:      1,
			InterfaceName: "api/routing.capnp:Routing",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Routing_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Routing_lookup_Results_Future{Future: ans.Future()}, release
}

func (c Routing) AddRef() Routing {
	return Routing{
		Client: c.Client.AddRef(),
	}
}

func (c Routing) Release() {
	c.Client.Release()
}

// A Routing_Server is a Routing with a local implementation.
type Routing_Server interface {
	Iter(context.Context, Routing_iter) error

	Lookup(context.Context, Routing_lookup) error
}

// Routing_NewServer creates a new Server from an implementation of Routing_Server.
func Routing_NewServer(s Routing_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Routing_Methods(nil, s), s, c, policy)
}

// Routing_ServerToClient creates a new Client from an implementation of Routing_Server.
// The caller is responsible for calling Release on the returned Client.
func Routing_ServerToClient(s Routing_Server, policy *server.Policy) Routing {
	return Routing{Client: capnp.NewClient(Routing_NewServer(s, policy))}
}

// Routing_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Routing_Methods(methods []server.Method, s Routing_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9e7310daa8a8af1e,
			MethodID:      0,
			InterfaceName: "api/routing.capnp:Routing",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, Routing_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9e7310daa8a8af1e,
			MethodID:      1,
			InterfaceName: "api/routing.capnp:Routing",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, Routing_lookup{call})
		},
	})

	return methods
}

// Routing_iter holds the state for a server call to Routing.iter.
// See server.Call for documentation.
type Routing_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Routing_iter) Args() Routing_iter_Params {
	return Routing_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Routing_iter) AllocResults() (Routing_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_iter_Results{Struct: r}, err
}

// Routing_lookup holds the state for a server call to Routing.lookup.
// See server.Call for documentation.
type Routing_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Routing_lookup) Args() Routing_lookup_Params {
	return Routing_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Routing_lookup) AllocResults() (Routing_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Routing_lookup_Results{Struct: r}, err
}

type Routing_Handler struct{ Client *capnp.Client }

// Routing_Handler_TypeID is the unique identifier for the type Routing_Handler.
const Routing_Handler_TypeID = 0xd221b2737a89d81e

func (c Routing_Handler) Handle(ctx context.Context, params func(Routing_Handler_handle_Params) error) (Routing_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd221b2737a89d81e,
			MethodID:      0,
			InterfaceName: "api/routing.capnp:Routing.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Routing_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Routing_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Routing_Handler) AddRef() Routing_Handler {
	return Routing_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Routing_Handler) Release() {
	c.Client.Release()
}

// A Routing_Handler_Server is a Routing_Handler with a local implementation.
type Routing_Handler_Server interface {
	Handle(context.Context, Routing_Handler_handle) error
}

// Routing_Handler_NewServer creates a new Server from an implementation of Routing_Handler_Server.
func Routing_Handler_NewServer(s Routing_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Routing_Handler_Methods(nil, s), s, c, policy)
}

// Routing_Handler_ServerToClient creates a new Client from an implementation of Routing_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Routing_Handler_ServerToClient(s Routing_Handler_Server, policy *server.Policy) Routing_Handler {
	return Routing_Handler{Client: capnp.NewClient(Routing_Handler_NewServer(s, policy))}
}

// Routing_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Routing_Handler_Methods(methods []server.Method, s Routing_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd221b2737a89d81e,
			MethodID:      0,
			InterfaceName: "api/routing.capnp:Routing.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Routing_Handler_handle{call})
		},
	})

	return methods
}

// Routing_Handler_handle holds the state for a server call to Routing_Handler.handle.
// See server.Call for documentation.
type Routing_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Routing_Handler_handle) Args() Routing_Handler_handle_Params {
	return Routing_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Routing_Handler_handle) AllocResults() (Routing_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_Handler_handle_Results{Struct: r}, err
}

type Routing_Handler_handle_Params struct{ capnp.Struct }

// Routing_Handler_handle_Params_TypeID is the unique identifier for the type Routing_Handler_handle_Params.
const Routing_Handler_handle_Params_TypeID = 0x80bfaaba61a06964

func NewRouting_Handler_handle_Params(s *capnp.Segment) (Routing_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_Handler_handle_Params{st}, err
}

func NewRootRouting_Handler_handle_Params(s *capnp.Segment) (Routing_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_Handler_handle_Params{st}, err
}

func ReadRootRouting_Handler_handle_Params(msg *capnp.Message) (Routing_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Routing_Handler_handle_Params{root.Struct()}, err
}

func (s Routing_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x80bfaaba61a06964, s.Struct)
	return str
}

func (s Routing_Handler_handle_Params) Pi() (PushedIteration, error) {
	p, err := s.Struct.Ptr(0)
	return PushedIteration{Struct: p.Struct()}, err
}

func (s Routing_Handler_handle_Params) HasPi() bool {
	return s.Struct.HasPtr(0)
}

func (s Routing_Handler_handle_Params) SetPi(v PushedIteration) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPi sets the pi field to a newly
// allocated PushedIteration struct, preferring placement in s's segment.
func (s Routing_Handler_handle_Params) NewPi() (PushedIteration, error) {
	ss, err := NewPushedIteration(s.Struct.Segment())
	if err != nil {
		return PushedIteration{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Routing_Handler_handle_Params_List is a list of Routing_Handler_handle_Params.
type Routing_Handler_handle_Params_List struct{ capnp.List }

// NewRouting_Handler_handle_Params creates a new list of Routing_Handler_handle_Params.
func NewRouting_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Routing_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Routing_Handler_handle_Params_List{l}, err
}

func (s Routing_Handler_handle_Params_List) At(i int) Routing_Handler_handle_Params {
	return Routing_Handler_handle_Params{s.List.Struct(i)}
}

func (s Routing_Handler_handle_Params_List) Set(i int, v Routing_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x80bfaaba61a06964, s.List)
	return str
}

// Routing_Handler_handle_Params_Future is a wrapper for a Routing_Handler_handle_Params promised by a client call.
type Routing_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Routing_Handler_handle_Params_Future) Struct() (Routing_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Routing_Handler_handle_Params{s}, err
}

func (p Routing_Handler_handle_Params_Future) Pi() PushedIteration_Future {
	return PushedIteration_Future{Future: p.Future.Field(0, nil)}
}

type Routing_Handler_handle_Results struct{ capnp.Struct }

// Routing_Handler_handle_Results_TypeID is the unique identifier for the type Routing_Handler_handle_Results.
const Routing_Handler_handle_Results_TypeID = 0xf20e4198c79fd18d

func NewRouting_Handler_handle_Results(s *capnp.Segment) (Routing_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_Handler_handle_Results{st}, err
}

func NewRootRouting_Handler_handle_Results(s *capnp.Segment) (Routing_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_Handler_handle_Results{st}, err
}

func ReadRootRouting_Handler_handle_Results(msg *capnp.Message) (Routing_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Routing_Handler_handle_Results{root.Struct()}, err
}

func (s Routing_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xf20e4198c79fd18d, s.Struct)
	return str
}

// Routing_Handler_handle_Results_List is a list of Routing_Handler_handle_Results.
type Routing_Handler_handle_Results_List struct{ capnp.List }

// NewRouting_Handler_handle_Results creates a new list of Routing_Handler_handle_Results.
func NewRouting_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Routing_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Routing_Handler_handle_Results_List{l}, err
}

func (s Routing_Handler_handle_Results_List) At(i int) Routing_Handler_handle_Results {
	return Routing_Handler_handle_Results{s.List.Struct(i)}
}

func (s Routing_Handler_handle_Results_List) Set(i int, v Routing_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0xf20e4198c79fd18d, s.List)
	return str
}

// Routing_Handler_handle_Results_Future is a wrapper for a Routing_Handler_handle_Results promised by a client call.
type Routing_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Routing_Handler_handle_Results_Future) Struct() (Routing_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Routing_Handler_handle_Results{s}, err
}

type Routing_iter_Params struct{ capnp.Struct }

// Routing_iter_Params_TypeID is the unique identifier for the type Routing_iter_Params.
const Routing_iter_Params_TypeID = 0xcaef48df88fdb195

func NewRouting_iter_Params(s *capnp.Segment) (Routing_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_iter_Params{st}, err
}

func NewRootRouting_iter_Params(s *capnp.Segment) (Routing_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_iter_Params{st}, err
}

func ReadRootRouting_iter_Params(msg *capnp.Message) (Routing_iter_Params, error) {
	root, err := msg.Root()
	return Routing_iter_Params{root.Struct()}, err
}

func (s Routing_iter_Params) String() string {
	str, _ := text.Marshal(0xcaef48df88fdb195, s.Struct)
	return str
}

func (s Routing_iter_Params) Handler() Routing_Handler {
	p, _ := s.Struct.Ptr(0)
	return Routing_Handler{Client: p.Interface().Client()}
}

func (s Routing_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Routing_iter_Params) SetHandler(v Routing_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Routing_iter_Params_List is a list of Routing_iter_Params.
type Routing_iter_Params_List struct{ capnp.List }

// NewRouting_iter_Params creates a new list of Routing_iter_Params.
func NewRouting_iter_Params_List(s *capnp.Segment, sz int32) (Routing_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Routing_iter_Params_List{l}, err
}

func (s Routing_iter_Params_List) At(i int) Routing_iter_Params {
	return Routing_iter_Params{s.List.Struct(i)}
}

func (s Routing_iter_Params_List) Set(i int, v Routing_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xcaef48df88fdb195, s.List)
	return str
}

// Routing_iter_Params_Future is a wrapper for a Routing_iter_Params promised by a client call.
type Routing_iter_Params_Future struct{ *capnp.Future }

func (p Routing_iter_Params_Future) Struct() (Routing_iter_Params, error) {
	s, err := p.Future.Struct()
	return Routing_iter_Params{s}, err
}

func (p Routing_iter_Params_Future) Handler() Routing_Handler {
	return Routing_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Routing_iter_Results struct{ capnp.Struct }

// Routing_iter_Results_TypeID is the unique identifier for the type Routing_iter_Results.
const Routing_iter_Results_TypeID = 0xd309de1ddf5872c8

func NewRouting_iter_Results(s *capnp.Segment) (Routing_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_iter_Results{st}, err
}

func NewRootRouting_iter_Results(s *capnp.Segment) (Routing_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Routing_iter_Results{st}, err
}

func ReadRootRouting_iter_Results(msg *capnp.Message) (Routing_iter_Results, error) {
	root, err := msg.Root()
	return Routing_iter_Results{root.Struct()}, err
}

func (s Routing_iter_Results) String() string {
	str, _ := text.Marshal(0xd309de1ddf5872c8, s.Struct)
	return str
}

// Routing_iter_Results_List is a list of Routing_iter_Results.
type Routing_iter_Results_List struct{ capnp.List }

// NewRouting_iter_Results creates a new list of Routing_iter_Results.
func NewRouting_iter_Results_List(s *capnp.Segment, sz int32) (Routing_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Routing_iter_Results_List{l}, err
}

func (s Routing_iter_Results_List) At(i int) Routing_iter_Results {
	return Routing_iter_Results{s.List.Struct(i)}
}

func (s Routing_iter_Results_List) Set(i int, v Routing_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xd309de1ddf5872c8, s.List)
	return str
}

// Routing_iter_Results_Future is a wrapper for a Routing_iter_Results promised by a client call.
type Routing_iter_Results_Future struct{ *capnp.Future }

func (p Routing_iter_Results_Future) Struct() (Routing_iter_Results, error) {
	s, err := p.Future.Struct()
	return Routing_iter_Results{s}, err
}

type Routing_lookup_Params struct{ capnp.Struct }

// Routing_lookup_Params_TypeID is the unique identifier for the type Routing_lookup_Params.
const Routing_lookup_Params_TypeID = 0xd89c0a4fde72adb9

func NewRouting_lookup_Params(s *capnp.Segment) (Routing_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_lookup_Params{st}, err
}

func NewRootRouting_lookup_Params(s *capnp.Segment) (Routing_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Routing_lookup_Params{st}, err
}

func ReadRootRouting_lookup_Params(msg *capnp.Message) (Routing_lookup_Params, error) {
	root, err := msg.Root()
	return Routing_lookup_Params{root.Struct()}, err
}

func (s Routing_lookup_Params) String() string {
	str, _ := text.Marshal(0xd89c0a4fde72adb9, s.Struct)
	return str
}

func (s Routing_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Routing_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s Routing_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Routing_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// Routing_lookup_Params_List is a list of Routing_lookup_Params.
type Routing_lookup_Params_List struct{ capnp.List }

// NewRouting_lookup_Params creates a new list of Routing_lookup_Params.
func NewRouting_lookup_Params_List(s *capnp.Segment, sz int32) (Routing_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Routing_lookup_Params_List{l}, err
}

func (s Routing_lookup_Params_List) At(i int) Routing_lookup_Params {
	return Routing_lookup_Params{s.List.Struct(i)}
}

func (s Routing_lookup_Params_List) Set(i int, v Routing_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xd89c0a4fde72adb9, s.List)
	return str
}

// Routing_lookup_Params_Future is a wrapper for a Routing_lookup_Params promised by a client call.
type Routing_lookup_Params_Future struct{ *capnp.Future }

func (p Routing_lookup_Params_Future) Struct() (Routing_lookup_Params, error) {
	s, err := p.Future.Struct()
	return Routing_lookup_Params{s}, err
}

type Routing_lookup_Results struct{ capnp.Struct }

// Routing_lookup_Results_TypeID is the unique identifier for the type Routing_lookup_Results.
const Routing_lookup_Results_TypeID = 0xa3ee2c22bdfd3b85

func NewRouting_lookup_Results(s *capnp.Segment) (Routing_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Routing_lookup_Results{st}, err
}

func NewRootRouting_lookup_Results(s *capnp.Segment) (Routing_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Routing_lookup_Results{st}, err
}

func ReadRootRouting_lookup_Results(msg *capnp.Message) (Routing_lookup_Results, error) {
	root, err := msg.Root()
	return Routing_lookup_Results{root.Struct()}, err
}

func (s Routing_lookup_Results) String() string {
	str, _ := text.Marshal(0xa3ee2c22bdfd3b85, s.Struct)
	return str
}

func (s Routing_lookup_Results) Record() (Record, error) {
	p, err := s.Struct.Ptr(0)
	return Record{Struct: p.Struct()}, err
}

func (s Routing_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s Routing_lookup_Results) SetRecord(v Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated Record struct, preferring placement in s's segment.
func (s Routing_lookup_Results) NewRecord() (Record, error) {
	ss, err := NewRecord(s.Struct.Segment())
	if err != nil {
		return Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Routing_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s Routing_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// Routing_lookup_Results_List is a list of Routing_lookup_Results.
type Routing_lookup_Results_List struct{ capnp.List }

// NewRouting_lookup_Results creates a new list of Routing_lookup_Results.
func NewRouting_lookup_Results_List(s *capnp.Segment, sz int32) (Routing_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Routing_lookup_Results_List{l}, err
}

func (s Routing_lookup_Results_List) At(i int) Routing_lookup_Results {
	return Routing_lookup_Results{s.List.Struct(i)}
}

func (s Routing_lookup_Results_List) Set(i int, v Routing_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Routing_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xa3ee2c22bdfd3b85, s.List)
	return str
}

// Routing_lookup_Results_Future is a wrapper for a Routing_lookup_Results promised by a client call.
type Routing_lookup_Results_Future struct{ *capnp.Future }

func (p Routing_lookup_Results_Future) Struct() (Routing_lookup_Results, error) {
	s, err := p.Future.Struct()
	return Routing_lookup_Results{s}, err
}

func (p Routing_lookup_Results_Future) Record() Record_Future {
	return Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94TQH,U\x18\xfe\xbfs\xce\xb4*\x9a" +
	"{v\x84hA#\xd9 \xc5L\xdb\x1ed#v\x13" +
	"\xa5U\x8a\xf6,>\xf4\xe2\xc3\xe0\x0e:\xb8\xed\xae\xb3" +
	"\xb3\x04A\x98\x82\x94B\x0f=\x04\x06Q\x81\x10\x12\x8a" +
	"\xd4[A\x04\xbd\x14\xbei\x0fI\x90\x12\xf4\xd2KA" +
	"\x0f\xf7\xe9\xca\\\xce\xcc\x9d\x9d\xbd\xf7\xaa\xf7\xde\xa79" +
	"s\xf8\xe7\xfb\xfe\xff\xfb\xbe\x7f&vQ`\x93\xc6\xef" +
	"\x82HM\x19O\xf8\x15\xe7+\xeb\x87o~\xfa\x80\xe4" +
	"0\x88\x0c$\x88\xb2\x8am\x82`.\xb2<\xc1\x9f\xdf" +
	"\x99\xddL/\xeem\x92J\x81\xf9\x07_\x17\xff\xee:" +
	"\xb8u;\xac4\xdfg\xc7\xe66\xd3\xa7-vD\xf0" +
	"\x87\x8e\xf6\xf7\xffH6\xbf \x99\xe2q-\xc1\x1c\xe4" +
	"\xa7\xe6\x08\x7f\x8a\xc8\x9c\xe4\x1f\x9a\x1b<A\xe4o\xbd" +
	"r\xf9\xe3\xf0\xd8\xbf{\xa4\xd2hs;|^s\xb7" +
	"\xf8\xbb\x04\x7fa\xa6\xe7\x9f\xf3\xc1\xc3\x9f57\xee\xe3" +
	"\xce\x9e\xf0\x14\xcc\xbf4\x92\xf9gP\xfd\xe9\xb7\x97\x1f" +
	"]\x14\xff;&\x99n\xc3\xbd*^\xd2p\xb3B\x8f" +
	"2t\xb6\xfd^\xf3\xbbgOI\xa6y\xdc*!k" +
	"\x8b\x14\xcc\x96\xd0Pk\xe2u\xf33}\xf2\x7fu\xdf" +
	"\xbe\x18<\xef\xfe-\x84\xd3W\xd9\x0d\x91\x03\x09\xff\xfb" +
	"C\xf7\xfc\xad\x9e\xcf\xcf:\x89\x1c1\xad\x89\xd6\x02\xa2" +
	"\x8fO\xbe\xfce\xf7\xb5'\xff\x0fE\x0d>\xfdD\xec" +
	"\x80&|\xab\xe1\xbc\xe8\xd6[\x9e\xe1\xd4\x96\xc7\x97\xac" +
	"F\xad\x91+\xd7[\x9e~+Z\xb5J\xd5v\xc7W" +
	"\x82g\xa6d\xb9\xd6;MR\x82\x0b\"\x01\"\xd9\x97" +
	"&R]\x1cj\x80\x817\x1c$c}\x08H\x12\xda" +
	"\xe8\xac\x03\xdd^\xaa\xbb\x15\xa2\x12\xa0z\xdbP\xb3\xa3" +
	"D\xaa\xc0\xa1\xde`\x00\x06\xb4\xfcrn\x98H\xcdp" +
	"\xa8\x12\x83d\x18\x00#\x92o\xea\xcb\"\x87Z`\xe8" +
	"o\xd8\xb6\x8b^b\xe8%$<\xaf\x0a\x83\x18\x0cB" +
	"\xa2i\xaf\xa1\x9b\x18\xba\xaf\xe9!\x98\x10\xcbJ\xa0\xd3" +
	"\x04L\xaf\xdf\x9dYuq\x83\xa8m \"\xe9\xe5\xe4" +
	"(1\xf9\\\x02hk\x8e(5\xf2\xe9\x1c1\xd9\x97" +
	"\xe8w<\xdb- _\xad\xd7W[\x8d\x02J\x88{" +
	"\x10\x0f\xaa\x1c\x96e\xcav\xb3U\xf5\x9a\x81\xa0\x91(" +
	"#9\"\x95\xe1P\x13\xb1(/h\xcd\x9f\xe7P/" +
	"3\xe4\xdd@K$\xe3\x9d\x08u\xe7\xf5U\x80\x18\xd0" +
	"1>\x8f\xa9K\xad\xe6\x8a]\x99\xf3l\xd7\xf2\x9c:" +
	"j\xda\x8a\x87\xb0\x96\x89\xd4\x18\x87\x9a\xba\x81\xd5\xaf\xd8" +
	"\x15\xabRuj\x04;r\xe2*\xfahr\xadS\xa6" +
	"\xf4L\x10\xab\xceTM\xc7\xa9Z\x0f\xb3\xe7B\xc66" +
	"\x11 o\x06\x0eM\x84\xab\xe7\x12\x81\x91\xd1O\x05\xd1" +
	"\"H\xa9\xcd2\x12\xf9\x90\xe0^\x97\xae\xeb\xb5\x9c\x0f" +
	"Mz\x04;\xafX\x96\\<V^\x07wn&\x8a" +
	"\xeec,a;&w\x02\x00\x00\xff\xff1Dm\xbe"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x80bfaaba61a06964,
		0x82a35d1a82458a4a,
		0x9e7310daa8a8af1e,
		0xa3ee2c22bdfd3b85,
		0xc2ad1ddee90a4454,
		0xcaef48df88fdb195,
		0xd221b2737a89d81e,
		0xd309de1ddf5872c8,
		0xd89c0a4fde72adb9,
		0xf20e4198c79fd18d)
}
