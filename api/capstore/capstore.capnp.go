// Code generated by capnpc-go. DO NOT EDIT.

package capstore

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type CapStore capnp.Client

// CapStore_TypeID is the unique identifier for the type CapStore.
const CapStore_TypeID = 0xe2a50b868aef45c6

func (c CapStore) Set(ctx context.Context, params func(CapStore_set_Params) error) (CapStore_set_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe2a50b868aef45c6,
			MethodID:      0,
			InterfaceName: "capstore.capnp:CapStore",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapStore_set_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapStore_set_Results_Future{Future: ans.Future()}, release

}

func (c CapStore) Get(ctx context.Context, params func(CapStore_get_Params) error) (CapStore_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe2a50b868aef45c6,
			MethodID:      1,
			InterfaceName: "capstore.capnp:CapStore",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapStore_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CapStore_get_Results_Future{Future: ans.Future()}, release

}

func (c CapStore) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CapStore) String() string {
	return "CapStore(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CapStore) AddRef() CapStore {
	return CapStore(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CapStore) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CapStore) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CapStore) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CapStore) DecodeFromPtr(p capnp.Ptr) CapStore {
	return CapStore(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CapStore) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CapStore) IsSame(other CapStore) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CapStore) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CapStore) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A CapStore_Server is a CapStore with a local implementation.
type CapStore_Server interface {
	Set(context.Context, CapStore_set) error

	Get(context.Context, CapStore_get) error
}

// CapStore_NewServer creates a new Server from an implementation of CapStore_Server.
func CapStore_NewServer(s CapStore_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapStore_Methods(nil, s), s, c)
}

// CapStore_ServerToClient creates a new Client from an implementation of CapStore_Server.
// The caller is responsible for calling Release on the returned Client.
func CapStore_ServerToClient(s CapStore_Server) CapStore {
	return CapStore(capnp.NewClient(CapStore_NewServer(s)))
}

// CapStore_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapStore_Methods(methods []server.Method, s CapStore_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2a50b868aef45c6,
			MethodID:      0,
			InterfaceName: "capstore.capnp:CapStore",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, CapStore_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe2a50b868aef45c6,
			MethodID:      1,
			InterfaceName: "capstore.capnp:CapStore",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, CapStore_get{call})
		},
	})

	return methods
}

// CapStore_set holds the state for a server call to CapStore.set.
// See server.Call for documentation.
type CapStore_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapStore_set) Args() CapStore_set_Params {
	return CapStore_set_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapStore_set) AllocResults() (CapStore_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapStore_set_Results(r), err
}

// CapStore_get holds the state for a server call to CapStore.get.
// See server.Call for documentation.
type CapStore_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapStore_get) Args() CapStore_get_Params {
	return CapStore_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CapStore_get) AllocResults() (CapStore_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapStore_get_Results(r), err
}

// CapStore_List is a list of CapStore.
type CapStore_List = capnp.CapList[CapStore]

// NewCapStore creates a new list of CapStore.
func NewCapStore_List(s *capnp.Segment, sz int32) (CapStore_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CapStore](l), err
}

type CapStore_set_Params capnp.Struct

// CapStore_set_Params_TypeID is the unique identifier for the type CapStore_set_Params.
const CapStore_set_Params_TypeID = 0x936bc1015cfb6c3c

func NewCapStore_set_Params(s *capnp.Segment) (CapStore_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapStore_set_Params(st), err
}

func NewRootCapStore_set_Params(s *capnp.Segment) (CapStore_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CapStore_set_Params(st), err
}

func ReadRootCapStore_set_Params(msg *capnp.Message) (CapStore_set_Params, error) {
	root, err := msg.Root()
	return CapStore_set_Params(root.Struct()), err
}

func (s CapStore_set_Params) String() string {
	str, _ := text.Marshal(0x936bc1015cfb6c3c, capnp.Struct(s))
	return str
}

func (s CapStore_set_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapStore_set_Params) DecodeFromPtr(p capnp.Ptr) CapStore_set_Params {
	return CapStore_set_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapStore_set_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapStore_set_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapStore_set_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapStore_set_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapStore_set_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapStore_set_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapStore_set_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapStore_set_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapStore_set_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s CapStore_set_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CapStore_set_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// CapStore_set_Params_List is a list of CapStore_set_Params.
type CapStore_set_Params_List = capnp.StructList[CapStore_set_Params]

// NewCapStore_set_Params creates a new list of CapStore_set_Params.
func NewCapStore_set_Params_List(s *capnp.Segment, sz int32) (CapStore_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CapStore_set_Params](l), err
}

// CapStore_set_Params_Future is a wrapper for a CapStore_set_Params promised by a client call.
type CapStore_set_Params_Future struct{ *capnp.Future }

func (f CapStore_set_Params_Future) Struct() (CapStore_set_Params, error) {
	p, err := f.Future.Ptr()
	return CapStore_set_Params(p.Struct()), err
}
func (p CapStore_set_Params_Future) Cap() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type CapStore_set_Results capnp.Struct

// CapStore_set_Results_TypeID is the unique identifier for the type CapStore_set_Results.
const CapStore_set_Results_TypeID = 0xbbb39de5aadd52fa

func NewCapStore_set_Results(s *capnp.Segment) (CapStore_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapStore_set_Results(st), err
}

func NewRootCapStore_set_Results(s *capnp.Segment) (CapStore_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapStore_set_Results(st), err
}

func ReadRootCapStore_set_Results(msg *capnp.Message) (CapStore_set_Results, error) {
	root, err := msg.Root()
	return CapStore_set_Results(root.Struct()), err
}

func (s CapStore_set_Results) String() string {
	str, _ := text.Marshal(0xbbb39de5aadd52fa, capnp.Struct(s))
	return str
}

func (s CapStore_set_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapStore_set_Results) DecodeFromPtr(p capnp.Ptr) CapStore_set_Results {
	return CapStore_set_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapStore_set_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapStore_set_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapStore_set_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapStore_set_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// CapStore_set_Results_List is a list of CapStore_set_Results.
type CapStore_set_Results_List = capnp.StructList[CapStore_set_Results]

// NewCapStore_set_Results creates a new list of CapStore_set_Results.
func NewCapStore_set_Results_List(s *capnp.Segment, sz int32) (CapStore_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[CapStore_set_Results](l), err
}

// CapStore_set_Results_Future is a wrapper for a CapStore_set_Results promised by a client call.
type CapStore_set_Results_Future struct{ *capnp.Future }

func (f CapStore_set_Results_Future) Struct() (CapStore_set_Results, error) {
	p, err := f.Future.Ptr()
	return CapStore_set_Results(p.Struct()), err
}

type CapStore_get_Params capnp.Struct

// CapStore_get_Params_TypeID is the unique identifier for the type CapStore_get_Params.
const CapStore_get_Params_TypeID = 0x84593aa9eaf7e35f

func NewCapStore_get_Params(s *capnp.Segment) (CapStore_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapStore_get_Params(st), err
}

func NewRootCapStore_get_Params(s *capnp.Segment) (CapStore_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapStore_get_Params(st), err
}

func ReadRootCapStore_get_Params(msg *capnp.Message) (CapStore_get_Params, error) {
	root, err := msg.Root()
	return CapStore_get_Params(root.Struct()), err
}

func (s CapStore_get_Params) String() string {
	str, _ := text.Marshal(0x84593aa9eaf7e35f, capnp.Struct(s))
	return str
}

func (s CapStore_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapStore_get_Params) DecodeFromPtr(p capnp.Ptr) CapStore_get_Params {
	return CapStore_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapStore_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapStore_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapStore_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapStore_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapStore_get_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapStore_get_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapStore_get_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapStore_get_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CapStore_get_Params_List is a list of CapStore_get_Params.
type CapStore_get_Params_List = capnp.StructList[CapStore_get_Params]

// NewCapStore_get_Params creates a new list of CapStore_get_Params.
func NewCapStore_get_Params_List(s *capnp.Segment, sz int32) (CapStore_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapStore_get_Params](l), err
}

// CapStore_get_Params_Future is a wrapper for a CapStore_get_Params promised by a client call.
type CapStore_get_Params_Future struct{ *capnp.Future }

func (f CapStore_get_Params_Future) Struct() (CapStore_get_Params, error) {
	p, err := f.Future.Ptr()
	return CapStore_get_Params(p.Struct()), err
}

type CapStore_get_Results capnp.Struct

// CapStore_get_Results_TypeID is the unique identifier for the type CapStore_get_Results.
const CapStore_get_Results_TypeID = 0xd18d94ef56d454f3

func NewCapStore_get_Results(s *capnp.Segment) (CapStore_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapStore_get_Results(st), err
}

func NewRootCapStore_get_Results(s *capnp.Segment) (CapStore_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapStore_get_Results(st), err
}

func ReadRootCapStore_get_Results(msg *capnp.Message) (CapStore_get_Results, error) {
	root, err := msg.Root()
	return CapStore_get_Results(root.Struct()), err
}

func (s CapStore_get_Results) String() string {
	str, _ := text.Marshal(0xd18d94ef56d454f3, capnp.Struct(s))
	return str
}

func (s CapStore_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapStore_get_Results) DecodeFromPtr(p capnp.Ptr) CapStore_get_Results {
	return CapStore_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapStore_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapStore_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapStore_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapStore_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapStore_get_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s CapStore_get_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapStore_get_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// CapStore_get_Results_List is a list of CapStore_get_Results.
type CapStore_get_Results_List = capnp.StructList[CapStore_get_Results]

// NewCapStore_get_Results creates a new list of CapStore_get_Results.
func NewCapStore_get_Results_List(s *capnp.Segment, sz int32) (CapStore_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapStore_get_Results](l), err
}

// CapStore_get_Results_Future is a wrapper for a CapStore_get_Results promised by a client call.
type CapStore_get_Results_Future struct{ *capnp.Future }

func (f CapStore_get_Results_Future) Struct() (CapStore_get_Results, error) {
	p, err := f.Future.Ptr()
	return CapStore_get_Results(p.Struct()), err
}
func (p CapStore_get_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

const schema_bbe22aa2756d2943 = "x\xda\x84\x921H#A\x18\x85\xff7\xb3\xb9\x09\\" +
	"\xc2\xdddspIs\xb0\xe4\xe0r\xdc\x85\x0bwU" +
	"80\x10\xec3Q\x04A\x90%.ALt\xc9n" +
	"\xb0\xb2\x13\x05\xc1J\xdb4B\x0am-Sia/" +
	"\x88\x9dM\xc4B\x9b \x16\x82\x16+cL\x8cB\xb4" +
	"\x19\x98\xf9\xdf|\x8f\xc7\xfb?\x9f\xe6\x8dl\xf4\x1b'" +
	"\xa6R\xa1\x0f\xc1\xec\xf9\xed\xd5nnz\x95\xe4W\x10" +
	"\x85 \x88\xfe6\x90\x04\xc1\\\xc1\x18!\xf8_\xbd\x9f" +
	"\xc1\xc1\xc2\xd6\x93\x80iA\xb3'ha\x99\x10\xdc\x95" +
	"\xce\xf6.\x9a\xfb\xed\x9e\xc0\xd0s0\x0bd\x047\x93" +
	"'S\xdd\xed\xcd\xe3a\xf6%,\xfd\xf5\xfa\x91}4" +
	"\xde\xddX\xfb\xd8\xea\x90\xfc\xc4\x83B\xba\xd6\xd8\xf9\xd9" +
	"i\x13\xc1\x94\xec\xd0Lh+\xf3\x0b[7\x1d&\xe8" +
	"WP\xb6]\xcf_\xaa;<S\xb6\xddE7W\xb0" +
	"\xdd\x09}\xcfT\x1c?U\xb4\xeb6\xafy\xca\xe0\x06" +
	"\x91\x01\"\x19M\x12\xa90\x87\x8a3\xf0\xf99D\x88" +
	"!B\x18\x8d\xf1\x860\xe1\x01&\xad1)\x0e\xf5\x87" +
	"A\x02q\xe8\xc7\xdf\x16\x91\xfa\xc1\xa1\xfe\xbd`\x8b\xb2" +
	"\xed\"fp\x02b\xef9\x95\x1c\xaf!\xaa\xbe\xf7v" +
	"\xac\xbej8\x97\xf5\x9ck\x84!{\x85\xa2\"\xa0\xc2" +
	"<D4h\x13\xfd\xd6d\xd6\"&\xbf\x0b`\xb0\x0a" +
	"\xe8\xf7&\x13z\x16\x15\xc2s\xfc<DE\x9fE\xe0" +
	"!\x00\x00\xff\xffZ\xb1\x96\xdd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bbe22aa2756d2943,
		Nodes: []uint64{
			0x84593aa9eaf7e35f,
			0x936bc1015cfb6c3c,
			0xbbb39de5aadd52fa,
			0xd18d94ef56d454f3,
			0xe2a50b868aef45c6,
		},
		Compressed: true,
	})
}
