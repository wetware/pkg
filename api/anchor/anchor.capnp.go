// Code generated by capnpc-go. DO NOT EDIT.

package anchor

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor capnp.Client

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xe41237e4098ed922

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) Cell(ctx context.Context, params func(Anchor_cell_Params) error) (Anchor_cell_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      2,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "cell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_cell_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_cell_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor) String() string {
	return "Anchor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor) AddRef() Anchor {
	return Anchor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor) DecodeFromPtr(p capnp.Ptr) Anchor {
	return Anchor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor) IsSame(other Anchor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error

	Cell(context.Context, Anchor_cell) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server) Anchor {
	return Anchor(capnp.NewClient(Anchor_NewServer(s)))
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      2,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "cell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cell(ctx, Anchor_cell{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(r), err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(r), err
}

// Anchor_cell holds the state for a server call to Anchor.cell.
// See server.Call for documentation.
type Anchor_cell struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_cell) Args() Anchor_cell_Params {
	return Anchor_cell_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_cell) AllocResults() (Anchor_cell_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Anchor_cell_Results(r), err
}

// Anchor_List is a list of Anchor.
type Anchor_List = capnp.CapList[Anchor]

// NewAnchor creates a new list of Anchor.
func NewAnchor_List(s *capnp.Segment, sz int32) (Anchor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor](l), err
}

type Anchor_Child capnp.Struct

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0xc718781cb2553199

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child(st), err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child(st), err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child(root.Struct()), err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0xc718781cb2553199, capnp.Struct(s))
	return str
}

func (s Anchor_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Child) DecodeFromPtr(p capnp.Ptr) Anchor_Child {
	return Anchor_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Child) Anchor() Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor(p.Interface().Client())
}

func (s Anchor_Child) HasAnchor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Anchor_Child) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List = capnp.StructList[Anchor_Child]

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Child](l), err
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (f Anchor_Child_Future) Struct() (Anchor_Child, error) {
	p, err := f.Future.Ptr()
	return Anchor_Child(p.Struct()), err
}
func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor(p.Future.Field(0, nil).Client())
}

type Anchor_Loader capnp.Client

// Anchor_Loader_TypeID is the unique identifier for the type Anchor_Loader.
const Anchor_Loader_TypeID = 0x8a336ac7e2d028c1

func (c Anchor_Loader) Load(ctx context.Context, params func(Anchor_Loader_load_Params) error) (Anchor_Loader_load_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a336ac7e2d028c1,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Loader_load_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Loader_load_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Loader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor_Loader) String() string {
	return "Anchor_Loader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor_Loader) AddRef() Anchor_Loader {
	return Anchor_Loader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor_Loader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor_Loader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor_Loader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor_Loader) DecodeFromPtr(p capnp.Ptr) Anchor_Loader {
	return Anchor_Loader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor_Loader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor_Loader) IsSame(other Anchor_Loader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor_Loader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor_Loader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Loader_Server is a Anchor_Loader with a local implementation.
type Anchor_Loader_Server interface {
	Load(context.Context, Anchor_Loader_load) error
}

// Anchor_Loader_NewServer creates a new Server from an implementation of Anchor_Loader_Server.
func Anchor_Loader_NewServer(s Anchor_Loader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Loader_Methods(nil, s), s, c)
}

// Anchor_Loader_ServerToClient creates a new Client from an implementation of Anchor_Loader_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Loader_ServerToClient(s Anchor_Loader_Server) Anchor_Loader {
	return Anchor_Loader(capnp.NewClient(Anchor_Loader_NewServer(s)))
}

// Anchor_Loader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Loader_Methods(methods []server.Method, s Anchor_Loader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a336ac7e2d028c1,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Anchor_Loader_load{call})
		},
	})

	return methods
}

// Anchor_Loader_load holds the state for a server call to Anchor_Loader.load.
// See server.Call for documentation.
type Anchor_Loader_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Loader_load) Args() Anchor_Loader_load_Params {
	return Anchor_Loader_load_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Loader_load) AllocResults() (Anchor_Loader_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(r), err
}

// Anchor_Loader_List is a list of Anchor_Loader.
type Anchor_Loader_List = capnp.CapList[Anchor_Loader]

// NewAnchor_Loader creates a new list of Anchor_Loader.
func NewAnchor_Loader_List(s *capnp.Segment, sz int32) (Anchor_Loader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor_Loader](l), err
}

type Anchor_Loader_load_Params capnp.Struct

// Anchor_Loader_load_Params_TypeID is the unique identifier for the type Anchor_Loader_load_Params.
const Anchor_Loader_load_Params_TypeID = 0xf8402a904fba165b

func NewAnchor_Loader_load_Params(s *capnp.Segment) (Anchor_Loader_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Loader_load_Params(st), err
}

func NewRootAnchor_Loader_load_Params(s *capnp.Segment) (Anchor_Loader_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Loader_load_Params(st), err
}

func ReadRootAnchor_Loader_load_Params(msg *capnp.Message) (Anchor_Loader_load_Params, error) {
	root, err := msg.Root()
	return Anchor_Loader_load_Params(root.Struct()), err
}

func (s Anchor_Loader_load_Params) String() string {
	str, _ := text.Marshal(0xf8402a904fba165b, capnp.Struct(s))
	return str
}

func (s Anchor_Loader_load_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Loader_load_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Loader_load_Params {
	return Anchor_Loader_load_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Loader_load_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Loader_load_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Loader_load_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Loader_load_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_Loader_load_Params_List is a list of Anchor_Loader_load_Params.
type Anchor_Loader_load_Params_List = capnp.StructList[Anchor_Loader_load_Params]

// NewAnchor_Loader_load_Params creates a new list of Anchor_Loader_load_Params.
func NewAnchor_Loader_load_Params_List(s *capnp.Segment, sz int32) (Anchor_Loader_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_Loader_load_Params](l), err
}

// Anchor_Loader_load_Params_Future is a wrapper for a Anchor_Loader_load_Params promised by a client call.
type Anchor_Loader_load_Params_Future struct{ *capnp.Future }

func (f Anchor_Loader_load_Params_Future) Struct() (Anchor_Loader_load_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Loader_load_Params(p.Struct()), err
}

type Anchor_Loader_load_Results capnp.Struct

// Anchor_Loader_load_Results_TypeID is the unique identifier for the type Anchor_Loader_load_Results.
const Anchor_Loader_load_Results_TypeID = 0xb7ddaffff14d4ea5

func NewAnchor_Loader_load_Results(s *capnp.Segment) (Anchor_Loader_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(st), err
}

func NewRootAnchor_Loader_load_Results(s *capnp.Segment) (Anchor_Loader_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(st), err
}

func ReadRootAnchor_Loader_load_Results(msg *capnp.Message) (Anchor_Loader_load_Results, error) {
	root, err := msg.Root()
	return Anchor_Loader_load_Results(root.Struct()), err
}

func (s Anchor_Loader_load_Results) String() string {
	str, _ := text.Marshal(0xb7ddaffff14d4ea5, capnp.Struct(s))
	return str
}

func (s Anchor_Loader_load_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Loader_load_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Loader_load_Results {
	return Anchor_Loader_load_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Loader_load_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Loader_load_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Loader_load_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Loader_load_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Loader_load_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Loader_load_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Loader_load_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Anchor_Loader_load_Results_List is a list of Anchor_Loader_load_Results.
type Anchor_Loader_load_Results_List = capnp.StructList[Anchor_Loader_load_Results]

// NewAnchor_Loader_load_Results creates a new list of Anchor_Loader_load_Results.
func NewAnchor_Loader_load_Results_List(s *capnp.Segment, sz int32) (Anchor_Loader_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Loader_load_Results](l), err
}

// Anchor_Loader_load_Results_Future is a wrapper for a Anchor_Loader_load_Results promised by a client call.
type Anchor_Loader_load_Results_Future struct{ *capnp.Future }

func (f Anchor_Loader_load_Results_Future) Struct() (Anchor_Loader_load_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Loader_load_Results(p.Struct()), err
}
func (p Anchor_Loader_load_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Storer capnp.Client

// Anchor_Storer_TypeID is the unique identifier for the type Anchor_Storer.
const Anchor_Storer_TypeID = 0xab8d091f98599d27

func (c Anchor_Storer) Store(ctx context.Context, params func(Anchor_Storer_store_Params) error) (Anchor_Storer_store_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab8d091f98599d27,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Storer_store_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Storer_store_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Storer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor_Storer) String() string {
	return "Anchor_Storer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor_Storer) AddRef() Anchor_Storer {
	return Anchor_Storer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor_Storer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor_Storer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor_Storer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor_Storer) DecodeFromPtr(p capnp.Ptr) Anchor_Storer {
	return Anchor_Storer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor_Storer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor_Storer) IsSame(other Anchor_Storer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor_Storer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor_Storer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Storer_Server is a Anchor_Storer with a local implementation.
type Anchor_Storer_Server interface {
	Store(context.Context, Anchor_Storer_store) error
}

// Anchor_Storer_NewServer creates a new Server from an implementation of Anchor_Storer_Server.
func Anchor_Storer_NewServer(s Anchor_Storer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Storer_Methods(nil, s), s, c)
}

// Anchor_Storer_ServerToClient creates a new Client from an implementation of Anchor_Storer_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Storer_ServerToClient(s Anchor_Storer_Server) Anchor_Storer {
	return Anchor_Storer(capnp.NewClient(Anchor_Storer_NewServer(s)))
}

// Anchor_Storer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Storer_Methods(methods []server.Method, s Anchor_Storer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab8d091f98599d27,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Anchor_Storer_store{call})
		},
	})

	return methods
}

// Anchor_Storer_store holds the state for a server call to Anchor_Storer.store.
// See server.Call for documentation.
type Anchor_Storer_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Storer_store) Args() Anchor_Storer_store_Params {
	return Anchor_Storer_store_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Storer_store) AllocResults() (Anchor_Storer_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(r), err
}

// Anchor_Storer_List is a list of Anchor_Storer.
type Anchor_Storer_List = capnp.CapList[Anchor_Storer]

// NewAnchor_Storer creates a new list of Anchor_Storer.
func NewAnchor_Storer_List(s *capnp.Segment, sz int32) (Anchor_Storer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor_Storer](l), err
}

type Anchor_Storer_store_Params capnp.Struct

// Anchor_Storer_store_Params_TypeID is the unique identifier for the type Anchor_Storer_store_Params.
const Anchor_Storer_store_Params_TypeID = 0xdad77fd0c414d459

func NewAnchor_Storer_store_Params(s *capnp.Segment) (Anchor_Storer_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_Storer_store_Params(st), err
}

func NewRootAnchor_Storer_store_Params(s *capnp.Segment) (Anchor_Storer_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_Storer_store_Params(st), err
}

func ReadRootAnchor_Storer_store_Params(msg *capnp.Message) (Anchor_Storer_store_Params, error) {
	root, err := msg.Root()
	return Anchor_Storer_store_Params(root.Struct()), err
}

func (s Anchor_Storer_store_Params) String() string {
	str, _ := text.Marshal(0xdad77fd0c414d459, capnp.Struct(s))
	return str
}

func (s Anchor_Storer_store_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Storer_store_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Storer_store_Params {
	return Anchor_Storer_store_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Storer_store_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Storer_store_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Storer_store_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Storer_store_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Storer_store_Params) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Storer_store_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Storer_store_Params) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Anchor_Storer_store_Params) Overwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Anchor_Storer_store_Params) SetOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Anchor_Storer_store_Params_List is a list of Anchor_Storer_store_Params.
type Anchor_Storer_store_Params_List = capnp.StructList[Anchor_Storer_store_Params]

// NewAnchor_Storer_store_Params creates a new list of Anchor_Storer_store_Params.
func NewAnchor_Storer_store_Params_List(s *capnp.Segment, sz int32) (Anchor_Storer_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Storer_store_Params](l), err
}

// Anchor_Storer_store_Params_Future is a wrapper for a Anchor_Storer_store_Params promised by a client call.
type Anchor_Storer_store_Params_Future struct{ *capnp.Future }

func (f Anchor_Storer_store_Params_Future) Struct() (Anchor_Storer_store_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Storer_store_Params(p.Struct()), err
}
func (p Anchor_Storer_store_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Storer_store_Results capnp.Struct

// Anchor_Storer_store_Results_TypeID is the unique identifier for the type Anchor_Storer_store_Results.
const Anchor_Storer_store_Results_TypeID = 0xe6d4ed829b3ab757

func NewAnchor_Storer_store_Results(s *capnp.Segment) (Anchor_Storer_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(st), err
}

func NewRootAnchor_Storer_store_Results(s *capnp.Segment) (Anchor_Storer_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(st), err
}

func ReadRootAnchor_Storer_store_Results(msg *capnp.Message) (Anchor_Storer_store_Results, error) {
	root, err := msg.Root()
	return Anchor_Storer_store_Results(root.Struct()), err
}

func (s Anchor_Storer_store_Results) String() string {
	str, _ := text.Marshal(0xe6d4ed829b3ab757, capnp.Struct(s))
	return str
}

func (s Anchor_Storer_store_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Storer_store_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Storer_store_Results {
	return Anchor_Storer_store_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Storer_store_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Storer_store_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Storer_store_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Storer_store_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Storer_store_Results) Succeeded() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Anchor_Storer_store_Results) SetSucceeded(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Anchor_Storer_store_Results_List is a list of Anchor_Storer_store_Results.
type Anchor_Storer_store_Results_List = capnp.StructList[Anchor_Storer_store_Results]

// NewAnchor_Storer_store_Results creates a new list of Anchor_Storer_store_Results.
func NewAnchor_Storer_store_Results_List(s *capnp.Segment, sz int32) (Anchor_Storer_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_Storer_store_Results](l), err
}

// Anchor_Storer_store_Results_Future is a wrapper for a Anchor_Storer_store_Results promised by a client call.
type Anchor_Storer_store_Results_Future struct{ *capnp.Future }

func (f Anchor_Storer_store_Results_Future) Struct() (Anchor_Storer_store_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Storer_store_Results(p.Struct()), err
}

type Anchor_Swapper capnp.Client

// Anchor_Swapper_TypeID is the unique identifier for the type Anchor_Swapper.
const Anchor_Swapper_TypeID = 0xffdf580c3e38b645

func (c Anchor_Swapper) Swap(ctx context.Context, params func(Anchor_Swapper_swap_Params) error) (Anchor_Swapper_swap_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xffdf580c3e38b645,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Swapper",
			MethodName:    "swap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Swapper_swap_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Swapper_swap_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Swapper) CompareAndSwap(ctx context.Context, params func(Anchor_Swapper_compareAndSwap_Params) error) (Anchor_Swapper_compareAndSwap_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xffdf580c3e38b645,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor.Swapper",
			MethodName:    "compareAndSwap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Swapper_compareAndSwap_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Swapper_compareAndSwap_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Swapper) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor_Swapper) String() string {
	return "Anchor_Swapper(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor_Swapper) AddRef() Anchor_Swapper {
	return Anchor_Swapper(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor_Swapper) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor_Swapper) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor_Swapper) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor_Swapper) DecodeFromPtr(p capnp.Ptr) Anchor_Swapper {
	return Anchor_Swapper(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor_Swapper) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor_Swapper) IsSame(other Anchor_Swapper) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor_Swapper) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor_Swapper) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Swapper_Server is a Anchor_Swapper with a local implementation.
type Anchor_Swapper_Server interface {
	Swap(context.Context, Anchor_Swapper_swap) error

	CompareAndSwap(context.Context, Anchor_Swapper_compareAndSwap) error
}

// Anchor_Swapper_NewServer creates a new Server from an implementation of Anchor_Swapper_Server.
func Anchor_Swapper_NewServer(s Anchor_Swapper_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Swapper_Methods(nil, s), s, c)
}

// Anchor_Swapper_ServerToClient creates a new Client from an implementation of Anchor_Swapper_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Swapper_ServerToClient(s Anchor_Swapper_Server) Anchor_Swapper {
	return Anchor_Swapper(capnp.NewClient(Anchor_Swapper_NewServer(s)))
}

// Anchor_Swapper_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Swapper_Methods(methods []server.Method, s Anchor_Swapper_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xffdf580c3e38b645,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Swapper",
			MethodName:    "swap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Swap(ctx, Anchor_Swapper_swap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xffdf580c3e38b645,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor.Swapper",
			MethodName:    "compareAndSwap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CompareAndSwap(ctx, Anchor_Swapper_compareAndSwap{call})
		},
	})

	return methods
}

// Anchor_Swapper_swap holds the state for a server call to Anchor_Swapper.swap.
// See server.Call for documentation.
type Anchor_Swapper_swap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Swapper_swap) Args() Anchor_Swapper_swap_Params {
	return Anchor_Swapper_swap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Swapper_swap) AllocResults() (Anchor_Swapper_swap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Swapper_swap_Results(r), err
}

// Anchor_Swapper_compareAndSwap holds the state for a server call to Anchor_Swapper.compareAndSwap.
// See server.Call for documentation.
type Anchor_Swapper_compareAndSwap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Swapper_compareAndSwap) Args() Anchor_Swapper_compareAndSwap_Params {
	return Anchor_Swapper_compareAndSwap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Swapper_compareAndSwap) AllocResults() (Anchor_Swapper_compareAndSwap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Swapper_compareAndSwap_Results(r), err
}

// Anchor_Swapper_List is a list of Anchor_Swapper.
type Anchor_Swapper_List = capnp.CapList[Anchor_Swapper]

// NewAnchor_Swapper creates a new list of Anchor_Swapper.
func NewAnchor_Swapper_List(s *capnp.Segment, sz int32) (Anchor_Swapper_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor_Swapper](l), err
}

type Anchor_Swapper_swap_Params capnp.Struct

// Anchor_Swapper_swap_Params_TypeID is the unique identifier for the type Anchor_Swapper_swap_Params.
const Anchor_Swapper_swap_Params_TypeID = 0xdf87ca9488282b8d

func NewAnchor_Swapper_swap_Params(s *capnp.Segment) (Anchor_Swapper_swap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Swapper_swap_Params(st), err
}

func NewRootAnchor_Swapper_swap_Params(s *capnp.Segment) (Anchor_Swapper_swap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Swapper_swap_Params(st), err
}

func ReadRootAnchor_Swapper_swap_Params(msg *capnp.Message) (Anchor_Swapper_swap_Params, error) {
	root, err := msg.Root()
	return Anchor_Swapper_swap_Params(root.Struct()), err
}

func (s Anchor_Swapper_swap_Params) String() string {
	str, _ := text.Marshal(0xdf87ca9488282b8d, capnp.Struct(s))
	return str
}

func (s Anchor_Swapper_swap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Swapper_swap_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Swapper_swap_Params {
	return Anchor_Swapper_swap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Swapper_swap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Swapper_swap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Swapper_swap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Swapper_swap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Swapper_swap_Params) New() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Swapper_swap_Params) HasNew() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Swapper_swap_Params) SetNew(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Anchor_Swapper_swap_Params_List is a list of Anchor_Swapper_swap_Params.
type Anchor_Swapper_swap_Params_List = capnp.StructList[Anchor_Swapper_swap_Params]

// NewAnchor_Swapper_swap_Params creates a new list of Anchor_Swapper_swap_Params.
func NewAnchor_Swapper_swap_Params_List(s *capnp.Segment, sz int32) (Anchor_Swapper_swap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Swapper_swap_Params](l), err
}

// Anchor_Swapper_swap_Params_Future is a wrapper for a Anchor_Swapper_swap_Params promised by a client call.
type Anchor_Swapper_swap_Params_Future struct{ *capnp.Future }

func (f Anchor_Swapper_swap_Params_Future) Struct() (Anchor_Swapper_swap_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Swapper_swap_Params(p.Struct()), err
}
func (p Anchor_Swapper_swap_Params_Future) New() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Swapper_swap_Results capnp.Struct

// Anchor_Swapper_swap_Results_TypeID is the unique identifier for the type Anchor_Swapper_swap_Results.
const Anchor_Swapper_swap_Results_TypeID = 0xc26b2f2e7644e386

func NewAnchor_Swapper_swap_Results(s *capnp.Segment) (Anchor_Swapper_swap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Swapper_swap_Results(st), err
}

func NewRootAnchor_Swapper_swap_Results(s *capnp.Segment) (Anchor_Swapper_swap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Swapper_swap_Results(st), err
}

func ReadRootAnchor_Swapper_swap_Results(msg *capnp.Message) (Anchor_Swapper_swap_Results, error) {
	root, err := msg.Root()
	return Anchor_Swapper_swap_Results(root.Struct()), err
}

func (s Anchor_Swapper_swap_Results) String() string {
	str, _ := text.Marshal(0xc26b2f2e7644e386, capnp.Struct(s))
	return str
}

func (s Anchor_Swapper_swap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Swapper_swap_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Swapper_swap_Results {
	return Anchor_Swapper_swap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Swapper_swap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Swapper_swap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Swapper_swap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Swapper_swap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Swapper_swap_Results) Old() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Swapper_swap_Results) HasOld() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Swapper_swap_Results) SetOld(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Anchor_Swapper_swap_Results_List is a list of Anchor_Swapper_swap_Results.
type Anchor_Swapper_swap_Results_List = capnp.StructList[Anchor_Swapper_swap_Results]

// NewAnchor_Swapper_swap_Results creates a new list of Anchor_Swapper_swap_Results.
func NewAnchor_Swapper_swap_Results_List(s *capnp.Segment, sz int32) (Anchor_Swapper_swap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Swapper_swap_Results](l), err
}

// Anchor_Swapper_swap_Results_Future is a wrapper for a Anchor_Swapper_swap_Results promised by a client call.
type Anchor_Swapper_swap_Results_Future struct{ *capnp.Future }

func (f Anchor_Swapper_swap_Results_Future) Struct() (Anchor_Swapper_swap_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Swapper_swap_Results(p.Struct()), err
}
func (p Anchor_Swapper_swap_Results_Future) Old() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Swapper_compareAndSwap_Params capnp.Struct

// Anchor_Swapper_compareAndSwap_Params_TypeID is the unique identifier for the type Anchor_Swapper_compareAndSwap_Params.
const Anchor_Swapper_compareAndSwap_Params_TypeID = 0x9b525bb346bacc6e

func NewAnchor_Swapper_compareAndSwap_Params(s *capnp.Segment) (Anchor_Swapper_compareAndSwap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Swapper_compareAndSwap_Params(st), err
}

func NewRootAnchor_Swapper_compareAndSwap_Params(s *capnp.Segment) (Anchor_Swapper_compareAndSwap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Swapper_compareAndSwap_Params(st), err
}

func ReadRootAnchor_Swapper_compareAndSwap_Params(msg *capnp.Message) (Anchor_Swapper_compareAndSwap_Params, error) {
	root, err := msg.Root()
	return Anchor_Swapper_compareAndSwap_Params(root.Struct()), err
}

func (s Anchor_Swapper_compareAndSwap_Params) String() string {
	str, _ := text.Marshal(0x9b525bb346bacc6e, capnp.Struct(s))
	return str
}

func (s Anchor_Swapper_compareAndSwap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Swapper_compareAndSwap_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Swapper_compareAndSwap_Params {
	return Anchor_Swapper_compareAndSwap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Swapper_compareAndSwap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Swapper_compareAndSwap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Swapper_compareAndSwap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Swapper_compareAndSwap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Swapper_compareAndSwap_Params) Old() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Swapper_compareAndSwap_Params) HasOld() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Swapper_compareAndSwap_Params) SetOld(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Anchor_Swapper_compareAndSwap_Params) New() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Anchor_Swapper_compareAndSwap_Params) HasNew() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Anchor_Swapper_compareAndSwap_Params) SetNew(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Anchor_Swapper_compareAndSwap_Params_List is a list of Anchor_Swapper_compareAndSwap_Params.
type Anchor_Swapper_compareAndSwap_Params_List = capnp.StructList[Anchor_Swapper_compareAndSwap_Params]

// NewAnchor_Swapper_compareAndSwap_Params creates a new list of Anchor_Swapper_compareAndSwap_Params.
func NewAnchor_Swapper_compareAndSwap_Params_List(s *capnp.Segment, sz int32) (Anchor_Swapper_compareAndSwap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Swapper_compareAndSwap_Params](l), err
}

// Anchor_Swapper_compareAndSwap_Params_Future is a wrapper for a Anchor_Swapper_compareAndSwap_Params promised by a client call.
type Anchor_Swapper_compareAndSwap_Params_Future struct{ *capnp.Future }

func (f Anchor_Swapper_compareAndSwap_Params_Future) Struct() (Anchor_Swapper_compareAndSwap_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Swapper_compareAndSwap_Params(p.Struct()), err
}
func (p Anchor_Swapper_compareAndSwap_Params_Future) Old() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Anchor_Swapper_compareAndSwap_Params_Future) New() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Anchor_Swapper_compareAndSwap_Results capnp.Struct

// Anchor_Swapper_compareAndSwap_Results_TypeID is the unique identifier for the type Anchor_Swapper_compareAndSwap_Results.
const Anchor_Swapper_compareAndSwap_Results_TypeID = 0xced581048d06f8cb

func NewAnchor_Swapper_compareAndSwap_Results(s *capnp.Segment) (Anchor_Swapper_compareAndSwap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Swapper_compareAndSwap_Results(st), err
}

func NewRootAnchor_Swapper_compareAndSwap_Results(s *capnp.Segment) (Anchor_Swapper_compareAndSwap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Swapper_compareAndSwap_Results(st), err
}

func ReadRootAnchor_Swapper_compareAndSwap_Results(msg *capnp.Message) (Anchor_Swapper_compareAndSwap_Results, error) {
	root, err := msg.Root()
	return Anchor_Swapper_compareAndSwap_Results(root.Struct()), err
}

func (s Anchor_Swapper_compareAndSwap_Results) String() string {
	str, _ := text.Marshal(0xced581048d06f8cb, capnp.Struct(s))
	return str
}

func (s Anchor_Swapper_compareAndSwap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Swapper_compareAndSwap_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Swapper_compareAndSwap_Results {
	return Anchor_Swapper_compareAndSwap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Swapper_compareAndSwap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Swapper_compareAndSwap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Swapper_compareAndSwap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Swapper_compareAndSwap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Swapper_compareAndSwap_Results) Swapped() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Anchor_Swapper_compareAndSwap_Results) SetSwapped(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Anchor_Swapper_compareAndSwap_Results_List is a list of Anchor_Swapper_compareAndSwap_Results.
type Anchor_Swapper_compareAndSwap_Results_List = capnp.StructList[Anchor_Swapper_compareAndSwap_Results]

// NewAnchor_Swapper_compareAndSwap_Results creates a new list of Anchor_Swapper_compareAndSwap_Results.
func NewAnchor_Swapper_compareAndSwap_Results_List(s *capnp.Segment, sz int32) (Anchor_Swapper_compareAndSwap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_Swapper_compareAndSwap_Results](l), err
}

// Anchor_Swapper_compareAndSwap_Results_Future is a wrapper for a Anchor_Swapper_compareAndSwap_Results promised by a client call.
type Anchor_Swapper_compareAndSwap_Results_Future struct{ *capnp.Future }

func (f Anchor_Swapper_compareAndSwap_Results_Future) Struct() (Anchor_Swapper_compareAndSwap_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Swapper_compareAndSwap_Results(p.Struct()), err
}

type Anchor_ls_Params capnp.Struct

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xc105d085735711e1

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params(st), err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params(st), err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params(root.Struct()), err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xc105d085735711e1, capnp.Struct(s))
	return str
}

func (s Anchor_ls_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_ls_Params) DecodeFromPtr(p capnp.Ptr) Anchor_ls_Params {
	return Anchor_ls_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_ls_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_ls_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_ls_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_ls_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List = capnp.StructList[Anchor_ls_Params]

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_ls_Params](l), err
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (f Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_ls_Params(p.Struct()), err
}

type Anchor_ls_Results capnp.Struct

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xe325af947f127758

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(st), err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(st), err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results(root.Struct()), err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xe325af947f127758, capnp.Struct(s))
	return str
}

func (s Anchor_ls_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_ls_Results) DecodeFromPtr(p capnp.Ptr) Anchor_ls_Results {
	return Anchor_ls_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_ls_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_ls_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_ls_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_ls_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Anchor_Child_List(p.List()), err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List = capnp.StructList[Anchor_ls_Results]

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Results](l), err
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (f Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_ls_Results(p.Struct()), err
}

type Anchor_walk_Params capnp.Struct

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb90ffa2761585171

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params(st), err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params(st), err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params(root.Struct()), err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb90ffa2761585171, capnp.Struct(s))
	return str
}

func (s Anchor_walk_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_walk_Params) DecodeFromPtr(p capnp.Ptr) Anchor_walk_Params {
	return Anchor_walk_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_walk_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_walk_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_walk_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_walk_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_walk_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List = capnp.StructList[Anchor_walk_Params]

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Params](l), err
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (f Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_walk_Params(p.Struct()), err
}

type Anchor_walk_Results capnp.Struct

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xaec21d58779cc86c

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(st), err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(st), err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results(root.Struct()), err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xaec21d58779cc86c, capnp.Struct(s))
	return str
}

func (s Anchor_walk_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_walk_Results) DecodeFromPtr(p capnp.Ptr) Anchor_walk_Results {
	return Anchor_walk_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_walk_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_walk_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_walk_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_walk_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor(p.Interface().Client())
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List = capnp.StructList[Anchor_walk_Results]

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Results](l), err
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (f Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_walk_Results(p.Struct()), err
}
func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor(p.Future.Field(0, nil).Client())
}

type Anchor_cell_Params capnp.Struct

// Anchor_cell_Params_TypeID is the unique identifier for the type Anchor_cell_Params.
const Anchor_cell_Params_TypeID = 0xd25c03d885e9b059

func NewAnchor_cell_Params(s *capnp.Segment) (Anchor_cell_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_cell_Params(st), err
}

func NewRootAnchor_cell_Params(s *capnp.Segment) (Anchor_cell_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_cell_Params(st), err
}

func ReadRootAnchor_cell_Params(msg *capnp.Message) (Anchor_cell_Params, error) {
	root, err := msg.Root()
	return Anchor_cell_Params(root.Struct()), err
}

func (s Anchor_cell_Params) String() string {
	str, _ := text.Marshal(0xd25c03d885e9b059, capnp.Struct(s))
	return str
}

func (s Anchor_cell_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_cell_Params) DecodeFromPtr(p capnp.Ptr) Anchor_cell_Params {
	return Anchor_cell_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_cell_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_cell_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_cell_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_cell_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_cell_Params_List is a list of Anchor_cell_Params.
type Anchor_cell_Params_List = capnp.StructList[Anchor_cell_Params]

// NewAnchor_cell_Params creates a new list of Anchor_cell_Params.
func NewAnchor_cell_Params_List(s *capnp.Segment, sz int32) (Anchor_cell_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_cell_Params](l), err
}

// Anchor_cell_Params_Future is a wrapper for a Anchor_cell_Params promised by a client call.
type Anchor_cell_Params_Future struct{ *capnp.Future }

func (f Anchor_cell_Params_Future) Struct() (Anchor_cell_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_cell_Params(p.Struct()), err
}

type Anchor_cell_Results capnp.Struct

// Anchor_cell_Results_TypeID is the unique identifier for the type Anchor_cell_Results.
const Anchor_cell_Results_TypeID = 0xa17b8c469ab105e9

func NewAnchor_cell_Results(s *capnp.Segment) (Anchor_cell_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Anchor_cell_Results(st), err
}

func NewRootAnchor_cell_Results(s *capnp.Segment) (Anchor_cell_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Anchor_cell_Results(st), err
}

func ReadRootAnchor_cell_Results(msg *capnp.Message) (Anchor_cell_Results, error) {
	root, err := msg.Root()
	return Anchor_cell_Results(root.Struct()), err
}

func (s Anchor_cell_Results) String() string {
	str, _ := text.Marshal(0xa17b8c469ab105e9, capnp.Struct(s))
	return str
}

func (s Anchor_cell_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_cell_Results) DecodeFromPtr(p capnp.Ptr) Anchor_cell_Results {
	return Anchor_cell_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_cell_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_cell_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_cell_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_cell_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_cell_Results) Loader() Anchor_Loader {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor_Loader(p.Interface().Client())
}

func (s Anchor_cell_Results) HasLoader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_cell_Results) SetLoader(v Anchor_Loader) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Anchor_cell_Results) Storer() Anchor_Storer {
	p, _ := capnp.Struct(s).Ptr(1)
	return Anchor_Storer(p.Interface().Client())
}

func (s Anchor_cell_Results) HasStorer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Anchor_cell_Results) SetStorer(v Anchor_Storer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Anchor_cell_Results) Swapper() Anchor_Swapper {
	p, _ := capnp.Struct(s).Ptr(2)
	return Anchor_Swapper(p.Interface().Client())
}

func (s Anchor_cell_Results) HasSwapper() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Anchor_cell_Results) SetSwapper(v Anchor_Swapper) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// Anchor_cell_Results_List is a list of Anchor_cell_Results.
type Anchor_cell_Results_List = capnp.StructList[Anchor_cell_Results]

// NewAnchor_cell_Results creates a new list of Anchor_cell_Results.
func NewAnchor_cell_Results_List(s *capnp.Segment, sz int32) (Anchor_cell_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Anchor_cell_Results](l), err
}

// Anchor_cell_Results_Future is a wrapper for a Anchor_cell_Results promised by a client call.
type Anchor_cell_Results_Future struct{ *capnp.Future }

func (f Anchor_cell_Results_Future) Struct() (Anchor_cell_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_cell_Results(p.Struct()), err
}
func (p Anchor_cell_Results_Future) Loader() Anchor_Loader {
	return Anchor_Loader(p.Future.Field(0, nil).Client())
}

func (p Anchor_cell_Results_Future) Storer() Anchor_Storer {
	return Anchor_Storer(p.Future.Field(1, nil).Client())
}

func (p Anchor_cell_Results_Future) Swapper() Anchor_Swapper {
	return Anchor_Swapper(p.Future.Field(2, nil).Client())
}

const schema_efb5a91f96d44de3 = "x\xda\x8cV]h\x1cU\x14>\xe7\xce\xccN\"Y" +
	"\xb77\xb3\x91\xc6\xa6,\x0d)\x8d\xb1\x8dM\"X\xf7" +
	"\xc1\xdd\xc4\xa6\xb1\xa5\xd1\xbd\xa9\xd2\x84\xf6e\xd8\x1dH" +
	"\xecdw3\xbb\xc9\x8aR\x82B\xac\x15#*U\xb4" +
	"\xb5\x0f\x15\xf2\x10\x04\xe3\x0fZ\xec[\x8b\x10Q\x91P" +
	"\"j\xa0\x14\x9bF\xc8\x83\x14\x05\xa1\xf4e\xe4\xde\xd9" +
	"\xf9\xd9\xec\xae\xf4)\x9b\x99s\xbfs\xbe\xef|\xe7\x9e" +
	"\xd9\xbfB\x92rO\xf8\x8e\x0a\x84\x9dTB\xf6\xd5\xce" +
	"\x95[\xcb/\xf6\xbd\x094*\xd9\xed\xbf\xbf\xddx\xfb" +
	"\x89\xe6\xdb\x00\xa8\xdd\x90\xd6\xb4MI\x05\xd06\xa4!" +
	"-,\xab\x00v\xf6\xa7+\x87\xbe:1r\x01h\x1b" +
	"\x02(D\x05\xe8\xfbWz\x0f\x015E.\x01\xda\x9b" +
	"\xca\x17\xe7\x0f\xbd\xf5\xca%\xa0Q\x1e\xc0\x8f\xf7\xe9\xf2" +
	"\x03<`B^\x02\xb4\xf7\\\x1c\xfb0\xd68\xffi" +
	"U:T\xd6\xb4\xb0\xc2\xd35*CZ\x0f\xffe\x9b" +
	"\xdf\x7f\\\x1a\xddy\xed\xb32\x1ar\xb4VE\xa0\xed" +
	"R\x12\x80\xf6\xc2\xb3\xc3\x7f\xdbK7.\x03\xdd\xe1\x05" +
	"\xf4+\x03<\xe0\xb0\x08\x98b\xa3\xfa\x9e{\x91o\x83" +
	"\x08\x13\x0a\xe1\x01\x93\"\xe0\x0fz\xbc0\xb7\xa2\\u" +
	"\x028Im^\xf9\x07d\xfb\xf5\xf5\x833\xdd\x8f\x9d" +
	"\xbaV\xa6*NN)G\xf8\xc9\xd3\xe2\xe4G=/" +
	"|\xd9\xf6\xd2\xf6e~\xd2g\"4\xd1.*\xd7\xb5" +
	"EAfA\xe1\xb2\xfcx74/\xbf\xfa\xcb\xcf\xc0" +
	"\xda\xb0\x9c\xa6\x0fC\xe79\x18\x0dq\xb0\xb1\xcf7\xe7" +
	"~\x93N^\xf7\xcb\xe8\xeb\x09\x11\x04\xd9\x1e[\x8d~" +
	"\xb72\xfb\xeb\x1a\xb0\x1d\xe8\x15\xd2\x12\x12\x1cw\x868" +
	"\xf8\xfc\xa3\x9do\x9c\xfb\xe1\xcc\xcd`\xa5\xa7\x9d\x809" +
	"\x01>Zj\x9e=\xb7\xb4{= \x82\xb6\x10\xba\x07" +
	"\xa8-\x8a\xf7^\xf14,\xd9\xeb\xc3\xab\x1f\xc4\x16\xbf" +
	"\xbe#,\x10\xfaD\xdb\x08\x0d\x01hT]\xd6\xce\xaa" +
	"\xbc'\xc7/\xc7/\xbc\xf6\xd7\xea\x9f\xe5zD\xa9S" +
	"\xaa\xa3\x8b\xca\xd1N<t\xe5\xb9w\xba\x92w\x9d\x9e" +
	"\x88\xf7\x97\xd48\xa72\xf8\xcd\x81\xa7\x9aFo\xdaU" +
	"\xbd?\xab\xde\xd2\xde\xe7\xe8\xda\xbb\xea\x19mCUa" +
	"\xaf\xadg\xd3\xe39\xab;M\xf4|6\x1f\xefw\xfe" +
	";\x9a\xd33\x92a\xa5\x10\x99,)\x00^2t\x9d" +
	"@i\x17\x10\xaa\xa8\x113\xa7g\x92\x98B\xf4\x90\x94" +
	" \xd2\xb1\x92\x9e\xcf\x1bVw:7\x99\xd7-\xa3?" +
	"\x9b\xe1O:R\xba\xa5Ob\x815H2\x80\x8c\x00" +
	"\xf4\x91v\x00\xd6!!\xdbO\x90\"F9i\xba\x8f" +
	"?\xec\x94\x90=NP\xcd\x99\x19l\x06\x82\xcd\x80j" +
	"\xd6(\xb9\xbf\xbd\xbcR0o\xda0\xcd\x8e\x11\xa30" +
	"m\x16\x0b\x00\xac\xc9\xcb3\x18\x07`I\x09\xd9\xd1@" +
	"\x9e\xc3\xfc\xe1A\x09Y\x8a %$\x8a\x04\x80\x0e\x0f" +
	"\x00\xb0g$d\xcf\x13Lp\x9a\x86\x85\xd4\x9fc@" +
	"\xa4\x80\x89B1g\x89\x17\xde\xc49/f\x0b\x0es" +
	"\xa4~?\x9c7\xb5%?V\xccY\x15\x92\xbb\x86D" +
	"\xd7\x09\x94\xf6\x0a\xc9c\"e\xa5\xe6\x15\xdcK\xbay" +
	"*\xc0]\xf6\xb8\x879\xcd\x06\x09Y\x94`\xc29\x8a" +
	"4\xe8\x90\x8a\xf2\xe4\xad\x8e0\xacn.\x83\x07\x1dD" +
	"\xee\xf5\x91c3\xba9m\xfc\x7f{D\x89\xc2\x04\x95" +
	"0]>L$\xaf\x17\xc7\xb1\x09\x086\xd5\xd3\xcc," +
	"t\xa4b\x02\xa4v\xd1\xae\xf9x+j\x0b\xd2\xee\xe7" +
	"\x0b\xfa\xabv\xba\xa7\xc7'L\xcc\xf0\x0e\x05l\x1b\xaf" +
	"e\xdb.\xdf\xb6uu\x8ed\xf5I\xa3\x8a\xdf\xfd\x0c" +
	"\x8f`\"\x15\x0bA\"\x03>\x91\xb2\xf32\x88@\x10" +
	"\x03\xd8\x0dU\x03R\xee\x80\x1b\xb0\xd5\x8f\\:\xfe\xc7" +
	"\xebT\x80w\xaf\xcf\xdb\xa3=\x02\xc0\xf6J\xc8\x0eT" +
	"\x99 7cX%k\xa2\x08hT\x95U\xbfe5" +
	"\x0c\x12lX\xadK`\xab?F\x12N\xdb\x83\x18G" +
	"\xc4\x85\x80\xac\x93\xa0\x9d\x1e\x9f03\x96\x91\x05\x00|" +
	"\x100%!n\xf3W\x0e \x7f\xe8\x81\xa3\x0b\xae\x8e" +
	"\xe7,\xb6\x0d\x83\xcb\xa9\xb57\xb0\xe2[\xe2\x81\x05L" +
	"\xe3\x81\x1b9<\x10\xe36\xca$\x9c\x81J82\xcf" +
	"\x96i\xb3&1\xfa\xee\xb2Dw\xa3P\xf60\x10:" +
	"\xa8\xa2\xbfi\xd1]\xda\xf4I~\x13\xefS\x91x\xdb" +
	"\x0d\xdd\xcf\x03\xba\x8b\xbfkQ%\xb3\x90\xc4\x08\x1f\xba" +
	"$Fx\xe7+o\x0f\xb9n\xe3k\x0e\xcdHY\xbf" +
	"\xed\x04\xed\xc2t:m\x18\x19\x03\xb0\xdaoR\xbd\x0b" +
	"$\x91\xaa\x1cZ\xb2\xd5\x01j\xde\xb9\x09\x1b\x84\x1c\xee" +
	"\xe2E\xf7[\x81\xf6pZ\xbb\xb9\x1c\xee\x97\x12\xba\xab" +
	"\x9f\xb6\xbe\x0c\x84R5\xc2\x1d\x94D\xdb\x9d\x1dH8" +
	"\xd3#\x98\xff\x17\x00\x00\xff\xff\x19+\x94\x8c"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_efb5a91f96d44de3,
		Nodes: []uint64{
			0x8a336ac7e2d028c1,
			0x9b525bb346bacc6e,
			0xa17b8c469ab105e9,
			0xab8d091f98599d27,
			0xaec21d58779cc86c,
			0xb7ddaffff14d4ea5,
			0xb90ffa2761585171,
			0xc105d085735711e1,
			0xc26b2f2e7644e386,
			0xc718781cb2553199,
			0xced581048d06f8cb,
			0xd25c03d885e9b059,
			0xdad77fd0c414d459,
			0xdf87ca9488282b8d,
			0xe325af947f127758,
			0xe41237e4098ed922,
			0xe6d4ed829b3ab757,
			0xf8402a904fba165b,
			0xffdf580c3e38b645,
		},
		Compressed: true,
	})
}
