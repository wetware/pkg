// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	anchor "github.com/wetware/pkg/api/anchor"
	capstore "github.com/wetware/pkg/api/capstore"
	process "github.com/wetware/pkg/api/process"
	pubsub "github.com/wetware/pkg/api/pubsub"
	registry "github.com/wetware/pkg/api/registry"
	strconv "strconv"
)

type Host capnp.Client

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) View(ctx context.Context, params func(Host_view_Params) error) (Host_view_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_view_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_view_Results_Future{Future: ans.Future()}, release

}

func (c Host) PubSub(ctx context.Context, params func(Host_pubSub_Params) error) (Host_pubSub_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_pubSub_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_pubSub_Results_Future{Future: ans.Future()}, release

}

func (c Host) Root(ctx context.Context, params func(Host_root_Params) error) (Host_root_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_root_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_root_Results_Future{Future: ans.Future()}, release

}

func (c Host) Registry(ctx context.Context, params func(Host_registry_Params) error) (Host_registry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_registry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_registry_Results_Future{Future: ans.Future()}, release

}

func (c Host) Executor(ctx context.Context, params func(Host_executor_Params) error) (Host_executor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_executor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_executor_Results_Future{Future: ans.Future()}, release

}

func (c Host) CapStore(ctx context.Context, params func(Host_capStore_Params) error) (Host_capStore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "capStore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_capStore_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_capStore_Results_Future{Future: ans.Future()}, release

}

func (c Host) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Host) String() string {
	return "Host(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Host) AddRef() Host {
	return Host(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Host) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Host) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Host) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Host) DecodeFromPtr(p capnp.Ptr) Host {
	return Host(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Host) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Host) IsSame(other Host) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Host) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Host) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	View(context.Context, Host_view) error

	PubSub(context.Context, Host_pubSub) error

	Root(context.Context, Host_root) error

	Registry(context.Context, Host_registry) error

	Executor(context.Context, Host_executor) error

	CapStore(context.Context, Host_capStore) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server) Host {
	return Host(capnp.NewClient(Host_NewServer(s)))
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.View(ctx, Host_view{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubSub(ctx, Host_pubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, Host_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Host_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Executor(ctx, Host_executor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "capStore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapStore(ctx, Host_capStore{call})
		},
	})

	return methods
}

// Host_view holds the state for a server call to Host.view.
// See server.Call for documentation.
type Host_view struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_view) Args() Host_view_Params {
	return Host_view_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_view) AllocResults() (Host_view_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(r), err
}

// Host_pubSub holds the state for a server call to Host.pubSub.
// See server.Call for documentation.
type Host_pubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_pubSub) Args() Host_pubSub_Params {
	return Host_pubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_pubSub) AllocResults() (Host_pubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(r), err
}

// Host_root holds the state for a server call to Host.root.
// See server.Call for documentation.
type Host_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_root) Args() Host_root_Params {
	return Host_root_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_root) AllocResults() (Host_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(r), err
}

// Host_registry holds the state for a server call to Host.registry.
// See server.Call for documentation.
type Host_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_registry) Args() Host_registry_Params {
	return Host_registry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_registry) AllocResults() (Host_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(r), err
}

// Host_executor holds the state for a server call to Host.executor.
// See server.Call for documentation.
type Host_executor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_executor) Args() Host_executor_Params {
	return Host_executor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_executor) AllocResults() (Host_executor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(r), err
}

// Host_capStore holds the state for a server call to Host.capStore.
// See server.Call for documentation.
type Host_capStore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_capStore) Args() Host_capStore_Params {
	return Host_capStore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_capStore) AllocResults() (Host_capStore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(r), err
}

// Host_List is a list of Host.
type Host_List = capnp.CapList[Host]

// NewHost creates a new list of Host.
func NewHost_List(s *capnp.Segment, sz int32) (Host_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Host](l), err
}

type Host_view_Params capnp.Struct

// Host_view_Params_TypeID is the unique identifier for the type Host_view_Params.
const Host_view_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func NewRootHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func ReadRootHost_view_Params(msg *capnp.Message) (Host_view_Params, error) {
	root, err := msg.Root()
	return Host_view_Params(root.Struct()), err
}

func (s Host_view_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, capnp.Struct(s))
	return str
}

func (s Host_view_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Params) DecodeFromPtr(p capnp.Ptr) Host_view_Params {
	return Host_view_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_view_Params_List is a list of Host_view_Params.
type Host_view_Params_List = capnp.StructList[Host_view_Params]

// NewHost_view_Params creates a new list of Host_view_Params.
func NewHost_view_Params_List(s *capnp.Segment, sz int32) (Host_view_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_view_Params](l), err
}

// Host_view_Params_Future is a wrapper for a Host_view_Params promised by a client call.
type Host_view_Params_Future struct{ *capnp.Future }

func (f Host_view_Params_Future) Struct() (Host_view_Params, error) {
	p, err := f.Future.Ptr()
	return Host_view_Params(p.Struct()), err
}

type Host_view_Results capnp.Struct

// Host_view_Results_TypeID is the unique identifier for the type Host_view_Results.
const Host_view_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func NewRootHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func ReadRootHost_view_Results(msg *capnp.Message) (Host_view_Results, error) {
	root, err := msg.Root()
	return Host_view_Results(root.Struct()), err
}

func (s Host_view_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, capnp.Struct(s))
	return str
}

func (s Host_view_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Results) DecodeFromPtr(p capnp.Ptr) Host_view_Results {
	return Host_view_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_view_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s Host_view_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_view_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_view_Results_List is a list of Host_view_Results.
type Host_view_Results_List = capnp.StructList[Host_view_Results]

// NewHost_view_Results creates a new list of Host_view_Results.
func NewHost_view_Results_List(s *capnp.Segment, sz int32) (Host_view_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_view_Results](l), err
}

// Host_view_Results_Future is a wrapper for a Host_view_Results promised by a client call.
type Host_view_Results_Future struct{ *capnp.Future }

func (f Host_view_Results_Future) Struct() (Host_view_Results, error) {
	p, err := f.Future.Ptr()
	return Host_view_Results(p.Struct()), err
}
func (p Host_view_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

type Host_pubSub_Params capnp.Struct

// Host_pubSub_Params_TypeID is the unique identifier for the type Host_pubSub_Params.
const Host_pubSub_Params_TypeID = 0xe5b5227505fcaa99

func NewHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func NewRootHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func ReadRootHost_pubSub_Params(msg *capnp.Message) (Host_pubSub_Params, error) {
	root, err := msg.Root()
	return Host_pubSub_Params(root.Struct()), err
}

func (s Host_pubSub_Params) String() string {
	str, _ := text.Marshal(0xe5b5227505fcaa99, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Params) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Params {
	return Host_pubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_pubSub_Params_List is a list of Host_pubSub_Params.
type Host_pubSub_Params_List = capnp.StructList[Host_pubSub_Params]

// NewHost_pubSub_Params creates a new list of Host_pubSub_Params.
func NewHost_pubSub_Params_List(s *capnp.Segment, sz int32) (Host_pubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_pubSub_Params](l), err
}

// Host_pubSub_Params_Future is a wrapper for a Host_pubSub_Params promised by a client call.
type Host_pubSub_Params_Future struct{ *capnp.Future }

func (f Host_pubSub_Params_Future) Struct() (Host_pubSub_Params, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Params(p.Struct()), err
}

type Host_pubSub_Results capnp.Struct

// Host_pubSub_Results_TypeID is the unique identifier for the type Host_pubSub_Results.
const Host_pubSub_Results_TypeID = 0xdc88f975f5090eee

func NewHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func NewRootHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func ReadRootHost_pubSub_Results(msg *capnp.Message) (Host_pubSub_Results, error) {
	root, err := msg.Root()
	return Host_pubSub_Results(root.Struct()), err
}

func (s Host_pubSub_Results) String() string {
	str, _ := text.Marshal(0xdc88f975f5090eee, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Results) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Results {
	return Host_pubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_pubSub_Results) PubSub() pubsub.Router {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Router(p.Interface().Client())
}

func (s Host_pubSub_Results) HasPubSub() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_pubSub_Results) SetPubSub(v pubsub.Router) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_pubSub_Results_List is a list of Host_pubSub_Results.
type Host_pubSub_Results_List = capnp.StructList[Host_pubSub_Results]

// NewHost_pubSub_Results creates a new list of Host_pubSub_Results.
func NewHost_pubSub_Results_List(s *capnp.Segment, sz int32) (Host_pubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_pubSub_Results](l), err
}

// Host_pubSub_Results_Future is a wrapper for a Host_pubSub_Results promised by a client call.
type Host_pubSub_Results_Future struct{ *capnp.Future }

func (f Host_pubSub_Results_Future) Struct() (Host_pubSub_Results, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Results(p.Struct()), err
}
func (p Host_pubSub_Results_Future) PubSub() pubsub.Router {
	return pubsub.Router(p.Future.Field(0, nil).Client())
}

type Host_root_Params capnp.Struct

// Host_root_Params_TypeID is the unique identifier for the type Host_root_Params.
const Host_root_Params_TypeID = 0x828b2823e5eeb7be

func NewHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func NewRootHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func ReadRootHost_root_Params(msg *capnp.Message) (Host_root_Params, error) {
	root, err := msg.Root()
	return Host_root_Params(root.Struct()), err
}

func (s Host_root_Params) String() string {
	str, _ := text.Marshal(0x828b2823e5eeb7be, capnp.Struct(s))
	return str
}

func (s Host_root_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Params) DecodeFromPtr(p capnp.Ptr) Host_root_Params {
	return Host_root_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_root_Params_List is a list of Host_root_Params.
type Host_root_Params_List = capnp.StructList[Host_root_Params]

// NewHost_root_Params creates a new list of Host_root_Params.
func NewHost_root_Params_List(s *capnp.Segment, sz int32) (Host_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_root_Params](l), err
}

// Host_root_Params_Future is a wrapper for a Host_root_Params promised by a client call.
type Host_root_Params_Future struct{ *capnp.Future }

func (f Host_root_Params_Future) Struct() (Host_root_Params, error) {
	p, err := f.Future.Ptr()
	return Host_root_Params(p.Struct()), err
}

type Host_root_Results capnp.Struct

// Host_root_Results_TypeID is the unique identifier for the type Host_root_Results.
const Host_root_Results_TypeID = 0xcabb5c85a457450b

func NewHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func NewRootHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func ReadRootHost_root_Results(msg *capnp.Message) (Host_root_Results, error) {
	root, err := msg.Root()
	return Host_root_Results(root.Struct()), err
}

func (s Host_root_Results) String() string {
	str, _ := text.Marshal(0xcabb5c85a457450b, capnp.Struct(s))
	return str
}

func (s Host_root_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Results) DecodeFromPtr(p capnp.Ptr) Host_root_Results {
	return Host_root_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_root_Results) Root() anchor.Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return anchor.Anchor(p.Interface().Client())
}

func (s Host_root_Results) HasRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_root_Results) SetRoot(v anchor.Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_root_Results_List is a list of Host_root_Results.
type Host_root_Results_List = capnp.StructList[Host_root_Results]

// NewHost_root_Results creates a new list of Host_root_Results.
func NewHost_root_Results_List(s *capnp.Segment, sz int32) (Host_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_root_Results](l), err
}

// Host_root_Results_Future is a wrapper for a Host_root_Results promised by a client call.
type Host_root_Results_Future struct{ *capnp.Future }

func (f Host_root_Results_Future) Struct() (Host_root_Results, error) {
	p, err := f.Future.Ptr()
	return Host_root_Results(p.Struct()), err
}
func (p Host_root_Results_Future) Root() anchor.Anchor {
	return anchor.Anchor(p.Future.Field(0, nil).Client())
}

type Host_registry_Params capnp.Struct

// Host_registry_Params_TypeID is the unique identifier for the type Host_registry_Params.
const Host_registry_Params_TypeID = 0x89ec8e1ef0f263f3

func NewHost_registry_Params(s *capnp.Segment) (Host_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_registry_Params(st), err
}

func NewRootHost_registry_Params(s *capnp.Segment) (Host_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_registry_Params(st), err
}

func ReadRootHost_registry_Params(msg *capnp.Message) (Host_registry_Params, error) {
	root, err := msg.Root()
	return Host_registry_Params(root.Struct()), err
}

func (s Host_registry_Params) String() string {
	str, _ := text.Marshal(0x89ec8e1ef0f263f3, capnp.Struct(s))
	return str
}

func (s Host_registry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_registry_Params) DecodeFromPtr(p capnp.Ptr) Host_registry_Params {
	return Host_registry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_registry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_registry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_registry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_registry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_registry_Params_List is a list of Host_registry_Params.
type Host_registry_Params_List = capnp.StructList[Host_registry_Params]

// NewHost_registry_Params creates a new list of Host_registry_Params.
func NewHost_registry_Params_List(s *capnp.Segment, sz int32) (Host_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_registry_Params](l), err
}

// Host_registry_Params_Future is a wrapper for a Host_registry_Params promised by a client call.
type Host_registry_Params_Future struct{ *capnp.Future }

func (f Host_registry_Params_Future) Struct() (Host_registry_Params, error) {
	p, err := f.Future.Ptr()
	return Host_registry_Params(p.Struct()), err
}

type Host_registry_Results capnp.Struct

// Host_registry_Results_TypeID is the unique identifier for the type Host_registry_Results.
const Host_registry_Results_TypeID = 0xbe186003ae0f0429

func NewHost_registry_Results(s *capnp.Segment) (Host_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(st), err
}

func NewRootHost_registry_Results(s *capnp.Segment) (Host_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(st), err
}

func ReadRootHost_registry_Results(msg *capnp.Message) (Host_registry_Results, error) {
	root, err := msg.Root()
	return Host_registry_Results(root.Struct()), err
}

func (s Host_registry_Results) String() string {
	str, _ := text.Marshal(0xbe186003ae0f0429, capnp.Struct(s))
	return str
}

func (s Host_registry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_registry_Results) DecodeFromPtr(p capnp.Ptr) Host_registry_Results {
	return Host_registry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_registry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_registry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_registry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_registry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_registry_Results) Registry() registry.Registry {
	p, _ := capnp.Struct(s).Ptr(0)
	return registry.Registry(p.Interface().Client())
}

func (s Host_registry_Results) HasRegistry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_registry_Results) SetRegistry(v registry.Registry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_registry_Results_List is a list of Host_registry_Results.
type Host_registry_Results_List = capnp.StructList[Host_registry_Results]

// NewHost_registry_Results creates a new list of Host_registry_Results.
func NewHost_registry_Results_List(s *capnp.Segment, sz int32) (Host_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_registry_Results](l), err
}

// Host_registry_Results_Future is a wrapper for a Host_registry_Results promised by a client call.
type Host_registry_Results_Future struct{ *capnp.Future }

func (f Host_registry_Results_Future) Struct() (Host_registry_Results, error) {
	p, err := f.Future.Ptr()
	return Host_registry_Results(p.Struct()), err
}
func (p Host_registry_Results_Future) Registry() registry.Registry {
	return registry.Registry(p.Future.Field(0, nil).Client())
}

type Host_executor_Params capnp.Struct

// Host_executor_Params_TypeID is the unique identifier for the type Host_executor_Params.
const Host_executor_Params_TypeID = 0xbe5314ed29d84c52

func NewHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func NewRootHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func ReadRootHost_executor_Params(msg *capnp.Message) (Host_executor_Params, error) {
	root, err := msg.Root()
	return Host_executor_Params(root.Struct()), err
}

func (s Host_executor_Params) String() string {
	str, _ := text.Marshal(0xbe5314ed29d84c52, capnp.Struct(s))
	return str
}

func (s Host_executor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Params) DecodeFromPtr(p capnp.Ptr) Host_executor_Params {
	return Host_executor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_executor_Params_List is a list of Host_executor_Params.
type Host_executor_Params_List = capnp.StructList[Host_executor_Params]

// NewHost_executor_Params creates a new list of Host_executor_Params.
func NewHost_executor_Params_List(s *capnp.Segment, sz int32) (Host_executor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_executor_Params](l), err
}

// Host_executor_Params_Future is a wrapper for a Host_executor_Params promised by a client call.
type Host_executor_Params_Future struct{ *capnp.Future }

func (f Host_executor_Params_Future) Struct() (Host_executor_Params, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Params(p.Struct()), err
}

type Host_executor_Results capnp.Struct

// Host_executor_Results_TypeID is the unique identifier for the type Host_executor_Results.
const Host_executor_Results_TypeID = 0x9e8120f9bb059602

func NewHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func NewRootHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func ReadRootHost_executor_Results(msg *capnp.Message) (Host_executor_Results, error) {
	root, err := msg.Root()
	return Host_executor_Results(root.Struct()), err
}

func (s Host_executor_Results) String() string {
	str, _ := text.Marshal(0x9e8120f9bb059602, capnp.Struct(s))
	return str
}

func (s Host_executor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Results) DecodeFromPtr(p capnp.Ptr) Host_executor_Results {
	return Host_executor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_executor_Results) Executor() process.Executor {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Executor(p.Interface().Client())
}

func (s Host_executor_Results) HasExecutor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_executor_Results) SetExecutor(v process.Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_executor_Results_List is a list of Host_executor_Results.
type Host_executor_Results_List = capnp.StructList[Host_executor_Results]

// NewHost_executor_Results creates a new list of Host_executor_Results.
func NewHost_executor_Results_List(s *capnp.Segment, sz int32) (Host_executor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_executor_Results](l), err
}

// Host_executor_Results_Future is a wrapper for a Host_executor_Results promised by a client call.
type Host_executor_Results_Future struct{ *capnp.Future }

func (f Host_executor_Results_Future) Struct() (Host_executor_Results, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Results(p.Struct()), err
}
func (p Host_executor_Results_Future) Executor() process.Executor {
	return process.Executor(p.Future.Field(0, nil).Client())
}

type Host_capStore_Params capnp.Struct

// Host_capStore_Params_TypeID is the unique identifier for the type Host_capStore_Params.
const Host_capStore_Params_TypeID = 0x9eaa92308c59a588

func NewHost_capStore_Params(s *capnp.Segment) (Host_capStore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_capStore_Params(st), err
}

func NewRootHost_capStore_Params(s *capnp.Segment) (Host_capStore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_capStore_Params(st), err
}

func ReadRootHost_capStore_Params(msg *capnp.Message) (Host_capStore_Params, error) {
	root, err := msg.Root()
	return Host_capStore_Params(root.Struct()), err
}

func (s Host_capStore_Params) String() string {
	str, _ := text.Marshal(0x9eaa92308c59a588, capnp.Struct(s))
	return str
}

func (s Host_capStore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_capStore_Params) DecodeFromPtr(p capnp.Ptr) Host_capStore_Params {
	return Host_capStore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_capStore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_capStore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_capStore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_capStore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_capStore_Params_List is a list of Host_capStore_Params.
type Host_capStore_Params_List = capnp.StructList[Host_capStore_Params]

// NewHost_capStore_Params creates a new list of Host_capStore_Params.
func NewHost_capStore_Params_List(s *capnp.Segment, sz int32) (Host_capStore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_capStore_Params](l), err
}

// Host_capStore_Params_Future is a wrapper for a Host_capStore_Params promised by a client call.
type Host_capStore_Params_Future struct{ *capnp.Future }

func (f Host_capStore_Params_Future) Struct() (Host_capStore_Params, error) {
	p, err := f.Future.Ptr()
	return Host_capStore_Params(p.Struct()), err
}

type Host_capStore_Results capnp.Struct

// Host_capStore_Results_TypeID is the unique identifier for the type Host_capStore_Results.
const Host_capStore_Results_TypeID = 0x99b232a18288d3d8

func NewHost_capStore_Results(s *capnp.Segment) (Host_capStore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(st), err
}

func NewRootHost_capStore_Results(s *capnp.Segment) (Host_capStore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(st), err
}

func ReadRootHost_capStore_Results(msg *capnp.Message) (Host_capStore_Results, error) {
	root, err := msg.Root()
	return Host_capStore_Results(root.Struct()), err
}

func (s Host_capStore_Results) String() string {
	str, _ := text.Marshal(0x99b232a18288d3d8, capnp.Struct(s))
	return str
}

func (s Host_capStore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_capStore_Results) DecodeFromPtr(p capnp.Ptr) Host_capStore_Results {
	return Host_capStore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_capStore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_capStore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_capStore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_capStore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_capStore_Results) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(0)
	return capstore.CapStore(p.Interface().Client())
}

func (s Host_capStore_Results) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_capStore_Results) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_capStore_Results_List is a list of Host_capStore_Results.
type Host_capStore_Results_List = capnp.StructList[Host_capStore_Results]

// NewHost_capStore_Results creates a new list of Host_capStore_Results.
func NewHost_capStore_Results_List(s *capnp.Segment, sz int32) (Host_capStore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_capStore_Results](l), err
}

// Host_capStore_Results_Future is a wrapper for a Host_capStore_Results promised by a client call.
type Host_capStore_Results_Future struct{ *capnp.Future }

func (f Host_capStore_Results_Future) Struct() (Host_capStore_Results, error) {
	p, err := f.Future.Ptr()
	return Host_capStore_Results(p.Struct()), err
}
func (p Host_capStore_Results_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(0, nil).Client())
}

type Heartbeat capnp.Struct

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0xa97471079836f720

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0xa97471079836f720, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Heartbeat) SetTtl(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Heartbeat) Server() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Heartbeat) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Heartbeat) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Heartbeat) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Heartbeat) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Heartbeat) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (f Heartbeat_Future) Struct() (Heartbeat, error) {
	p, err := f.Future.Ptr()
	return Heartbeat(p.Struct()), err
}

type View capnp.Client

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release

}

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release

}

func (c View) Reverse(ctx context.Context, params func(View_reverse_Params) error) (View_reverse_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      2,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "reverse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_reverse_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_reverse_Results_Future{Future: ans.Future()}, release

}

func (c View) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View) String() string {
	return "View(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View) AddRef() View {
	return View(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View) DecodeFromPtr(p capnp.Ptr) View {
	return View(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View) IsSame(other View) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Lookup(context.Context, View_lookup) error

	Iter(context.Context, View_iter) error

	Reverse(context.Context, View_reverse) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server) View {
	return View(capnp.NewClient(View_NewServer(s)))
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      2,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "reverse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reverse(ctx, View_reverse{call})
		},
	})

	return methods
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(r), err
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(r), err
}

// View_reverse holds the state for a server call to View.reverse.
// See server.Call for documentation.
type View_reverse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_reverse) Args() View_reverse_Params {
	return View_reverse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_reverse) AllocResults() (View_reverse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(r), err
}

// View_List is a list of View.
type View_List = capnp.CapList[View]

// NewView creates a new list of View.
func NewView_List(s *capnp.Segment, sz int32) (View_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View](l), err
}

type View_Handler capnp.Client

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Recv(ctx context.Context, params func(View_Handler_recv_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "recv",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_recv_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c View_Handler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View_Handler) String() string {
	return "View_Handler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View_Handler) AddRef() View_Handler {
	return View_Handler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View_Handler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View_Handler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View_Handler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View_Handler) DecodeFromPtr(p capnp.Ptr) View_Handler {
	return View_Handler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View_Handler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View_Handler) IsSame(other View_Handler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View_Handler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View_Handler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Recv(context.Context, View_Handler_recv) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server) View_Handler {
	return View_Handler(capnp.NewClient(View_Handler_NewServer(s)))
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "recv",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Recv(ctx, View_Handler_recv{call})
		},
	})

	return methods
}

// View_Handler_recv holds the state for a server call to View_Handler.recv.
// See server.Call for documentation.
type View_Handler_recv struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_recv) Args() View_Handler_recv_Params {
	return View_Handler_recv_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_Handler_recv) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// View_Handler_List is a list of View_Handler.
type View_Handler_List = capnp.CapList[View_Handler]

// NewView_Handler creates a new list of View_Handler.
func NewView_Handler_List(s *capnp.Segment, sz int32) (View_Handler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View_Handler](l), err
}

type View_Handler_recv_Params capnp.Struct

// View_Handler_recv_Params_TypeID is the unique identifier for the type View_Handler_recv_Params.
const View_Handler_recv_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func NewRootView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func ReadRootView_Handler_recv_Params(msg *capnp.Message) (View_Handler_recv_Params, error) {
	root, err := msg.Root()
	return View_Handler_recv_Params(root.Struct()), err
}

func (s View_Handler_recv_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, capnp.Struct(s))
	return str
}

func (s View_Handler_recv_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Handler_recv_Params) DecodeFromPtr(p capnp.Ptr) View_Handler_recv_Params {
	return View_Handler_recv_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Handler_recv_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Handler_recv_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Handler_recv_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Handler_recv_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Handler_recv_Params) Record() (View_Record, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_Handler_recv_Params) HasRecord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Handler_recv_Params) SetRecord(v View_Record) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_Handler_recv_Params) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Handler_recv_Params_List is a list of View_Handler_recv_Params.
type View_Handler_recv_Params_List = capnp.StructList[View_Handler_recv_Params]

// NewView_Handler_recv_Params creates a new list of View_Handler_recv_Params.
func NewView_Handler_recv_Params_List(s *capnp.Segment, sz int32) (View_Handler_recv_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_Handler_recv_Params](l), err
}

// View_Handler_recv_Params_Future is a wrapper for a View_Handler_recv_Params promised by a client call.
type View_Handler_recv_Params_Future struct{ *capnp.Future }

func (f View_Handler_recv_Params_Future) Struct() (View_Handler_recv_Params, error) {
	p, err := f.Future.Ptr()
	return View_Handler_recv_Params(p.Struct()), err
}
func (p View_Handler_recv_Params_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_Selector capnp.Struct
type View_Selector_Which uint16

const (
	View_Selector_Which_all   View_Selector_Which = 0
	View_Selector_Which_match View_Selector_Which = 1
	View_Selector_Which_from  View_Selector_Which = 2
)

func (w View_Selector_Which) String() string {
	const s = "allmatchfrom"
	switch w {
	case View_Selector_Which_all:
		return s[0:3]
	case View_Selector_Which_match:
		return s[3:8]
	case View_Selector_Which_from:
		return s[8:12]

	}
	return "View_Selector_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Selector_TypeID is the unique identifier for the type View_Selector.
const View_Selector_TypeID = 0xb2029ff7b712d18a

func NewView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func NewRootView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func ReadRootView_Selector(msg *capnp.Message) (View_Selector, error) {
	root, err := msg.Root()
	return View_Selector(root.Struct()), err
}

func (s View_Selector) String() string {
	str, _ := text.Marshal(0xb2029ff7b712d18a, capnp.Struct(s))
	return str
}

func (s View_Selector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Selector) DecodeFromPtr(p capnp.Ptr) View_Selector {
	return View_Selector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Selector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Selector) Which() View_Selector_Which {
	return View_Selector_Which(capnp.Struct(s).Uint16(0))
}
func (s View_Selector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Selector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Selector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Selector) SetAll() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_Selector) Match() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != match")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasMatch() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetMatch(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMatch sets the match field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewMatch() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_Selector) From() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != from")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasFrom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetFrom(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrom sets the from field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewFrom() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Selector_List is a list of View_Selector.
type View_Selector_List = capnp.StructList[View_Selector]

// NewView_Selector creates a new list of View_Selector.
func NewView_Selector_List(s *capnp.Segment, sz int32) (View_Selector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Selector](l), err
}

// View_Selector_Future is a wrapper for a View_Selector promised by a client call.
type View_Selector_Future struct{ *capnp.Future }

func (f View_Selector_Future) Struct() (View_Selector, error) {
	p, err := f.Future.Ptr()
	return View_Selector(p.Struct()), err
}
func (p View_Selector_Future) Match() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}
func (p View_Selector_Future) From() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Constraint capnp.Struct
type View_Constraint_Which uint16

const (
	View_Constraint_Which_limit View_Constraint_Which = 0
	View_Constraint_Which_to    View_Constraint_Which = 1
)

func (w View_Constraint_Which) String() string {
	const s = "limitto"
	switch w {
	case View_Constraint_Which_limit:
		return s[0:5]
	case View_Constraint_Which_to:
		return s[5:7]

	}
	return "View_Constraint_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Constraint_TypeID is the unique identifier for the type View_Constraint.
const View_Constraint_TypeID = 0xab133d2062f6cc53

func NewView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func NewRootView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func ReadRootView_Constraint(msg *capnp.Message) (View_Constraint, error) {
	root, err := msg.Root()
	return View_Constraint(root.Struct()), err
}

func (s View_Constraint) String() string {
	str, _ := text.Marshal(0xab133d2062f6cc53, capnp.Struct(s))
	return str
}

func (s View_Constraint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Constraint) DecodeFromPtr(p capnp.Ptr) View_Constraint {
	return View_Constraint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Constraint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Constraint) Which() View_Constraint_Which {
	return View_Constraint_Which(capnp.Struct(s).Uint16(8))
}
func (s View_Constraint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Constraint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Constraint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Constraint) Limit() uint64 {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != limit")
	}
	return capnp.Struct(s).Uint64(0)
}

func (s View_Constraint) SetLimit(v uint64) {
	capnp.Struct(s).SetUint16(8, 0)
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Constraint) To() (View_Index, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != to")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Constraint) HasTo() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Constraint) SetTo(v View_Index) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTo sets the to field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Constraint) NewTo() (View_Index, error) {
	capnp.Struct(s).SetUint16(8, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Constraint_List is a list of View_Constraint.
type View_Constraint_List = capnp.StructList[View_Constraint]

// NewView_Constraint creates a new list of View_Constraint.
func NewView_Constraint_List(s *capnp.Segment, sz int32) (View_Constraint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[View_Constraint](l), err
}

// View_Constraint_Future is a wrapper for a View_Constraint promised by a client call.
type View_Constraint_Future struct{ *capnp.Future }

func (f View_Constraint_Future) Struct() (View_Constraint, error) {
	p, err := f.Future.Ptr()
	return View_Constraint(p.Struct()), err
}
func (p View_Constraint_Future) To() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Index capnp.Struct
type View_Index_Which uint16

const (
	View_Index_Which_peer   View_Index_Which = 0
	View_Index_Which_server View_Index_Which = 1
	View_Index_Which_host   View_Index_Which = 2
	View_Index_Which_meta   View_Index_Which = 3
)

func (w View_Index_Which) String() string {
	const s = "peerserverhostmeta"
	switch w {
	case View_Index_Which_peer:
		return s[0:4]
	case View_Index_Which_server:
		return s[4:10]
	case View_Index_Which_host:
		return s[10:14]
	case View_Index_Which_meta:
		return s[14:18]

	}
	return "View_Index_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Index_TypeID is the unique identifier for the type View_Index.
const View_Index_TypeID = 0xcc2d04cc26d4f6a5

func NewView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func NewRootView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func ReadRootView_Index(msg *capnp.Message) (View_Index, error) {
	root, err := msg.Root()
	return View_Index(root.Struct()), err
}

func (s View_Index) String() string {
	str, _ := text.Marshal(0xcc2d04cc26d4f6a5, capnp.Struct(s))
	return str
}

func (s View_Index) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Index) DecodeFromPtr(p capnp.Ptr) View_Index {
	return View_Index(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Index) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Index) Which() View_Index_Which {
	return View_Index_Which(capnp.Struct(s).Uint16(2))
}
func (s View_Index) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Index) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Index) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Index) Prefix() bool {
	return capnp.Struct(s).Bit(0)
}

func (s View_Index) SetPrefix(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s View_Index) Peer() (string, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != peer")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasPeer() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetPeer(v string) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Server() ([]byte, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != server")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s View_Index) HasServer() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) SetServer(v []byte) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetData(0, v)
}

func (s View_Index) Host() (string, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != host")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasHost() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetHost(v string) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Meta() (string, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != meta")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasMeta() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) MetaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetMeta(v string) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetText(0, v)
}

// View_Index_List is a list of View_Index.
type View_Index_List = capnp.StructList[View_Index]

// NewView_Index creates a new list of View_Index.
func NewView_Index_List(s *capnp.Segment, sz int32) (View_Index_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Index](l), err
}

// View_Index_Future is a wrapper for a View_Index promised by a client call.
type View_Index_Future struct{ *capnp.Future }

func (f View_Index_Future) Struct() (View_Index, error) {
	p, err := f.Future.Ptr()
	return View_Index(p.Struct()), err
}

type View_Record capnp.Struct

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return View_Record(st), err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return View_Record(st), err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record(root.Struct()), err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, capnp.Struct(s))
	return str
}

func (s View_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Record) DecodeFromPtr(p capnp.Ptr) View_Record {
	return View_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Record) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Record) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s View_Record) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Record) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s View_Record) Heartbeat() (Heartbeat, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Heartbeat(p.Struct()), err
}

func (s View_Record) HasHeartbeat() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_Record) SetHeartbeat(v Heartbeat) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Heartbeat struct, preferring placement in s's segment.
func (s View_Record) NewHeartbeat() (Heartbeat, error) {
	ss, err := NewHeartbeat(capnp.Struct(s).Segment())
	if err != nil {
		return Heartbeat{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[View_Record](l), err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (f View_Record_Future) Struct() (View_Record, error) {
	p, err := f.Future.Ptr()
	return View_Record(p.Struct()), err
}
func (p View_Record_Future) Heartbeat() Heartbeat_Future {
	return Heartbeat_Future{Future: p.Future.Field(1, nil)}
}

type View_MaybeRecord capnp.Struct
type View_MaybeRecord_Which uint16

const (
	View_MaybeRecord_Which_nothing View_MaybeRecord_Which = 0
	View_MaybeRecord_Which_just    View_MaybeRecord_Which = 1
)

func (w View_MaybeRecord_Which) String() string {
	const s = "nothingjust"
	switch w {
	case View_MaybeRecord_Which_nothing:
		return s[0:7]
	case View_MaybeRecord_Which_just:
		return s[7:11]

	}
	return "View_MaybeRecord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_MaybeRecord_TypeID is the unique identifier for the type View_MaybeRecord.
const View_MaybeRecord_TypeID = 0xd6a4f298bc0e2304

func NewView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func NewRootView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func ReadRootView_MaybeRecord(msg *capnp.Message) (View_MaybeRecord, error) {
	root, err := msg.Root()
	return View_MaybeRecord(root.Struct()), err
}

func (s View_MaybeRecord) String() string {
	str, _ := text.Marshal(0xd6a4f298bc0e2304, capnp.Struct(s))
	return str
}

func (s View_MaybeRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_MaybeRecord) DecodeFromPtr(p capnp.Ptr) View_MaybeRecord {
	return View_MaybeRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_MaybeRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_MaybeRecord) Which() View_MaybeRecord_Which {
	return View_MaybeRecord_Which(capnp.Struct(s).Uint16(0))
}
func (s View_MaybeRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_MaybeRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_MaybeRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_MaybeRecord) SetNothing() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_MaybeRecord) Just() (View_Record, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != just")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_MaybeRecord) HasJust() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_MaybeRecord) SetJust(v View_Record) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJust sets the just field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_MaybeRecord) NewJust() (View_Record, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_MaybeRecord_List is a list of View_MaybeRecord.
type View_MaybeRecord_List = capnp.StructList[View_MaybeRecord]

// NewView_MaybeRecord creates a new list of View_MaybeRecord.
func NewView_MaybeRecord_List(s *capnp.Segment, sz int32) (View_MaybeRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_MaybeRecord](l), err
}

// View_MaybeRecord_Future is a wrapper for a View_MaybeRecord promised by a client call.
type View_MaybeRecord_Future struct{ *capnp.Future }

func (f View_MaybeRecord_Future) Struct() (View_MaybeRecord, error) {
	p, err := f.Future.Ptr()
	return View_MaybeRecord(p.Struct()), err
}
func (p View_MaybeRecord_Future) Just() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Params capnp.Struct

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xd929e054f82b286c

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params(root.Struct()), err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, capnp.Struct(s))
	return str
}

func (s View_lookup_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Params) DecodeFromPtr(p capnp.Ptr) View_lookup_Params {
	return View_lookup_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Selector(p.Struct()), err
}

func (s View_lookup_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_lookup_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_lookup_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Constraint_List(p.List()), err
}

func (s View_lookup_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_lookup_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_lookup_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List = capnp.StructList[View_lookup_Params]

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[View_lookup_Params](l), err
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (f View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	p, err := f.Future.Ptr()
	return View_lookup_Params(p.Struct()), err
}
func (p View_lookup_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Results capnp.Struct

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe6df611247a8fc13

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results(root.Struct()), err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, capnp.Struct(s))
	return str
}

func (s View_lookup_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Results) DecodeFromPtr(p capnp.Ptr) View_lookup_Results {
	return View_lookup_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_lookup_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_lookup_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List = capnp.StructList[View_lookup_Results]

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Results](l), err
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (f View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	p, err := f.Future.Ptr()
	return View_lookup_Results(p.Struct()), err
}
func (p View_lookup_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_iter_Params capnp.Struct

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xf495a555c9344000

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params(root.Struct()), err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, capnp.Struct(s))
	return str
}

func (s View_iter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Params) DecodeFromPtr(p capnp.Ptr) View_iter_Params {
	return View_iter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_iter_Params) Handler() View_Handler {
	p, _ := capnp.Struct(s).Ptr(0)
	return View_Handler(p.Interface().Client())
}

func (s View_iter_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s View_iter_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Selector(p.Struct()), err
}

func (s View_iter_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_iter_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_iter_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_iter_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return View_Constraint_List(p.List()), err
}

func (s View_iter_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s View_iter_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_iter_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[View_iter_Params](l), err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (f View_iter_Params_Future) Struct() (View_iter_Params, error) {
	p, err := f.Future.Ptr()
	return View_iter_Params(p.Struct()), err
}
func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler(p.Future.Field(0, nil).Client())
}

func (p View_iter_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(1, nil)}
}

type View_iter_Results capnp.Struct

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results(root.Struct()), err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, capnp.Struct(s))
	return str
}

func (s View_iter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Results) DecodeFromPtr(p capnp.Ptr) View_iter_Results {
	return View_iter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results](l), err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (f View_iter_Results_Future) Struct() (View_iter_Results, error) {
	p, err := f.Future.Ptr()
	return View_iter_Results(p.Struct()), err
}

type View_reverse_Params capnp.Struct

// View_reverse_Params_TypeID is the unique identifier for the type View_reverse_Params.
const View_reverse_Params_TypeID = 0x8b1fd983f1df482d

func NewView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func NewRootView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func ReadRootView_reverse_Params(msg *capnp.Message) (View_reverse_Params, error) {
	root, err := msg.Root()
	return View_reverse_Params(root.Struct()), err
}

func (s View_reverse_Params) String() string {
	str, _ := text.Marshal(0x8b1fd983f1df482d, capnp.Struct(s))
	return str
}

func (s View_reverse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Params) DecodeFromPtr(p capnp.Ptr) View_reverse_Params {
	return View_reverse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_reverse_Params_List is a list of View_reverse_Params.
type View_reverse_Params_List = capnp.StructList[View_reverse_Params]

// NewView_reverse_Params creates a new list of View_reverse_Params.
func NewView_reverse_Params_List(s *capnp.Segment, sz int32) (View_reverse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_reverse_Params](l), err
}

// View_reverse_Params_Future is a wrapper for a View_reverse_Params promised by a client call.
type View_reverse_Params_Future struct{ *capnp.Future }

func (f View_reverse_Params_Future) Struct() (View_reverse_Params, error) {
	p, err := f.Future.Ptr()
	return View_reverse_Params(p.Struct()), err
}

type View_reverse_Results capnp.Struct

// View_reverse_Results_TypeID is the unique identifier for the type View_reverse_Results.
const View_reverse_Results_TypeID = 0xcc7efefbb528cd6c

func NewView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func NewRootView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func ReadRootView_reverse_Results(msg *capnp.Message) (View_reverse_Results, error) {
	root, err := msg.Root()
	return View_reverse_Results(root.Struct()), err
}

func (s View_reverse_Results) String() string {
	str, _ := text.Marshal(0xcc7efefbb528cd6c, capnp.Struct(s))
	return str
}

func (s View_reverse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Results) DecodeFromPtr(p capnp.Ptr) View_reverse_Results {
	return View_reverse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_reverse_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s View_reverse_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_reverse_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_reverse_Results_List is a list of View_reverse_Results.
type View_reverse_Results_List = capnp.StructList[View_reverse_Results]

// NewView_reverse_Results creates a new list of View_reverse_Results.
func NewView_reverse_Results_List(s *capnp.Segment, sz int32) (View_reverse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_reverse_Results](l), err
}

// View_reverse_Results_Future is a wrapper for a View_reverse_Results promised by a client call.
type View_reverse_Results_Future struct{ *capnp.Future }

func (f View_reverse_Results_Future) Struct() (View_reverse_Results, error) {
	p, err := f.Future.Ptr()
	return View_reverse_Results(p.Struct()), err
}
func (p View_reverse_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

type AuthProvider capnp.Client

// AuthProvider_TypeID is the unique identifier for the type AuthProvider.
const AuthProvider_TypeID = 0x9c8a0c56d217e9de

func (c AuthProvider) Provide(ctx context.Context, params func(AuthProvider_provide_Params) error) (AuthProvider_provide_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c8a0c56d217e9de,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AuthProvider",
			MethodName:    "provide",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AuthProvider_provide_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AuthProvider_provide_Results_Future{Future: ans.Future()}, release

}

func (c AuthProvider) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AuthProvider) String() string {
	return "AuthProvider(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AuthProvider) AddRef() AuthProvider {
	return AuthProvider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AuthProvider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AuthProvider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AuthProvider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AuthProvider) DecodeFromPtr(p capnp.Ptr) AuthProvider {
	return AuthProvider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AuthProvider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AuthProvider) IsSame(other AuthProvider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AuthProvider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AuthProvider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AuthProvider_Server is a AuthProvider with a local implementation.
type AuthProvider_Server interface {
	Provide(context.Context, AuthProvider_provide) error
}

// AuthProvider_NewServer creates a new Server from an implementation of AuthProvider_Server.
func AuthProvider_NewServer(s AuthProvider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AuthProvider_Methods(nil, s), s, c)
}

// AuthProvider_ServerToClient creates a new Client from an implementation of AuthProvider_Server.
// The caller is responsible for calling Release on the returned Client.
func AuthProvider_ServerToClient(s AuthProvider_Server) AuthProvider {
	return AuthProvider(capnp.NewClient(AuthProvider_NewServer(s)))
}

// AuthProvider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AuthProvider_Methods(methods []server.Method, s AuthProvider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c8a0c56d217e9de,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AuthProvider",
			MethodName:    "provide",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Provide(ctx, AuthProvider_provide{call})
		},
	})

	return methods
}

// AuthProvider_provide holds the state for a server call to AuthProvider.provide.
// See server.Call for documentation.
type AuthProvider_provide struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AuthProvider_provide) Args() AuthProvider_provide_Params {
	return AuthProvider_provide_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AuthProvider_provide) AllocResults() (AuthProvider_provide_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AuthProvider_provide_Results(r), err
}

// AuthProvider_List is a list of AuthProvider.
type AuthProvider_List = capnp.CapList[AuthProvider]

// NewAuthProvider creates a new list of AuthProvider.
func NewAuthProvider_List(s *capnp.Segment, sz int32) (AuthProvider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AuthProvider](l), err
}

type AuthProvider_provide_Params capnp.Struct

// AuthProvider_provide_Params_TypeID is the unique identifier for the type AuthProvider_provide_Params.
const AuthProvider_provide_Params_TypeID = 0xc0054a1048274361

func NewAuthProvider_provide_Params(s *capnp.Segment) (AuthProvider_provide_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AuthProvider_provide_Params(st), err
}

func NewRootAuthProvider_provide_Params(s *capnp.Segment) (AuthProvider_provide_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AuthProvider_provide_Params(st), err
}

func ReadRootAuthProvider_provide_Params(msg *capnp.Message) (AuthProvider_provide_Params, error) {
	root, err := msg.Root()
	return AuthProvider_provide_Params(root.Struct()), err
}

func (s AuthProvider_provide_Params) String() string {
	str, _ := text.Marshal(0xc0054a1048274361, capnp.Struct(s))
	return str
}

func (s AuthProvider_provide_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthProvider_provide_Params) DecodeFromPtr(p capnp.Ptr) AuthProvider_provide_Params {
	return AuthProvider_provide_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthProvider_provide_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthProvider_provide_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthProvider_provide_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthProvider_provide_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthProvider_provide_Params) Account() Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Signer(p.Interface().Client())
}

func (s AuthProvider_provide_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AuthProvider_provide_Params) SetAccount(v Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AuthProvider_provide_Params_List is a list of AuthProvider_provide_Params.
type AuthProvider_provide_Params_List = capnp.StructList[AuthProvider_provide_Params]

// NewAuthProvider_provide_Params creates a new list of AuthProvider_provide_Params.
func NewAuthProvider_provide_Params_List(s *capnp.Segment, sz int32) (AuthProvider_provide_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AuthProvider_provide_Params](l), err
}

// AuthProvider_provide_Params_Future is a wrapper for a AuthProvider_provide_Params promised by a client call.
type AuthProvider_provide_Params_Future struct{ *capnp.Future }

func (f AuthProvider_provide_Params_Future) Struct() (AuthProvider_provide_Params, error) {
	p, err := f.Future.Ptr()
	return AuthProvider_provide_Params(p.Struct()), err
}
func (p AuthProvider_provide_Params_Future) Account() Signer {
	return Signer(p.Future.Field(0, nil).Client())
}

type AuthProvider_provide_Results capnp.Struct

// AuthProvider_provide_Results_TypeID is the unique identifier for the type AuthProvider_provide_Results.
const AuthProvider_provide_Results_TypeID = 0xb85d303fbd29edc8

func NewAuthProvider_provide_Results(s *capnp.Segment) (AuthProvider_provide_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AuthProvider_provide_Results(st), err
}

func NewRootAuthProvider_provide_Results(s *capnp.Segment) (AuthProvider_provide_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return AuthProvider_provide_Results(st), err
}

func ReadRootAuthProvider_provide_Results(msg *capnp.Message) (AuthProvider_provide_Results, error) {
	root, err := msg.Root()
	return AuthProvider_provide_Results(root.Struct()), err
}

func (s AuthProvider_provide_Results) String() string {
	str, _ := text.Marshal(0xb85d303fbd29edc8, capnp.Struct(s))
	return str
}

func (s AuthProvider_provide_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthProvider_provide_Results) DecodeFromPtr(p capnp.Ptr) AuthProvider_provide_Results {
	return AuthProvider_provide_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthProvider_provide_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthProvider_provide_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthProvider_provide_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthProvider_provide_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthProvider_provide_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s AuthProvider_provide_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AuthProvider_provide_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s AuthProvider_provide_Results) PubSub() pubsub.Router {
	p, _ := capnp.Struct(s).Ptr(1)
	return pubsub.Router(p.Interface().Client())
}

func (s AuthProvider_provide_Results) HasPubSub() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AuthProvider_provide_Results) SetPubSub(v pubsub.Router) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s AuthProvider_provide_Results) Root() anchor.Anchor {
	p, _ := capnp.Struct(s).Ptr(2)
	return anchor.Anchor(p.Interface().Client())
}

func (s AuthProvider_provide_Results) HasRoot() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AuthProvider_provide_Results) SetRoot(v anchor.Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// AuthProvider_provide_Results_List is a list of AuthProvider_provide_Results.
type AuthProvider_provide_Results_List = capnp.StructList[AuthProvider_provide_Results]

// NewAuthProvider_provide_Results creates a new list of AuthProvider_provide_Results.
func NewAuthProvider_provide_Results_List(s *capnp.Segment, sz int32) (AuthProvider_provide_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[AuthProvider_provide_Results](l), err
}

// AuthProvider_provide_Results_Future is a wrapper for a AuthProvider_provide_Results promised by a client call.
type AuthProvider_provide_Results_Future struct{ *capnp.Future }

func (f AuthProvider_provide_Results_Future) Struct() (AuthProvider_provide_Results, error) {
	p, err := f.Future.Ptr()
	return AuthProvider_provide_Results(p.Struct()), err
}
func (p AuthProvider_provide_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

func (p AuthProvider_provide_Results_Future) PubSub() pubsub.Router {
	return pubsub.Router(p.Future.Field(1, nil).Client())
}

func (p AuthProvider_provide_Results_Future) Root() anchor.Anchor {
	return anchor.Anchor(p.Future.Field(2, nil).Client())
}

type Signer capnp.Client

// Signer_TypeID is the unique identifier for the type Signer.
const Signer_TypeID = 0xf1f2e144cec1f2bc

func (c Signer) Sign(ctx context.Context, params func(Signer_sign_Params) error) (Signer_sign_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1f2e144cec1f2bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Signer",
			MethodName:    "sign",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Signer_sign_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Signer_sign_Results_Future{Future: ans.Future()}, release

}

func (c Signer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Signer) String() string {
	return "Signer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Signer) AddRef() Signer {
	return Signer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Signer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Signer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Signer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Signer) DecodeFromPtr(p capnp.Ptr) Signer {
	return Signer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Signer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Signer) IsSame(other Signer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Signer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Signer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Signer_Server is a Signer with a local implementation.
type Signer_Server interface {
	Sign(context.Context, Signer_sign) error
}

// Signer_NewServer creates a new Server from an implementation of Signer_Server.
func Signer_NewServer(s Signer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Signer_Methods(nil, s), s, c)
}

// Signer_ServerToClient creates a new Client from an implementation of Signer_Server.
// The caller is responsible for calling Release on the returned Client.
func Signer_ServerToClient(s Signer_Server) Signer {
	return Signer(capnp.NewClient(Signer_NewServer(s)))
}

// Signer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Signer_Methods(methods []server.Method, s Signer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1f2e144cec1f2bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Signer",
			MethodName:    "sign",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sign(ctx, Signer_sign{call})
		},
	})

	return methods
}

// Signer_sign holds the state for a server call to Signer.sign.
// See server.Call for documentation.
type Signer_sign struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Signer_sign) Args() Signer_sign_Params {
	return Signer_sign_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Signer_sign) AllocResults() (Signer_sign_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(r), err
}

// Signer_List is a list of Signer.
type Signer_List = capnp.CapList[Signer]

// NewSigner creates a new list of Signer.
func NewSigner_List(s *capnp.Segment, sz int32) (Signer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Signer](l), err
}

type Signer_sign_Params capnp.Struct

// Signer_sign_Params_TypeID is the unique identifier for the type Signer_sign_Params.
const Signer_sign_Params_TypeID = 0xb2250c16d3064727

func NewSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func NewRootSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func ReadRootSigner_sign_Params(msg *capnp.Message) (Signer_sign_Params, error) {
	root, err := msg.Root()
	return Signer_sign_Params(root.Struct()), err
}

func (s Signer_sign_Params) String() string {
	str, _ := text.Marshal(0xb2250c16d3064727, capnp.Struct(s))
	return str
}

func (s Signer_sign_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Params) DecodeFromPtr(p capnp.Ptr) Signer_sign_Params {
	return Signer_sign_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Params) Challenge() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Params) HasChallenge() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Params) SetChallenge(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Params_List is a list of Signer_sign_Params.
type Signer_sign_Params_List = capnp.StructList[Signer_sign_Params]

// NewSigner_sign_Params creates a new list of Signer_sign_Params.
func NewSigner_sign_Params_List(s *capnp.Segment, sz int32) (Signer_sign_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Params](l), err
}

// Signer_sign_Params_Future is a wrapper for a Signer_sign_Params promised by a client call.
type Signer_sign_Params_Future struct{ *capnp.Future }

func (f Signer_sign_Params_Future) Struct() (Signer_sign_Params, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Params(p.Struct()), err
}

type Signer_sign_Results capnp.Struct

// Signer_sign_Results_TypeID is the unique identifier for the type Signer_sign_Results.
const Signer_sign_Results_TypeID = 0xf00b0072c6dcfae7

func NewSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func NewRootSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func ReadRootSigner_sign_Results(msg *capnp.Message) (Signer_sign_Results, error) {
	root, err := msg.Root()
	return Signer_sign_Results(root.Struct()), err
}

func (s Signer_sign_Results) String() string {
	str, _ := text.Marshal(0xf00b0072c6dcfae7, capnp.Struct(s))
	return str
}

func (s Signer_sign_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Results) DecodeFromPtr(p capnp.Ptr) Signer_sign_Results {
	return Signer_sign_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Results) Signed() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Results) HasSigned() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Results) SetSigned(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Results_List is a list of Signer_sign_Results.
type Signer_sign_Results_List = capnp.StructList[Signer_sign_Results]

// NewSigner_sign_Results creates a new list of Signer_sign_Results.
func NewSigner_sign_Results_List(s *capnp.Segment, sz int32) (Signer_sign_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Results](l), err
}

// Signer_sign_Results_Future is a wrapper for a Signer_sign_Results promised by a client call.
type Signer_sign_Results_Future struct{ *capnp.Future }

func (f Signer_sign_Results_Future) Struct() (Signer_sign_Results, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Results(p.Struct()), err
}

const schema_fcf6ac08e448a6ac = "x\xda\xacX\x7fpTW\x15>\xe7\xbe\xb7\xbc I" +
	"6w\xef\x86\x84\xcd\xd4PJ,\x89C\x86\x96\x8e\x0e" +
	"\x19\x99,)\x91\x10a&/iQ\x99b\xfb\xb2y" +
	"MV7\xbb\xe1\xbd\xb7\x01f\x8a1\xb5(\xd0\x16\xb5" +
	"\x8aS\x18\x8b\x83C:\x82\xadLQZ\xb1\x85)\x9d" +
	"\xb1J\x85:B\xab\xa5S\x8b\xed\xd0v:#\x94F" +
	"K-\x06\x9es\xef\xfb\x99\xdd%\x99q\x1c\xfe\xd9\xec" +
	";\xef\xbb\xe7|\xf7;\xdf9\xcb\"\xb3,)\xdfR" +
	"1\xd2\x00\xa4\xe7\xd7\x18\x99a\x1f{\xe6\xe2;7-" +
	"x\xf0~\xa0\x0c\x01d\x05\x80\x8d\xc5\xae\x80l\xff3" +
	"5~\xe9\xd3;\xfe\xb1-x\xb0x[,\x81 \xdb" +
	"\xbb\xe7O\xac]|\xe9\x86\xed@+%\xfb\x89\xc7;" +
	"\xce\x97=qy\x02\x00\xd9\xfa\xd8n\xb6)\xd6\x0f\xc0" +
	"N\xc4~\xcf\x961\x05\xc0^\xd8q\xee\xc3o\x9f\xad" +
	"\x7f0\x04\xd3\xc8b\x1c\xe6\xe8\x9e\xfdO\xbf<xd" +
	"\x07\xd0:\x04\x88 \x7fDY\x0b\x02\xb29\xac\x15\xd0" +
	"\xfe\xe8\x95U[v<\xf2\x95\xef9\xaf:\x01K\x18" +
	"\xe1\x01KE\x80r\xe6\xee\xbe\x89c\xf7\xed,Jd" +
	"\x1d\xdb\xcdt~\xfcb\x8d}\x17\xd9\xba8\xcf\xe4\xb5" +
	"3[\xef\xdf{\xeb\xa1]a\xb8\xf6\xf8<\x0e\xb7:" +
	"\xce\xe1\xde|\xbf\xe6\xf4\x9a\xf2\xed?)\xae+\xfe:" +
	"\xdb\xcc1\xd8\xa6\xf8\x0a\xb6W\xa0\x91\x1fG\x9e\xfdd" +
	"\xee\xe8\x9e0\xda6\x07\xed\x07\x02m\xeb\xd8W\x1fZ" +
	"\xf4\xc8\x81=\xa1\xc2\x0f\xc7\x05\x7f\xe7\x8f\xe4{\xbe\xf4" +
	"\x82\xbc/D\xf9cqN\xf9\xdc\x8f?\xf7\xa8\xb2\xde" +
	"\xda\x0fj%\x92 \x83\x08\xe1!\xa3\xf1\x17\xd86\x91" +
	"\xc4\x96\xf8{\x80v\xcf\xc9\xcb\xbds\x97\xb2_\x80\xca" +
	"\x90\x04w\xd2\x8e\x0aA\x99\xa5\xab\xc7Y\xbe\x9aG\xaf" +
	"\xaf\xde\x00ho\xffs\xec\x99\x8f\x7fJ\x0e\xf1h\x9c" +
	"\x14-\x01\xb0S\xd5o\xb3\xb3\"\xfa\xd5\xea\x83\x80\xf6" +
	"\xcd+f\x9c\x99]\xdep\x08h\xb5_\xdc\xe0\xecO" +
	"\xf1\xe2\xf2\xb3yq\x7f\xb8\xd0x\xb4u\xd1\xba\xdf\xb8" +
	"w'\xf1\x80]\xb3\xd7\xf2\x80\xb1\xd9\x1c\xa1Q\x8e\xfe" +
	"R\xba\xa7\xf6X\x98\x9e\xa55\x82\x9e\xf6\x1a\x8e\xd0\xbd" +
	"\xea\xb5\xc6\x0b\xf1\x9ec!z\xd25\x82\x1e\xed\xf6\x9b" +
	";\xaa:#\xcf\x87u\xa1\xd6t\xf3W\xd7\x89Wg" +
	"\xb5\x7fy\xdf\x96\xbb\x9e})\x8c\xbd\xb9F\xe8bT" +
	"\x04\x8c]~\xe53'\xe5\x85'\x8b\x8b\x95\x11\xd9\xde" +
	"\x9a\x97\xd8\x935\xfc\xa5\xfd5\xf5\x08hgN-8" +
	"\xfc\x9fk\xdf<\x19\xc6;R\x9b\xe0x\xc7k9\xde" +
	"\xdc\xcd=\x87\x8e\xb5\xfd\xe9T\x01\xd5\xce\xbd\xbcU{" +
	"\x9a]\xa8\xe5\x9f\xde\xaf\xe5\xf7\"\xdfT\xf9\xdc\xa3\xe3" +
	"\xfb\xfeR|8\x01`\xc7\xe7\\a\xa7\xe6\xf0\xe8\x13" +
	"s\xf8\xbdd\x16|\xf6\xdfw\xfc\xbd\xf1\xac{6G" +
	"\\\xdc\x90\x10L/L\xf0\x80\x8b\x953?\xca\x7f\xb2" +
	"\xf5\x8dpr{\x131\x1e\xb0?\xc1\x93\xfb\xe0\xaf\xf5" +
	"O/?\xd9\xf9N\x88\xc8\x13\x09\xc2\x89\xdcu`\"" +
	"\x92\x9fw8\xfc\xe4I\x0e-\xdbl\xe2\xe7+b\xda" +
	"\xb9w\xc3\xa0;\x1d\xd0\xc7\x04\xa8\xf4\x85\x9f\x1dJ=" +
	"\xfe\xc3\x8b@\x99\x14\xd4\x00\xc8\x8e&^g'\x12<" +
	"\xff\xdf%V\xb0\x0b\xfc\xd3\xb9\xf7\xae\xbc\xf1\xa21\xeb" +
	"RH+\xaf:X\x7f\x13X\xcf\x8d\x1f\x7fy\xf9[" +
	"\xe3\x1f\x16\xb5\xd5\xd5\xc4\x01\x16\xa9\xe3XX\xb7\x825" +
	"\xf2O\xd7\x92\xb7\x9d\xb8sl\xe7\xbf\x9c\xbc\xb8\xac\x18" +
	"\xad\xbb\x02\xc8\xaa\xeb\x0e\x82-\xfe\xb5\xd8\xa9L\xde\xb4" +
	"t\xa3\x99\xa4\xb4\xa1\xecPKG\xce\xb4\x9a\x8d\\\xce" +
	"\x9a\xdf\xda\xa5\x19\xda\xa0\xe9\x07H\xe1\x00\xbd?mZ" +
	"\xc6\xa6\xf9<F\x0a\x05\xa1\x13\xb4&-\xe9\x1b\xd4Z" +
	"\x0c\xd7\xde\xd8\x16\xf4\x0dm\xe8\x0cZ\x8e6\xac\x0dD" +
	"F\x1bn\x0d\x14Bol\x09\x14@o\xe8\x1d\xe9\xd0" +
	"\xb2}\x19\xdd\xb0{\xf4\x8c\x9e\xb2r\x06\x00\xd8\xb7\xe7" +
	"\xb2\xa6ehi\x90\xb2V\xfd\xcal\x9f\xbe\xb1\xb5[" +
	"O\xe5\x8c>{\xb5\xb6\xa9W\xef\xd6S\xa0\xe4\x8c>" +
	"\xb5\\\x8a\x00\xf8\x12A\xef\xd6\xa8\xda\x02\x84\xb6+\x88" +
	"\x1e]!\x11,i\x02B\x17*H|\xe7EO\xdf" +
	"\xf4\xc66 \xb4Zi\xcd\xe4r\xdf\xc8\x0f%1\x9a" +
	"\xb6t#\x89#\x86>\xac\x1b\xa6\x9e\xc4.\xc4B\xf2" +
	"\xd6\xa4\xf5\x0d\xcdn\x80\xe0n\x10\xcd\x921n\xa1\xcd" +
	"\x86\x9e\x1a\xf6nB\x95%\x19@F\x00Z\xd1\x02\xa0" +
	"\x96I\xa8\xc6\x09\xb6\x1a\xa2Z\xac\x0ax\x03\xc4*\xc0" +
	"\x9277\x9c\xd67\xcc\xef\xd6\xcd|\xc62!\x8c\xd8" +
	"\x14 Fy\x10\xd2\xb0T\x91\x86\xf0\xd0\xc3\x93L\xab" +
	"\x0bQ\xad\x15\xcczF\x8c\xde\xa4\xa1Oq\xf6\xc6\x14" +
	"D\xbfy\xd0k@\xba\x8b\xb3\xfe0g\xd6\x9b\x99\xe8" +
	"9\x11\x1d\xe5\xef\xe5\x15\x94\xfc\xb1\x89\x9e\x03\xd2t'" +
	"\x10\xaa)(\xfb\x9e\x87\xde\xf0\xa0w\xf2g\xab\x15\x8c" +
	"\xf8\xe3\x02\xbd1E\x97\xf1gK\x14QZ\x12[\x87" +
	"\xf2\xbd=\xf9\xde$F\xb9\xd4\x93h{\x82\x06\x80$" +
	"\xda\xfaF=\x95w\xe4\x95D;\xa5\x0d\xf5X9C" +
	"\x17\x7f\x95\xb8T\xc1\xab\x17$\xb8U2\xd6\xa4\xdb\xea" +
	"\x04P\xcb%Tk\xc9$4\xa4\xf6\x8b\xed\x1fl\xff" +
	"\xce\xac\xb1\xb7\x0b)v\xbbqY\xde\x1a\xe82r\xc3" +
	"\xe9>I78\xd5\xb2\xa0\xda3u\xf4&\x07\xa5\\" +
	"\x8c\x11edH\x04\xeb\xd7\xcf\xd3+m\xda<C\x1c" +
	" \xb5O\xe7G\xc7~\xfb\xb5\xe6\x83\x85y\x96\xa4\xa0" +
	"\xd0\x14H\xa1\xfe\x0a\xad\xc5\x0b\xd05\xc3\xea\xd55\x0b" +
	"x\xa9U~^\xda<\x00\xf5.\x09\xd5\x01\x82\x141" +
	"\x8e\xfcK\x9d\xb7\xc0=\x12\xaa\x19\x82H\xe2H\x00h" +
	"\x9a\x8b\xb8OBu\x88 \x950\x8e\x12\x00\x1d\xe4_" +
	"\x0eH\xa8>@P\xb1\xac\x0c\x96\x01\xc12\xc0VS" +
	"7\x86u\x03g\x02\xc1\x99\x80\xd1\x81\x9cia9\x10" +
	",\x07\x8c\x0e\xea\x96\x86\x95\x80]\x12\x8a\xef*\x8b\xef" +
	"F\xf4\xa90\x9fzCKgE'\x94Ir\xb9m" +
	"\x8b\xa4\x1bo\x05P\xe7K\xa8.\"X\x81\xd7l'" +
	"\xeb\x85\x09\x00u\x81\x84\xeam\x04\xeb3\xe9\xc1\xb4\xe5" +
	"\x9d/Y9\xac\x0a|\xb0\xa0\x85\xc3g\x0a\xf3S\xac" +
	"\x9c\x10Dypb;\xa7))\xa1\xba*|\xe2J" +
	"\x9e\xc7r\x09\xd5.\x82\x15\xe4\xaa\xed0\xb5\x9a\x93\xd2" +
	"!\xa1z\x07AE\xcbd`F\xfd\xa0f\xa5\x06\x8a" +
	"S\x88\xdek\xe4\x06\xa7\xc8\xccU@O\xba?\xab\x1b" +
	"\xcdf\xba?\xeb\x18\x9b\x09\x93\xec\xa5;\xdc\x02\x03Z" +
	"&\xa3g\xfb\x01u\xac\x00\x82\x15!8\xb9P\xf8\xba" +
	"\xd1\xec\x8a\xda\xb1-\xc92y\xd1.n{SP\xb3" +
	"/\x8d\x95-A\xc9\x94\x90\xe2\x8a\xafcp\xae+ " +
	"\xb5[r\xc3u\xef\xfe\xaa\xebM\xf7\x81p\x09\xa4\xf6" +
	"\xbc\xb3;f\x9e\xff|\xec\xfcT]\xe0\x8f\xc6\xe9\x1a" +
	",d9H\xed/\xfeqS*\xa7\\\xbc:\x15\xb4" +
	"\xdf\xbb\x85\x0d6\x15i\xee\x94\x09g\xd1\x16X\xfd\x88" +
	"\x96J\xe5\xf2Y^\x9c\xbfYLU\x1c_\x0c\xa6\x9b" +
	"\x1e\xd3\x90\x15\x96\xb2\x18\xd7 \xda=\xee\x83m\xe6\xd7" +
	"\xb7\xd1i\xd8\x0a\xb4]\x1d\x8f\xf2#\xee\x93P\xdd\xca" +
	"u|\xcd\xd5\xf1\x16\x1e\xfb-\x09\xd5\x87\x08VH\\" +
	"\xdd\xbc\xe5\xb7\xf1\xd8\x07$T\xbfO\xb0B\x9e\xb0\xe3" +
	"(\x03\xd0\x87\xf9\xb7[%T\x7fD\xb0u\xc8\xd0\xef" +
	"MoD\x04\x82\x08\x18\x1d\xd2u\xc3k~\xcf\x18\\" +
	"i\x960\x06\xf7\x8f)\xa7\xbb/\xd6\xffm\xc6\x86Y" +
	"\x12\xeb\x0c\xf6\x15\x98bS`\x8a\xa5<\x91\x12tM" +
	"q^)S\xe4\xfd\x98\x91P\xddHJ\x17\xef\xba\x92" +
	"b\xea\xeb\xbd\xcf\xf6\x80\xeb\xcf\x80\x16\xdf6\xbc\xdfW" +
	"SX\x95\xd8\xc0\xdcu\xac\xd0\x1f\xdbJ\xfacS\xe0" +
	"\x8f#\xd9\x9c5\x90\xce\xf6\xc3\x8c\xe8\xd7\xf3\xa65\xfd" +
	"\x82#\x8et\xd6\xb1\xc0\x83\xca|\xc6\x1a;\x03l\xdf" +
	"+n\xe9\x05P\x179\x06b\x9b\xc1Z\x89U\xc1\xb6" +
	"\xea\x9d\xe6-\x9aJ\xd62\xbd\xe1P\x15\xec\xb1\x80\x93" +
	"\xc6D\xb8o\x1ccq;\x07\xaf\xbb\xc9]\xcf\x7f|" +
	"L%T(_7\xfd^\xf4\x02\x8a\xcf\xf4\x88\x98\x8a" +
	"\xac\xe9\xf22\x9c\xe7U\xc12>\xc5\x9d\x8b\xd5u\xd2" +
	"\xba\xe2\xfd\xdf\x04f\x9fz~\xc3\xe2\xddw\xef\xa2\xb4" +
	"I\xac+Q\xbe\xde\x96\xdcU\xc2\xe3d\xba\xecx\x90" +
	"\xdeW4I\xd0C\x8ar\xa8 \x1b\xef\xe78\x8a_" +
	"Z0\xeb\x92\x9f\x0d\x07\x9a\x9c\x0d)\xe4\xdb[\xc5C" +
	"\x13\xa8\xad\xd4\x04\xea\x0c\x86\x8d?\x81T.\xb5.\xa7" +
	";G\x06\x9c\x05\x1fi\xf0\x0b\xc9\xbd\xeb\xff\x87\x08\xff" +
	"\x1b\x00\x00\xff\xff\xe0{3\x90"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fcf6ac08e448a6ac,
		Nodes: []uint64{
			0x828b2823e5eeb7be,
			0x89ec8e1ef0f263f3,
			0x8a1df0335afc249a,
			0x8b1fd983f1df482d,
			0x8eb96dceb6a99ebd,
			0x8f58928e854cd4f5,
			0x957cbefc645fd307,
			0x99b232a18288d3d8,
			0x9c8a0c56d217e9de,
			0x9e8120f9bb059602,
			0x9eaa92308c59a588,
			0xa404c24b5375b9e4,
			0xa97471079836f720,
			0xab133d2062f6cc53,
			0xb2029ff7b712d18a,
			0xb2250c16d3064727,
			0xb85d303fbd29edc8,
			0xbe186003ae0f0429,
			0xbe5314ed29d84c52,
			0xc0054a1048274361,
			0xcabb5c85a457450b,
			0xcc2d04cc26d4f6a5,
			0xcc7efefbb528cd6c,
			0xcdcf42beb2537d20,
			0xd6a4f298bc0e2304,
			0xd929e054f82b286c,
			0xdc88f975f5090eee,
			0xe54acc44b61fd7ef,
			0xe5b5227505fcaa99,
			0xe6df611247a8fc13,
			0xee93a663b2a23c03,
			0xf00b0072c6dcfae7,
			0xf1f2e144cec1f2bc,
			0xf495a555c9344000,
		},
		Compressed: true,
	})
}
