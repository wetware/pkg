// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	anchor "github.com/wetware/pkg/api/anchor"
	capstore "github.com/wetware/pkg/api/capstore"
	process "github.com/wetware/pkg/api/process"
	pubsub "github.com/wetware/pkg/api/pubsub"
	registry "github.com/wetware/pkg/api/registry"
	strconv "strconv"
)

type Host capnp.Client

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) View(ctx context.Context, params func(Host_view_Params) error) (Host_view_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_view_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_view_Results_Future{Future: ans.Future()}, release

}

func (c Host) PubSub(ctx context.Context, params func(Host_pubSub_Params) error) (Host_pubSub_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_pubSub_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_pubSub_Results_Future{Future: ans.Future()}, release

}

func (c Host) Root(ctx context.Context, params func(Host_root_Params) error) (Host_root_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_root_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_root_Results_Future{Future: ans.Future()}, release

}

func (c Host) Registry(ctx context.Context, params func(Host_registry_Params) error) (Host_registry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_registry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_registry_Results_Future{Future: ans.Future()}, release

}

func (c Host) Executor(ctx context.Context, params func(Host_executor_Params) error) (Host_executor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_executor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_executor_Results_Future{Future: ans.Future()}, release

}

func (c Host) CapStore(ctx context.Context, params func(Host_capStore_Params) error) (Host_capStore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "capStore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_capStore_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_capStore_Results_Future{Future: ans.Future()}, release

}

func (c Host) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Host) String() string {
	return "Host(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Host) AddRef() Host {
	return Host(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Host) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Host) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Host) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Host) DecodeFromPtr(p capnp.Ptr) Host {
	return Host(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Host) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Host) IsSame(other Host) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Host) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Host) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Host_Server is a Host with a local implementation.
type Host_Server interface {
	View(context.Context, Host_view) error

	PubSub(context.Context, Host_pubSub) error

	Root(context.Context, Host_root) error

	Registry(context.Context, Host_registry) error

	Executor(context.Context, Host_executor) error

	CapStore(context.Context, Host_capStore) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server) Host {
	return Host(capnp.NewClient(Host_NewServer(s)))
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.View(ctx, Host_view{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubSub(ctx, Host_pubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, Host_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Host_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Executor(ctx, Host_executor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "capStore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CapStore(ctx, Host_capStore{call})
		},
	})

	return methods
}

// Host_view holds the state for a server call to Host.view.
// See server.Call for documentation.
type Host_view struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_view) Args() Host_view_Params {
	return Host_view_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_view) AllocResults() (Host_view_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(r), err
}

// Host_pubSub holds the state for a server call to Host.pubSub.
// See server.Call for documentation.
type Host_pubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_pubSub) Args() Host_pubSub_Params {
	return Host_pubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_pubSub) AllocResults() (Host_pubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(r), err
}

// Host_root holds the state for a server call to Host.root.
// See server.Call for documentation.
type Host_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_root) Args() Host_root_Params {
	return Host_root_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_root) AllocResults() (Host_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(r), err
}

// Host_registry holds the state for a server call to Host.registry.
// See server.Call for documentation.
type Host_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_registry) Args() Host_registry_Params {
	return Host_registry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_registry) AllocResults() (Host_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(r), err
}

// Host_executor holds the state for a server call to Host.executor.
// See server.Call for documentation.
type Host_executor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_executor) Args() Host_executor_Params {
	return Host_executor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_executor) AllocResults() (Host_executor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(r), err
}

// Host_capStore holds the state for a server call to Host.capStore.
// See server.Call for documentation.
type Host_capStore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_capStore) Args() Host_capStore_Params {
	return Host_capStore_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_capStore) AllocResults() (Host_capStore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(r), err
}

// Host_List is a list of Host.
type Host_List = capnp.CapList[Host]

// NewHost creates a new list of Host.
func NewHost_List(s *capnp.Segment, sz int32) (Host_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Host](l), err
}

type Host_view_Params capnp.Struct

// Host_view_Params_TypeID is the unique identifier for the type Host_view_Params.
const Host_view_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func NewRootHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func ReadRootHost_view_Params(msg *capnp.Message) (Host_view_Params, error) {
	root, err := msg.Root()
	return Host_view_Params(root.Struct()), err
}

func (s Host_view_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, capnp.Struct(s))
	return str
}

func (s Host_view_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Params) DecodeFromPtr(p capnp.Ptr) Host_view_Params {
	return Host_view_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_view_Params_List is a list of Host_view_Params.
type Host_view_Params_List = capnp.StructList[Host_view_Params]

// NewHost_view_Params creates a new list of Host_view_Params.
func NewHost_view_Params_List(s *capnp.Segment, sz int32) (Host_view_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_view_Params](l), err
}

// Host_view_Params_Future is a wrapper for a Host_view_Params promised by a client call.
type Host_view_Params_Future struct{ *capnp.Future }

func (f Host_view_Params_Future) Struct() (Host_view_Params, error) {
	p, err := f.Future.Ptr()
	return Host_view_Params(p.Struct()), err
}

type Host_view_Results capnp.Struct

// Host_view_Results_TypeID is the unique identifier for the type Host_view_Results.
const Host_view_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func NewRootHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func ReadRootHost_view_Results(msg *capnp.Message) (Host_view_Results, error) {
	root, err := msg.Root()
	return Host_view_Results(root.Struct()), err
}

func (s Host_view_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, capnp.Struct(s))
	return str
}

func (s Host_view_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Results) DecodeFromPtr(p capnp.Ptr) Host_view_Results {
	return Host_view_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_view_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s Host_view_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_view_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_view_Results_List is a list of Host_view_Results.
type Host_view_Results_List = capnp.StructList[Host_view_Results]

// NewHost_view_Results creates a new list of Host_view_Results.
func NewHost_view_Results_List(s *capnp.Segment, sz int32) (Host_view_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_view_Results](l), err
}

// Host_view_Results_Future is a wrapper for a Host_view_Results promised by a client call.
type Host_view_Results_Future struct{ *capnp.Future }

func (f Host_view_Results_Future) Struct() (Host_view_Results, error) {
	p, err := f.Future.Ptr()
	return Host_view_Results(p.Struct()), err
}
func (p Host_view_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

type Host_pubSub_Params capnp.Struct

// Host_pubSub_Params_TypeID is the unique identifier for the type Host_pubSub_Params.
const Host_pubSub_Params_TypeID = 0xe5b5227505fcaa99

func NewHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func NewRootHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func ReadRootHost_pubSub_Params(msg *capnp.Message) (Host_pubSub_Params, error) {
	root, err := msg.Root()
	return Host_pubSub_Params(root.Struct()), err
}

func (s Host_pubSub_Params) String() string {
	str, _ := text.Marshal(0xe5b5227505fcaa99, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Params) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Params {
	return Host_pubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_pubSub_Params_List is a list of Host_pubSub_Params.
type Host_pubSub_Params_List = capnp.StructList[Host_pubSub_Params]

// NewHost_pubSub_Params creates a new list of Host_pubSub_Params.
func NewHost_pubSub_Params_List(s *capnp.Segment, sz int32) (Host_pubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_pubSub_Params](l), err
}

// Host_pubSub_Params_Future is a wrapper for a Host_pubSub_Params promised by a client call.
type Host_pubSub_Params_Future struct{ *capnp.Future }

func (f Host_pubSub_Params_Future) Struct() (Host_pubSub_Params, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Params(p.Struct()), err
}

type Host_pubSub_Results capnp.Struct

// Host_pubSub_Results_TypeID is the unique identifier for the type Host_pubSub_Results.
const Host_pubSub_Results_TypeID = 0xdc88f975f5090eee

func NewHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func NewRootHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func ReadRootHost_pubSub_Results(msg *capnp.Message) (Host_pubSub_Results, error) {
	root, err := msg.Root()
	return Host_pubSub_Results(root.Struct()), err
}

func (s Host_pubSub_Results) String() string {
	str, _ := text.Marshal(0xdc88f975f5090eee, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Results) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Results {
	return Host_pubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_pubSub_Results) PubSub() pubsub.Router {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Router(p.Interface().Client())
}

func (s Host_pubSub_Results) HasPubSub() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_pubSub_Results) SetPubSub(v pubsub.Router) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_pubSub_Results_List is a list of Host_pubSub_Results.
type Host_pubSub_Results_List = capnp.StructList[Host_pubSub_Results]

// NewHost_pubSub_Results creates a new list of Host_pubSub_Results.
func NewHost_pubSub_Results_List(s *capnp.Segment, sz int32) (Host_pubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_pubSub_Results](l), err
}

// Host_pubSub_Results_Future is a wrapper for a Host_pubSub_Results promised by a client call.
type Host_pubSub_Results_Future struct{ *capnp.Future }

func (f Host_pubSub_Results_Future) Struct() (Host_pubSub_Results, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Results(p.Struct()), err
}
func (p Host_pubSub_Results_Future) PubSub() pubsub.Router {
	return pubsub.Router(p.Future.Field(0, nil).Client())
}

type Host_root_Params capnp.Struct

// Host_root_Params_TypeID is the unique identifier for the type Host_root_Params.
const Host_root_Params_TypeID = 0x828b2823e5eeb7be

func NewHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func NewRootHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func ReadRootHost_root_Params(msg *capnp.Message) (Host_root_Params, error) {
	root, err := msg.Root()
	return Host_root_Params(root.Struct()), err
}

func (s Host_root_Params) String() string {
	str, _ := text.Marshal(0x828b2823e5eeb7be, capnp.Struct(s))
	return str
}

func (s Host_root_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Params) DecodeFromPtr(p capnp.Ptr) Host_root_Params {
	return Host_root_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_root_Params_List is a list of Host_root_Params.
type Host_root_Params_List = capnp.StructList[Host_root_Params]

// NewHost_root_Params creates a new list of Host_root_Params.
func NewHost_root_Params_List(s *capnp.Segment, sz int32) (Host_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_root_Params](l), err
}

// Host_root_Params_Future is a wrapper for a Host_root_Params promised by a client call.
type Host_root_Params_Future struct{ *capnp.Future }

func (f Host_root_Params_Future) Struct() (Host_root_Params, error) {
	p, err := f.Future.Ptr()
	return Host_root_Params(p.Struct()), err
}

type Host_root_Results capnp.Struct

// Host_root_Results_TypeID is the unique identifier for the type Host_root_Results.
const Host_root_Results_TypeID = 0xcabb5c85a457450b

func NewHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func NewRootHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func ReadRootHost_root_Results(msg *capnp.Message) (Host_root_Results, error) {
	root, err := msg.Root()
	return Host_root_Results(root.Struct()), err
}

func (s Host_root_Results) String() string {
	str, _ := text.Marshal(0xcabb5c85a457450b, capnp.Struct(s))
	return str
}

func (s Host_root_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Results) DecodeFromPtr(p capnp.Ptr) Host_root_Results {
	return Host_root_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_root_Results) Root() anchor.Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return anchor.Anchor(p.Interface().Client())
}

func (s Host_root_Results) HasRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_root_Results) SetRoot(v anchor.Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_root_Results_List is a list of Host_root_Results.
type Host_root_Results_List = capnp.StructList[Host_root_Results]

// NewHost_root_Results creates a new list of Host_root_Results.
func NewHost_root_Results_List(s *capnp.Segment, sz int32) (Host_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_root_Results](l), err
}

// Host_root_Results_Future is a wrapper for a Host_root_Results promised by a client call.
type Host_root_Results_Future struct{ *capnp.Future }

func (f Host_root_Results_Future) Struct() (Host_root_Results, error) {
	p, err := f.Future.Ptr()
	return Host_root_Results(p.Struct()), err
}
func (p Host_root_Results_Future) Root() anchor.Anchor {
	return anchor.Anchor(p.Future.Field(0, nil).Client())
}

type Host_registry_Params capnp.Struct

// Host_registry_Params_TypeID is the unique identifier for the type Host_registry_Params.
const Host_registry_Params_TypeID = 0x89ec8e1ef0f263f3

func NewHost_registry_Params(s *capnp.Segment) (Host_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_registry_Params(st), err
}

func NewRootHost_registry_Params(s *capnp.Segment) (Host_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_registry_Params(st), err
}

func ReadRootHost_registry_Params(msg *capnp.Message) (Host_registry_Params, error) {
	root, err := msg.Root()
	return Host_registry_Params(root.Struct()), err
}

func (s Host_registry_Params) String() string {
	str, _ := text.Marshal(0x89ec8e1ef0f263f3, capnp.Struct(s))
	return str
}

func (s Host_registry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_registry_Params) DecodeFromPtr(p capnp.Ptr) Host_registry_Params {
	return Host_registry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_registry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_registry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_registry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_registry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_registry_Params_List is a list of Host_registry_Params.
type Host_registry_Params_List = capnp.StructList[Host_registry_Params]

// NewHost_registry_Params creates a new list of Host_registry_Params.
func NewHost_registry_Params_List(s *capnp.Segment, sz int32) (Host_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_registry_Params](l), err
}

// Host_registry_Params_Future is a wrapper for a Host_registry_Params promised by a client call.
type Host_registry_Params_Future struct{ *capnp.Future }

func (f Host_registry_Params_Future) Struct() (Host_registry_Params, error) {
	p, err := f.Future.Ptr()
	return Host_registry_Params(p.Struct()), err
}

type Host_registry_Results capnp.Struct

// Host_registry_Results_TypeID is the unique identifier for the type Host_registry_Results.
const Host_registry_Results_TypeID = 0xbe186003ae0f0429

func NewHost_registry_Results(s *capnp.Segment) (Host_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(st), err
}

func NewRootHost_registry_Results(s *capnp.Segment) (Host_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_registry_Results(st), err
}

func ReadRootHost_registry_Results(msg *capnp.Message) (Host_registry_Results, error) {
	root, err := msg.Root()
	return Host_registry_Results(root.Struct()), err
}

func (s Host_registry_Results) String() string {
	str, _ := text.Marshal(0xbe186003ae0f0429, capnp.Struct(s))
	return str
}

func (s Host_registry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_registry_Results) DecodeFromPtr(p capnp.Ptr) Host_registry_Results {
	return Host_registry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_registry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_registry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_registry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_registry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_registry_Results) Registry() registry.Registry {
	p, _ := capnp.Struct(s).Ptr(0)
	return registry.Registry(p.Interface().Client())
}

func (s Host_registry_Results) HasRegistry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_registry_Results) SetRegistry(v registry.Registry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_registry_Results_List is a list of Host_registry_Results.
type Host_registry_Results_List = capnp.StructList[Host_registry_Results]

// NewHost_registry_Results creates a new list of Host_registry_Results.
func NewHost_registry_Results_List(s *capnp.Segment, sz int32) (Host_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_registry_Results](l), err
}

// Host_registry_Results_Future is a wrapper for a Host_registry_Results promised by a client call.
type Host_registry_Results_Future struct{ *capnp.Future }

func (f Host_registry_Results_Future) Struct() (Host_registry_Results, error) {
	p, err := f.Future.Ptr()
	return Host_registry_Results(p.Struct()), err
}
func (p Host_registry_Results_Future) Registry() registry.Registry {
	return registry.Registry(p.Future.Field(0, nil).Client())
}

type Host_executor_Params capnp.Struct

// Host_executor_Params_TypeID is the unique identifier for the type Host_executor_Params.
const Host_executor_Params_TypeID = 0xbe5314ed29d84c52

func NewHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func NewRootHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func ReadRootHost_executor_Params(msg *capnp.Message) (Host_executor_Params, error) {
	root, err := msg.Root()
	return Host_executor_Params(root.Struct()), err
}

func (s Host_executor_Params) String() string {
	str, _ := text.Marshal(0xbe5314ed29d84c52, capnp.Struct(s))
	return str
}

func (s Host_executor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Params) DecodeFromPtr(p capnp.Ptr) Host_executor_Params {
	return Host_executor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_executor_Params_List is a list of Host_executor_Params.
type Host_executor_Params_List = capnp.StructList[Host_executor_Params]

// NewHost_executor_Params creates a new list of Host_executor_Params.
func NewHost_executor_Params_List(s *capnp.Segment, sz int32) (Host_executor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_executor_Params](l), err
}

// Host_executor_Params_Future is a wrapper for a Host_executor_Params promised by a client call.
type Host_executor_Params_Future struct{ *capnp.Future }

func (f Host_executor_Params_Future) Struct() (Host_executor_Params, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Params(p.Struct()), err
}

type Host_executor_Results capnp.Struct

// Host_executor_Results_TypeID is the unique identifier for the type Host_executor_Results.
const Host_executor_Results_TypeID = 0x9e8120f9bb059602

func NewHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func NewRootHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func ReadRootHost_executor_Results(msg *capnp.Message) (Host_executor_Results, error) {
	root, err := msg.Root()
	return Host_executor_Results(root.Struct()), err
}

func (s Host_executor_Results) String() string {
	str, _ := text.Marshal(0x9e8120f9bb059602, capnp.Struct(s))
	return str
}

func (s Host_executor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Results) DecodeFromPtr(p capnp.Ptr) Host_executor_Results {
	return Host_executor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_executor_Results) Executor() process.Executor {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Executor(p.Interface().Client())
}

func (s Host_executor_Results) HasExecutor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_executor_Results) SetExecutor(v process.Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_executor_Results_List is a list of Host_executor_Results.
type Host_executor_Results_List = capnp.StructList[Host_executor_Results]

// NewHost_executor_Results creates a new list of Host_executor_Results.
func NewHost_executor_Results_List(s *capnp.Segment, sz int32) (Host_executor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_executor_Results](l), err
}

// Host_executor_Results_Future is a wrapper for a Host_executor_Results promised by a client call.
type Host_executor_Results_Future struct{ *capnp.Future }

func (f Host_executor_Results_Future) Struct() (Host_executor_Results, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Results(p.Struct()), err
}
func (p Host_executor_Results_Future) Executor() process.Executor {
	return process.Executor(p.Future.Field(0, nil).Client())
}

type Host_capStore_Params capnp.Struct

// Host_capStore_Params_TypeID is the unique identifier for the type Host_capStore_Params.
const Host_capStore_Params_TypeID = 0x9eaa92308c59a588

func NewHost_capStore_Params(s *capnp.Segment) (Host_capStore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_capStore_Params(st), err
}

func NewRootHost_capStore_Params(s *capnp.Segment) (Host_capStore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_capStore_Params(st), err
}

func ReadRootHost_capStore_Params(msg *capnp.Message) (Host_capStore_Params, error) {
	root, err := msg.Root()
	return Host_capStore_Params(root.Struct()), err
}

func (s Host_capStore_Params) String() string {
	str, _ := text.Marshal(0x9eaa92308c59a588, capnp.Struct(s))
	return str
}

func (s Host_capStore_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_capStore_Params) DecodeFromPtr(p capnp.Ptr) Host_capStore_Params {
	return Host_capStore_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_capStore_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_capStore_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_capStore_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_capStore_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_capStore_Params_List is a list of Host_capStore_Params.
type Host_capStore_Params_List = capnp.StructList[Host_capStore_Params]

// NewHost_capStore_Params creates a new list of Host_capStore_Params.
func NewHost_capStore_Params_List(s *capnp.Segment, sz int32) (Host_capStore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_capStore_Params](l), err
}

// Host_capStore_Params_Future is a wrapper for a Host_capStore_Params promised by a client call.
type Host_capStore_Params_Future struct{ *capnp.Future }

func (f Host_capStore_Params_Future) Struct() (Host_capStore_Params, error) {
	p, err := f.Future.Ptr()
	return Host_capStore_Params(p.Struct()), err
}

type Host_capStore_Results capnp.Struct

// Host_capStore_Results_TypeID is the unique identifier for the type Host_capStore_Results.
const Host_capStore_Results_TypeID = 0x99b232a18288d3d8

func NewHost_capStore_Results(s *capnp.Segment) (Host_capStore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(st), err
}

func NewRootHost_capStore_Results(s *capnp.Segment) (Host_capStore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_capStore_Results(st), err
}

func ReadRootHost_capStore_Results(msg *capnp.Message) (Host_capStore_Results, error) {
	root, err := msg.Root()
	return Host_capStore_Results(root.Struct()), err
}

func (s Host_capStore_Results) String() string {
	str, _ := text.Marshal(0x99b232a18288d3d8, capnp.Struct(s))
	return str
}

func (s Host_capStore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_capStore_Results) DecodeFromPtr(p capnp.Ptr) Host_capStore_Results {
	return Host_capStore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_capStore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_capStore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_capStore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_capStore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_capStore_Results) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(0)
	return capstore.CapStore(p.Interface().Client())
}

func (s Host_capStore_Results) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_capStore_Results) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_capStore_Results_List is a list of Host_capStore_Results.
type Host_capStore_Results_List = capnp.StructList[Host_capStore_Results]

// NewHost_capStore_Results creates a new list of Host_capStore_Results.
func NewHost_capStore_Results_List(s *capnp.Segment, sz int32) (Host_capStore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_capStore_Results](l), err
}

// Host_capStore_Results_Future is a wrapper for a Host_capStore_Results promised by a client call.
type Host_capStore_Results_Future struct{ *capnp.Future }

func (f Host_capStore_Results_Future) Struct() (Host_capStore_Results, error) {
	p, err := f.Future.Ptr()
	return Host_capStore_Results(p.Struct()), err
}
func (p Host_capStore_Results_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(0, nil).Client())
}

type Heartbeat capnp.Struct

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0xa97471079836f720

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0xa97471079836f720, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Heartbeat) SetTtl(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Heartbeat) Server() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Heartbeat) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Heartbeat) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Heartbeat) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Heartbeat) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Heartbeat) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (f Heartbeat_Future) Struct() (Heartbeat, error) {
	p, err := f.Future.Ptr()
	return Heartbeat(p.Struct()), err
}

type View capnp.Client

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release

}

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release

}

func (c View) Reverse(ctx context.Context, params func(View_reverse_Params) error) (View_reverse_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      2,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "reverse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_reverse_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_reverse_Results_Future{Future: ans.Future()}, release

}

func (c View) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View) String() string {
	return "View(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View) AddRef() View {
	return View(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View) DecodeFromPtr(p capnp.Ptr) View {
	return View(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View) IsSame(other View) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Lookup(context.Context, View_lookup) error

	Iter(context.Context, View_iter) error

	Reverse(context.Context, View_reverse) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server) View {
	return View(capnp.NewClient(View_NewServer(s)))
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      2,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "reverse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reverse(ctx, View_reverse{call})
		},
	})

	return methods
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(r), err
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(r), err
}

// View_reverse holds the state for a server call to View.reverse.
// See server.Call for documentation.
type View_reverse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_reverse) Args() View_reverse_Params {
	return View_reverse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_reverse) AllocResults() (View_reverse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(r), err
}

// View_List is a list of View.
type View_List = capnp.CapList[View]

// NewView creates a new list of View.
func NewView_List(s *capnp.Segment, sz int32) (View_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View](l), err
}

type View_Handler capnp.Client

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Recv(ctx context.Context, params func(View_Handler_recv_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "recv",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_recv_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c View_Handler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View_Handler) String() string {
	return "View_Handler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View_Handler) AddRef() View_Handler {
	return View_Handler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View_Handler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View_Handler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View_Handler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View_Handler) DecodeFromPtr(p capnp.Ptr) View_Handler {
	return View_Handler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View_Handler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View_Handler) IsSame(other View_Handler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View_Handler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View_Handler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Recv(context.Context, View_Handler_recv) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server) View_Handler {
	return View_Handler(capnp.NewClient(View_Handler_NewServer(s)))
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "recv",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Recv(ctx, View_Handler_recv{call})
		},
	})

	return methods
}

// View_Handler_recv holds the state for a server call to View_Handler.recv.
// See server.Call for documentation.
type View_Handler_recv struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_recv) Args() View_Handler_recv_Params {
	return View_Handler_recv_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_Handler_recv) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// View_Handler_List is a list of View_Handler.
type View_Handler_List = capnp.CapList[View_Handler]

// NewView_Handler creates a new list of View_Handler.
func NewView_Handler_List(s *capnp.Segment, sz int32) (View_Handler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View_Handler](l), err
}

type View_Handler_recv_Params capnp.Struct

// View_Handler_recv_Params_TypeID is the unique identifier for the type View_Handler_recv_Params.
const View_Handler_recv_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func NewRootView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func ReadRootView_Handler_recv_Params(msg *capnp.Message) (View_Handler_recv_Params, error) {
	root, err := msg.Root()
	return View_Handler_recv_Params(root.Struct()), err
}

func (s View_Handler_recv_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, capnp.Struct(s))
	return str
}

func (s View_Handler_recv_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Handler_recv_Params) DecodeFromPtr(p capnp.Ptr) View_Handler_recv_Params {
	return View_Handler_recv_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Handler_recv_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Handler_recv_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Handler_recv_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Handler_recv_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Handler_recv_Params) Record() (View_Record, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_Handler_recv_Params) HasRecord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Handler_recv_Params) SetRecord(v View_Record) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_Handler_recv_Params) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Handler_recv_Params_List is a list of View_Handler_recv_Params.
type View_Handler_recv_Params_List = capnp.StructList[View_Handler_recv_Params]

// NewView_Handler_recv_Params creates a new list of View_Handler_recv_Params.
func NewView_Handler_recv_Params_List(s *capnp.Segment, sz int32) (View_Handler_recv_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_Handler_recv_Params](l), err
}

// View_Handler_recv_Params_Future is a wrapper for a View_Handler_recv_Params promised by a client call.
type View_Handler_recv_Params_Future struct{ *capnp.Future }

func (f View_Handler_recv_Params_Future) Struct() (View_Handler_recv_Params, error) {
	p, err := f.Future.Ptr()
	return View_Handler_recv_Params(p.Struct()), err
}
func (p View_Handler_recv_Params_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_Selector capnp.Struct
type View_Selector_Which uint16

const (
	View_Selector_Which_all   View_Selector_Which = 0
	View_Selector_Which_match View_Selector_Which = 1
	View_Selector_Which_from  View_Selector_Which = 2
)

func (w View_Selector_Which) String() string {
	const s = "allmatchfrom"
	switch w {
	case View_Selector_Which_all:
		return s[0:3]
	case View_Selector_Which_match:
		return s[3:8]
	case View_Selector_Which_from:
		return s[8:12]

	}
	return "View_Selector_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Selector_TypeID is the unique identifier for the type View_Selector.
const View_Selector_TypeID = 0xb2029ff7b712d18a

func NewView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func NewRootView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func ReadRootView_Selector(msg *capnp.Message) (View_Selector, error) {
	root, err := msg.Root()
	return View_Selector(root.Struct()), err
}

func (s View_Selector) String() string {
	str, _ := text.Marshal(0xb2029ff7b712d18a, capnp.Struct(s))
	return str
}

func (s View_Selector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Selector) DecodeFromPtr(p capnp.Ptr) View_Selector {
	return View_Selector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Selector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Selector) Which() View_Selector_Which {
	return View_Selector_Which(capnp.Struct(s).Uint16(0))
}
func (s View_Selector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Selector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Selector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Selector) SetAll() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_Selector) Match() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != match")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasMatch() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetMatch(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMatch sets the match field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewMatch() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_Selector) From() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != from")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasFrom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetFrom(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrom sets the from field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewFrom() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Selector_List is a list of View_Selector.
type View_Selector_List = capnp.StructList[View_Selector]

// NewView_Selector creates a new list of View_Selector.
func NewView_Selector_List(s *capnp.Segment, sz int32) (View_Selector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Selector](l), err
}

// View_Selector_Future is a wrapper for a View_Selector promised by a client call.
type View_Selector_Future struct{ *capnp.Future }

func (f View_Selector_Future) Struct() (View_Selector, error) {
	p, err := f.Future.Ptr()
	return View_Selector(p.Struct()), err
}
func (p View_Selector_Future) Match() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}
func (p View_Selector_Future) From() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Constraint capnp.Struct
type View_Constraint_Which uint16

const (
	View_Constraint_Which_limit View_Constraint_Which = 0
	View_Constraint_Which_to    View_Constraint_Which = 1
)

func (w View_Constraint_Which) String() string {
	const s = "limitto"
	switch w {
	case View_Constraint_Which_limit:
		return s[0:5]
	case View_Constraint_Which_to:
		return s[5:7]

	}
	return "View_Constraint_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Constraint_TypeID is the unique identifier for the type View_Constraint.
const View_Constraint_TypeID = 0xab133d2062f6cc53

func NewView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func NewRootView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func ReadRootView_Constraint(msg *capnp.Message) (View_Constraint, error) {
	root, err := msg.Root()
	return View_Constraint(root.Struct()), err
}

func (s View_Constraint) String() string {
	str, _ := text.Marshal(0xab133d2062f6cc53, capnp.Struct(s))
	return str
}

func (s View_Constraint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Constraint) DecodeFromPtr(p capnp.Ptr) View_Constraint {
	return View_Constraint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Constraint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Constraint) Which() View_Constraint_Which {
	return View_Constraint_Which(capnp.Struct(s).Uint16(8))
}
func (s View_Constraint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Constraint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Constraint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Constraint) Limit() uint64 {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != limit")
	}
	return capnp.Struct(s).Uint64(0)
}

func (s View_Constraint) SetLimit(v uint64) {
	capnp.Struct(s).SetUint16(8, 0)
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Constraint) To() (View_Index, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != to")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Constraint) HasTo() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Constraint) SetTo(v View_Index) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTo sets the to field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Constraint) NewTo() (View_Index, error) {
	capnp.Struct(s).SetUint16(8, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Constraint_List is a list of View_Constraint.
type View_Constraint_List = capnp.StructList[View_Constraint]

// NewView_Constraint creates a new list of View_Constraint.
func NewView_Constraint_List(s *capnp.Segment, sz int32) (View_Constraint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[View_Constraint](l), err
}

// View_Constraint_Future is a wrapper for a View_Constraint promised by a client call.
type View_Constraint_Future struct{ *capnp.Future }

func (f View_Constraint_Future) Struct() (View_Constraint, error) {
	p, err := f.Future.Ptr()
	return View_Constraint(p.Struct()), err
}
func (p View_Constraint_Future) To() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Index capnp.Struct
type View_Index_Which uint16

const (
	View_Index_Which_peer   View_Index_Which = 0
	View_Index_Which_server View_Index_Which = 1
	View_Index_Which_host   View_Index_Which = 2
	View_Index_Which_meta   View_Index_Which = 3
)

func (w View_Index_Which) String() string {
	const s = "peerserverhostmeta"
	switch w {
	case View_Index_Which_peer:
		return s[0:4]
	case View_Index_Which_server:
		return s[4:10]
	case View_Index_Which_host:
		return s[10:14]
	case View_Index_Which_meta:
		return s[14:18]

	}
	return "View_Index_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Index_TypeID is the unique identifier for the type View_Index.
const View_Index_TypeID = 0xcc2d04cc26d4f6a5

func NewView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func NewRootView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func ReadRootView_Index(msg *capnp.Message) (View_Index, error) {
	root, err := msg.Root()
	return View_Index(root.Struct()), err
}

func (s View_Index) String() string {
	str, _ := text.Marshal(0xcc2d04cc26d4f6a5, capnp.Struct(s))
	return str
}

func (s View_Index) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Index) DecodeFromPtr(p capnp.Ptr) View_Index {
	return View_Index(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Index) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Index) Which() View_Index_Which {
	return View_Index_Which(capnp.Struct(s).Uint16(2))
}
func (s View_Index) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Index) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Index) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Index) Prefix() bool {
	return capnp.Struct(s).Bit(0)
}

func (s View_Index) SetPrefix(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s View_Index) Peer() (string, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != peer")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasPeer() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetPeer(v string) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Server() ([]byte, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != server")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s View_Index) HasServer() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) SetServer(v []byte) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetData(0, v)
}

func (s View_Index) Host() (string, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != host")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasHost() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetHost(v string) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Meta() (string, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != meta")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasMeta() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) MetaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetMeta(v string) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetText(0, v)
}

// View_Index_List is a list of View_Index.
type View_Index_List = capnp.StructList[View_Index]

// NewView_Index creates a new list of View_Index.
func NewView_Index_List(s *capnp.Segment, sz int32) (View_Index_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Index](l), err
}

// View_Index_Future is a wrapper for a View_Index promised by a client call.
type View_Index_Future struct{ *capnp.Future }

func (f View_Index_Future) Struct() (View_Index, error) {
	p, err := f.Future.Ptr()
	return View_Index(p.Struct()), err
}

type View_Record capnp.Struct

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return View_Record(st), err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return View_Record(st), err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record(root.Struct()), err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, capnp.Struct(s))
	return str
}

func (s View_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Record) DecodeFromPtr(p capnp.Ptr) View_Record {
	return View_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Record) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Record) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s View_Record) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Record) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s View_Record) Heartbeat() (Heartbeat, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Heartbeat(p.Struct()), err
}

func (s View_Record) HasHeartbeat() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_Record) SetHeartbeat(v Heartbeat) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Heartbeat struct, preferring placement in s's segment.
func (s View_Record) NewHeartbeat() (Heartbeat, error) {
	ss, err := NewHeartbeat(capnp.Struct(s).Segment())
	if err != nil {
		return Heartbeat{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[View_Record](l), err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (f View_Record_Future) Struct() (View_Record, error) {
	p, err := f.Future.Ptr()
	return View_Record(p.Struct()), err
}
func (p View_Record_Future) Heartbeat() Heartbeat_Future {
	return Heartbeat_Future{Future: p.Future.Field(1, nil)}
}

type View_MaybeRecord capnp.Struct
type View_MaybeRecord_Which uint16

const (
	View_MaybeRecord_Which_nothing View_MaybeRecord_Which = 0
	View_MaybeRecord_Which_just    View_MaybeRecord_Which = 1
)

func (w View_MaybeRecord_Which) String() string {
	const s = "nothingjust"
	switch w {
	case View_MaybeRecord_Which_nothing:
		return s[0:7]
	case View_MaybeRecord_Which_just:
		return s[7:11]

	}
	return "View_MaybeRecord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_MaybeRecord_TypeID is the unique identifier for the type View_MaybeRecord.
const View_MaybeRecord_TypeID = 0xd6a4f298bc0e2304

func NewView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func NewRootView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func ReadRootView_MaybeRecord(msg *capnp.Message) (View_MaybeRecord, error) {
	root, err := msg.Root()
	return View_MaybeRecord(root.Struct()), err
}

func (s View_MaybeRecord) String() string {
	str, _ := text.Marshal(0xd6a4f298bc0e2304, capnp.Struct(s))
	return str
}

func (s View_MaybeRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_MaybeRecord) DecodeFromPtr(p capnp.Ptr) View_MaybeRecord {
	return View_MaybeRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_MaybeRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_MaybeRecord) Which() View_MaybeRecord_Which {
	return View_MaybeRecord_Which(capnp.Struct(s).Uint16(0))
}
func (s View_MaybeRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_MaybeRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_MaybeRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_MaybeRecord) SetNothing() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_MaybeRecord) Just() (View_Record, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != just")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_MaybeRecord) HasJust() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_MaybeRecord) SetJust(v View_Record) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJust sets the just field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_MaybeRecord) NewJust() (View_Record, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_MaybeRecord_List is a list of View_MaybeRecord.
type View_MaybeRecord_List = capnp.StructList[View_MaybeRecord]

// NewView_MaybeRecord creates a new list of View_MaybeRecord.
func NewView_MaybeRecord_List(s *capnp.Segment, sz int32) (View_MaybeRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_MaybeRecord](l), err
}

// View_MaybeRecord_Future is a wrapper for a View_MaybeRecord promised by a client call.
type View_MaybeRecord_Future struct{ *capnp.Future }

func (f View_MaybeRecord_Future) Struct() (View_MaybeRecord, error) {
	p, err := f.Future.Ptr()
	return View_MaybeRecord(p.Struct()), err
}
func (p View_MaybeRecord_Future) Just() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Params capnp.Struct

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xd929e054f82b286c

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params(root.Struct()), err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, capnp.Struct(s))
	return str
}

func (s View_lookup_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Params) DecodeFromPtr(p capnp.Ptr) View_lookup_Params {
	return View_lookup_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Selector(p.Struct()), err
}

func (s View_lookup_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_lookup_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_lookup_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Constraint_List(p.List()), err
}

func (s View_lookup_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_lookup_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_lookup_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List = capnp.StructList[View_lookup_Params]

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[View_lookup_Params](l), err
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (f View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	p, err := f.Future.Ptr()
	return View_lookup_Params(p.Struct()), err
}
func (p View_lookup_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Results capnp.Struct

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe6df611247a8fc13

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results(root.Struct()), err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, capnp.Struct(s))
	return str
}

func (s View_lookup_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Results) DecodeFromPtr(p capnp.Ptr) View_lookup_Results {
	return View_lookup_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_lookup_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_lookup_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List = capnp.StructList[View_lookup_Results]

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Results](l), err
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (f View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	p, err := f.Future.Ptr()
	return View_lookup_Results(p.Struct()), err
}
func (p View_lookup_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_iter_Params capnp.Struct

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xf495a555c9344000

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params(root.Struct()), err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, capnp.Struct(s))
	return str
}

func (s View_iter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Params) DecodeFromPtr(p capnp.Ptr) View_iter_Params {
	return View_iter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_iter_Params) Handler() View_Handler {
	p, _ := capnp.Struct(s).Ptr(0)
	return View_Handler(p.Interface().Client())
}

func (s View_iter_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s View_iter_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Selector(p.Struct()), err
}

func (s View_iter_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_iter_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_iter_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_iter_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return View_Constraint_List(p.List()), err
}

func (s View_iter_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s View_iter_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_iter_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[View_iter_Params](l), err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (f View_iter_Params_Future) Struct() (View_iter_Params, error) {
	p, err := f.Future.Ptr()
	return View_iter_Params(p.Struct()), err
}
func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler(p.Future.Field(0, nil).Client())
}

func (p View_iter_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(1, nil)}
}

type View_iter_Results capnp.Struct

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results(root.Struct()), err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, capnp.Struct(s))
	return str
}

func (s View_iter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Results) DecodeFromPtr(p capnp.Ptr) View_iter_Results {
	return View_iter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results](l), err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (f View_iter_Results_Future) Struct() (View_iter_Results, error) {
	p, err := f.Future.Ptr()
	return View_iter_Results(p.Struct()), err
}

type View_reverse_Params capnp.Struct

// View_reverse_Params_TypeID is the unique identifier for the type View_reverse_Params.
const View_reverse_Params_TypeID = 0x8b1fd983f1df482d

func NewView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func NewRootView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func ReadRootView_reverse_Params(msg *capnp.Message) (View_reverse_Params, error) {
	root, err := msg.Root()
	return View_reverse_Params(root.Struct()), err
}

func (s View_reverse_Params) String() string {
	str, _ := text.Marshal(0x8b1fd983f1df482d, capnp.Struct(s))
	return str
}

func (s View_reverse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Params) DecodeFromPtr(p capnp.Ptr) View_reverse_Params {
	return View_reverse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_reverse_Params_List is a list of View_reverse_Params.
type View_reverse_Params_List = capnp.StructList[View_reverse_Params]

// NewView_reverse_Params creates a new list of View_reverse_Params.
func NewView_reverse_Params_List(s *capnp.Segment, sz int32) (View_reverse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_reverse_Params](l), err
}

// View_reverse_Params_Future is a wrapper for a View_reverse_Params promised by a client call.
type View_reverse_Params_Future struct{ *capnp.Future }

func (f View_reverse_Params_Future) Struct() (View_reverse_Params, error) {
	p, err := f.Future.Ptr()
	return View_reverse_Params(p.Struct()), err
}

type View_reverse_Results capnp.Struct

// View_reverse_Results_TypeID is the unique identifier for the type View_reverse_Results.
const View_reverse_Results_TypeID = 0xcc7efefbb528cd6c

func NewView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func NewRootView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func ReadRootView_reverse_Results(msg *capnp.Message) (View_reverse_Results, error) {
	root, err := msg.Root()
	return View_reverse_Results(root.Struct()), err
}

func (s View_reverse_Results) String() string {
	str, _ := text.Marshal(0xcc7efefbb528cd6c, capnp.Struct(s))
	return str
}

func (s View_reverse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Results) DecodeFromPtr(p capnp.Ptr) View_reverse_Results {
	return View_reverse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_reverse_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s View_reverse_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_reverse_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_reverse_Results_List is a list of View_reverse_Results.
type View_reverse_Results_List = capnp.StructList[View_reverse_Results]

// NewView_reverse_Results creates a new list of View_reverse_Results.
func NewView_reverse_Results_List(s *capnp.Segment, sz int32) (View_reverse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_reverse_Results](l), err
}

// View_reverse_Results_Future is a wrapper for a View_reverse_Results promised by a client call.
type View_reverse_Results_Future struct{ *capnp.Future }

func (f View_reverse_Results_Future) Struct() (View_reverse_Results, error) {
	p, err := f.Future.Ptr()
	return View_reverse_Results(p.Struct()), err
}
func (p View_reverse_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xd69d5c8bc70128bc

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd69d5c8bc70128bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd69d5c8bc70128bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xfa28a083b87f99d0

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xfa28a083b87f99d0, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() Signer {
	return Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0xf09e5b54ee0e67fe

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0xf09e5b54ee0e67fe, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s Terminal_login_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Terminal_login_Results) PubSub() pubsub.Router {
	p, _ := capnp.Struct(s).Ptr(1)
	return pubsub.Router(p.Interface().Client())
}

func (s Terminal_login_Results) HasPubSub() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Terminal_login_Results) SetPubSub(v pubsub.Router) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Terminal_login_Results) Root() anchor.Anchor {
	p, _ := capnp.Struct(s).Ptr(2)
	return anchor.Anchor(p.Interface().Client())
}

func (s Terminal_login_Results) HasRoot() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Terminal_login_Results) SetRoot(v anchor.Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

func (p Terminal_login_Results_Future) PubSub() pubsub.Router {
	return pubsub.Router(p.Future.Field(1, nil).Client())
}

func (p Terminal_login_Results_Future) Root() anchor.Anchor {
	return anchor.Anchor(p.Future.Field(2, nil).Client())
}

type Signer capnp.Client

// Signer_TypeID is the unique identifier for the type Signer.
const Signer_TypeID = 0xf1f2e144cec1f2bc

func (c Signer) Sign(ctx context.Context, params func(Signer_sign_Params) error) (Signer_sign_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1f2e144cec1f2bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Signer",
			MethodName:    "sign",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Signer_sign_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Signer_sign_Results_Future{Future: ans.Future()}, release

}

func (c Signer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Signer) String() string {
	return "Signer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Signer) AddRef() Signer {
	return Signer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Signer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Signer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Signer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Signer) DecodeFromPtr(p capnp.Ptr) Signer {
	return Signer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Signer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Signer) IsSame(other Signer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Signer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Signer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Signer_Server is a Signer with a local implementation.
type Signer_Server interface {
	Sign(context.Context, Signer_sign) error
}

// Signer_NewServer creates a new Server from an implementation of Signer_Server.
func Signer_NewServer(s Signer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Signer_Methods(nil, s), s, c)
}

// Signer_ServerToClient creates a new Client from an implementation of Signer_Server.
// The caller is responsible for calling Release on the returned Client.
func Signer_ServerToClient(s Signer_Server) Signer {
	return Signer(capnp.NewClient(Signer_NewServer(s)))
}

// Signer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Signer_Methods(methods []server.Method, s Signer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1f2e144cec1f2bc,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Signer",
			MethodName:    "sign",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sign(ctx, Signer_sign{call})
		},
	})

	return methods
}

// Signer_sign holds the state for a server call to Signer.sign.
// See server.Call for documentation.
type Signer_sign struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Signer_sign) Args() Signer_sign_Params {
	return Signer_sign_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Signer_sign) AllocResults() (Signer_sign_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(r), err
}

// Signer_List is a list of Signer.
type Signer_List = capnp.CapList[Signer]

// NewSigner creates a new list of Signer.
func NewSigner_List(s *capnp.Segment, sz int32) (Signer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Signer](l), err
}

type Signer_sign_Params capnp.Struct

// Signer_sign_Params_TypeID is the unique identifier for the type Signer_sign_Params.
const Signer_sign_Params_TypeID = 0xb2250c16d3064727

func NewSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func NewRootSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func ReadRootSigner_sign_Params(msg *capnp.Message) (Signer_sign_Params, error) {
	root, err := msg.Root()
	return Signer_sign_Params(root.Struct()), err
}

func (s Signer_sign_Params) String() string {
	str, _ := text.Marshal(0xb2250c16d3064727, capnp.Struct(s))
	return str
}

func (s Signer_sign_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Params) DecodeFromPtr(p capnp.Ptr) Signer_sign_Params {
	return Signer_sign_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Params) Challenge() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Params) HasChallenge() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Params) SetChallenge(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Params_List is a list of Signer_sign_Params.
type Signer_sign_Params_List = capnp.StructList[Signer_sign_Params]

// NewSigner_sign_Params creates a new list of Signer_sign_Params.
func NewSigner_sign_Params_List(s *capnp.Segment, sz int32) (Signer_sign_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Params](l), err
}

// Signer_sign_Params_Future is a wrapper for a Signer_sign_Params promised by a client call.
type Signer_sign_Params_Future struct{ *capnp.Future }

func (f Signer_sign_Params_Future) Struct() (Signer_sign_Params, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Params(p.Struct()), err
}

type Signer_sign_Results capnp.Struct

// Signer_sign_Results_TypeID is the unique identifier for the type Signer_sign_Results.
const Signer_sign_Results_TypeID = 0xf00b0072c6dcfae7

func NewSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func NewRootSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func ReadRootSigner_sign_Results(msg *capnp.Message) (Signer_sign_Results, error) {
	root, err := msg.Root()
	return Signer_sign_Results(root.Struct()), err
}

func (s Signer_sign_Results) String() string {
	str, _ := text.Marshal(0xf00b0072c6dcfae7, capnp.Struct(s))
	return str
}

func (s Signer_sign_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Results) DecodeFromPtr(p capnp.Ptr) Signer_sign_Results {
	return Signer_sign_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Results) Signed() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Results) HasSigned() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Results) SetSigned(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Results_List is a list of Signer_sign_Results.
type Signer_sign_Results_List = capnp.StructList[Signer_sign_Results]

// NewSigner_sign_Results creates a new list of Signer_sign_Results.
func NewSigner_sign_Results_List(s *capnp.Segment, sz int32) (Signer_sign_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Results](l), err
}

// Signer_sign_Results_Future is a wrapper for a Signer_sign_Results promised by a client call.
type Signer_sign_Results_Future struct{ *capnp.Future }

func (f Signer_sign_Results_Future) Struct() (Signer_sign_Results, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Results(p.Struct()), err
}

const schema_fcf6ac08e448a6ac = "x\xda\xb4W{l\x1cW\xf5>\xe7\xde\xdd\x8c\xf3\x8b" +
	"\xed\xf5\xdd\xbbvv7\xea\xcfi\x9a\x80m\x14+\x8f" +
	"\x0a\x14\x8bj\xb7&&\x89I$O\x9c\x14R\x12\xda" +
	"\xf1zj/\xec\xc3\x99\x9d\xcdCj1i\x1b\xc8\xa3" +
	"\x0dP\x08\xaa#5<\x14W4\x14\xaa\x06\xd2\x926" +
	"\x8dH%Z\xa5$\x854\xa5\xd4\xa8\x10R\xa5\xad\x90" +
	"h\x9a\x18\x9c\x12\xe3z\xd0\xbd\xb3\xb33^\xafm\xf8" +
	"\x03\xf9\x9f\xf5\xcc7\xe7\x9e\xf3\x9d\xef<\xee\x92\xbe\x8a" +
	"\xb8oiU\xff\" \x9d\xbf@\xff,\xeb\xd4\xb3W" +
	"\xde\xb9\xa5a\xff\xfd\xc08\x02\xf8\x14\x00>\x18\x1c\x05" +
	"\x9f\xf5\xf7\xc4\xf0\xd5\xff?\xf0\xb7\xbd\xee\x8b\xe5{\x83" +
	"Q\x04\x9fuh\xe1\xd8\x9d\xcb\xaf\xde\xb4\x0fX5\xb5" +
	"\x9e||\xf5\xe5\x8a'\xaf\x8f\x01 \xdf\x1a<\xc4w" +
	"\x06{\x00\xf8\x99\xe0\xcb\xfcv\xae\x00X\x8bW_\xbc" +
	"\xf6\xc0P\xfd~\x8f\x99F\x1e\x14f^8\xfc\xc43" +
	"\xaf\xa6O\x1c\x006\x0f\x01\xfc(^1\xde\x82\x80<" +
	"\xc2c\x80\xd6\xc8\xebkw\x1fx\xe4\x0b\xdf\xb4?\xb5" +
	"\x01+8\x11\x80\xdb$@\xb9pW\xf7\xd8\xa9{\x0f" +
	"Nrd\x0b?\xc4uq\xfcr\x8d\x7f\x03\xf9\x96\x90" +
	"\xf0\xe4\xcd\x0b{\xee\xff\xe1\xb2c\x03^sm\xa1\x05" +
	"\xc2\xdc\xba\x900G\xbe\xe7\x7f\xfe\xc6\xfc]\x87\xbd\x80" +
	"\xad6`\xa7\x04\xec\x19\xdc\xf4\xd0\x92G\x8e\x1e\xf6\xc4" +
	"\xf2XHRr\xf9D\xbe\xf3s/\xfa\x8exX\xdc" +
	"\x1d\x12,\xce\xff\xf0\x93\x8f*[\xcd'@\xadF\xe2" +
	"\xfa\xe8'\x02\x92\x0c\xbd\xc8\xb7\x0a\xdfx:\xf4\x1e\xa0" +
	"\xd5y\xf6z\xd7\xfc\xdb\xf8O@\xe5H\\\x9a\xdbP" +
	"!\xe8\xe3j\xed0\xdfR+\xd0\x9bj\xb7\x03Z\xfb" +
	"\xce\x07\x9f\xfd\xf0\xfb\xe4\x98@\xe3\x044\x05\xe0\xc7k" +
	"\xdf\xe6\xa7%\xfa\x85\xda\xa7\x00\xad\x8f\xaf\x9au\xa1\xae" +
	"r\xd11`\xb5\xc5\xe06\xd6\xfd\x9f\x08nK\x9d\x08" +
	"\xae\xd1\x17\xf8\x19\xbd;|\xca\x1b\xfd\xae:\x19\xfd^" +
	"\x09X\xbf\xf6\xcd\xc6\xf7C\x9d\xa7<\xd1\xff\xb4NF" +
	"?\xa7\xed\xf3Gvo~\xfe\x15\xef\xa7\x07\xebd\xa2" +
	"\x06\xe4\xa7\x83\xd7_\xff\xd8Y\xdf\xe2\xb3\x93]\xf5!" +
	"\xf2\x13u\xaf\xf0_\xd7\x89\x8fN\xd7\xd5#\xa0\x95:" +
	"\xd7p\xfc_\xe3_=\xeb\xb5w~nT\xd8\x1b\x9a" +
	"+\xec\xcd\xbf\xaf\xf3\xd8\xa9\xd6\xdf\x9e+!\xcaf\xf5" +
	"\xc6\xdc\xd7\xb8?,~aX\xb0z\xb2\x01_\xde\xbf" +
	"\xf9\xb17&\xa9d(\xfc\x1c\xbf$\x81\x7f\x0a\xaf\xe2" +
	"\xfe\x88\x10\x89\xef\x96\xea\x93\x8f\x0e\x1fyc\xb2\xa7\x04" +
	"\x80\xbf\x1f\x1e\xe57\xe4\x17#a\x91\x82T\xc3'\xfe" +
	"\xb9\xe1/\x8dC\x05G\xc5\xf1\xcb\xd5\x88$uSD" +
	"\x00\xaeT\xcf\x1e\xc9\xdf\xd8\xf3\x967\x92s\x91\xa0\x00" +
	"\xfc>\"\"\xf9\xe0\x0f\xf5\xcf\xac<\xdb\xfe\x8e\x87\xd4" +
	"\x91\x08\x11\xa4\x0e\x1c\x1d\xf3\xe7\x17\x1c\xf7\xbe\x19\x12\xa6" +
	"}\x16\x1f\xfb\xf1\xaa\xa0v\xf1]\xaf\xd1\xd3\xb6\xd13" +
	"\xd2(\xfd\xf4\x8f\x8e%\x1e\xff\xce\x15`\x9c\xba1\x00" +
	"\xf2\xbfF\xfe\xc8GD\x9c\xfcZd\x15\x8fD\x15\x80" +
	"\x8b\xef\x8d\xbe\xf5\x921\xe7\xaaG\x16\x18\x95\xb6fG" +
	"\x85\xad\xf1\x9e\xea+\x1b\xbex\xf8*\xb0\xb9\x02@e" +
	"\x01G\x9b\x04`iT\x08\xeb\xe4\xf0\xe9WW^\x1a" +
	"\xbe6\x89\xde3\xd1\xa3\xfc\xbc8\x82\x9f\x8b\xae\xe2#" +
	"\xe2\xd7x\xfc\xd63\x1b\x07\x0f\xfe\xc3v\x9cJ\xea\xa3" +
	"\xa3\x80\xfc\x924\xf5\xbb\x81\xfe_>\xf0\x83\x86\xd1\xc2" +
	"Y\xd2\x99o\xcf\x93\x12\x1c\x98\x17\x03K\xfe\xb5X\x89" +
	"T>g\xeaF3Ih}\x99\xbe\x96\xd5\xd9\x9c\xd9" +
	"ld\xb3\xe6\xc2X\x87fh\xe9\\\x11@\xbd\x00\xbd" +
	"'\x993\x8d\x9d\x0b\x05\x86z@h\x83\xeeHR}" +
	"\xbb\x1aF/{\x8d\xadn\x91\xb1E\xedn}\xb2E" +
	"w\xba\x9af\x8b\x96\xb9\x82d7\xb7\xb8\x1ab7u" +
	"\xf5\xaf\xd62\xdd)\xdd\xb0:\xf5\x94\x9e0\xb3\x06\x00" +
	"X\x9f\xc9fr\xa6\xa1%\x81f\xcc\xfa5\x99n}" +
	"Gl\xbd\x9e\xc8\x1a\xdd\xd6:mg\x97\xbe^O\x80" +
	"\x925\xba\xd5J\xea\x07(\x8a\x0c\x9d\xbc3\xb5\x05\x08" +
	"kS\x10\x1d>=2Z\xd1\x04\x84-V\x90\x14;" +
	"/:\xe5\xc4nn\x05\xc2j\x95X*\x9b\xfdJ\xbe" +
	"/\x8e\x81\xa4\xa9\x1bq\xec7\xf4m\xba\x91\xd3\xe3\xd8" +
	"\x81XJ\xde\x1dI}{s\x01 \xb9Kc\xae," +
	"\xa6\x10h\xb3\xa1'\xb69\x99P}\xd4\x07\xe0C\x00" +
	"V\xd5\x02\xa0VPTC\x04c\x86\x8c\x16k\\\xde" +
	"\x00\xb1\x06\xb0l\xe6\xb6%\xf5\xed\x0b\xd7\xeb\xb9|\xca" +
	"\xcc\x81\xd7b\x93k1 @\xc8\xbcbG\xe6\xb1\x87" +
	"\x8e=\x9a3;\x10\xd5\xb0d\xd6\xe9\xda\xe8L\x1a\xf6" +
	"\xb4`oPA,\x96\x1f:%\xcc\x06\x04\xeb\x0f\x0b" +
	"f\x9d\x99\x89N\xe3c\xbb\xc4wy\x05iql\xa2" +
	"\xd3OY\xb2\x1d\x08\xd3\x14\xf4\x15;(:\x93\x86m" +
	"\x14\xef\xd6)\xe8/\xce\x16t\xc6\x14\xbb]\xbc[\xa1" +
	"\xc8\xd0\xe2\x18\xeb\xcbwu\xe6\xbb\xe2\x18\x10R\x8f\xa3" +
	"\xe5\x08\x1a\x00\xe2h\xe9;\xf4D\xde\x96W\x1c\xad\x84" +
	"\xd6\xd7if\x0d]\xfeW&\xa9\x92W\x07$\xb9U" +
	"R\xe6\x84l\xb5\x03\xa8\x95\x14\xd50\x99`\x0d\x99\xf5" +
	"R\xdb\x07\xfb\xbe>g\xf0\xedR\x8a\xbd\xa6\x1dof" +
	"4\xedq\x1b\x99\xf5Z~\xd7\xe0s_j~j:" +
	"\xd3E\xafK\xeb\x98\x94J\xa6\xb4\x1b8\x00]3\xcc" +
	".]3A\x08\xa1\xa6\xe8\x97\xb6\x00@\xddLQ\xed" +
	"%\xc8\x10C(\x1e\xeaB\xb5wSTS\x04\x91\x84" +
	"\x90\x00\xb0\xa4\xd0]7E\xb5\x8f \xa3\x18B\x0a\xc0" +
	"\xd2\xe2a/E\xf5A\x82\x8ai\xa6\xb0\x02\x08V\x00" +
	"\xc6r\xba\xb1M7p6\x10\x9c\x0d\x18\xe8\xcd\xe6L" +
	"\xac\x04\x82\x95\x80\x81\xb4njX\x0d\xd8AQ>\xab" +
	"\xf6\xc4L<\xa5%\xfbE\xbd\xa1%3R\xbc\x15\xd4" +
	"WiY\xd2\xe9\xc6e\x00\xeaB\x8a\xea\x12\x82U8" +
	"n\xd9^/\x8e\x02\xa8\x0d\x14\xd5[\x09\xd6\xa7\x92\xe9" +
	"\xa4\xe9\x9cO\xcd,\xd6\xb8\xad\xab\xa4\xea\xbcg\xca~" +
	"\xa5\x98YC\x9cX\xe9\x9e\xd8&h\x8aST\xd7z" +
	"O\\#\xfcXIQ\xed XE>\xb2l\xa6\xd6" +
	"\x09RVST7\x10T\xb4T\x0af\xd5\xa753" +
	"\xd1;\xd9\x85\xc0=F6=\x8dg\x05\x05t&{" +
	"2\xba\xd1\x9cK\xf6d\xec^\x94\x83\x09\x1da\xbdW" +
	"\xb5\xbdZ*\xa5gz\x00u\xac\x02\x82US\x08\xaa" +
	"8\x18f\xd2\xaa\xa7\xe0\x90Y\x9f\xfd\xcd\xceDV\xb9" +
	"\xf2\xd1\x7fT\x06\xa5Z\xa5\xa5\x93k\xa6\xf6&@\xc8" +
	"\xac\x05C\x07f_\xfeT\xf0r\xe9\xa1\xde\xc4\xc9y" +
	"\x02R\xdc\xa1\xa2\xb1\xfb\x84\x8ew\xd8\xf2\xacB\xab\x90" +
	"\xb5]\xe2\x88{)\xaa{D\xd6\xc6\x0bY\xdb-\xb0" +
	"_\xa3\xa8>D\xb0\x8a\x8a\\\x0a\x81\xef\x15\xd8\x07)" +
	"\xaa\xdf\"X\xe5\x1b\xb3B\xe8\x03`\x0f\x8b\xa7{(" +
	"\xaa\xdf%\x18\xeb3\xf4{\x92;\x10\x81 \x02\x06\xfa" +
	"t\xddp\xa4\xee\x94A!\x11e\xca\xa0\xf0\xcf\xb4\xe3" +
	"G\xb2D'f\xe8\xbf\x18\x02^\x96\xe4\xbc\xc5\xee\x92" +
	"\x16\xd0\xe4\xb6\x80r\x1d\x80\x11,\xb4\x80\x05\xe5Z\x80" +
	"P_\x8a\xa2\xba\x83\x94\x0f\xbeP\x83JN\xdf\xea\xfc" +
	"\xb6z\x0b\xdd\x08\xd0\x14\xe3\xd0\xb9-\x94\xc8\xbf0\xbe" +
	"6\xe81#\x9d\xcch)\xe1\xb6O\x8e0geB" +
	"gOcl\x19\x10\xe6W\xeaS\xd9\x9edfb\xf7" +
	"\xf7\x12 7\x8d\xc2\xdaQ\xdaTZ\xcb6\x95&\xb7" +
	"\xa9\xf4g\xb2fo2\xd3\x03\xb3\x02_\xce\xe7\xcc\x99" +
	"\x07\xb9<\xd2^;\xdc\xc2\xad(\x12\xdf\xd8\xee\xda." +
	"\xf6\xde\xa5]\x00\xea\x12\xbb\xd3X9w}\xc2\x1aw" +
	"+sNs\x16*%c\xe6\x9c\x8eZ\xe3\xeek\x80" +
	"\x13z\xab\xb7\xfc\xec\xb1Z(@\x9crc\xb1a\xc8" +
	"\xac\x96\xec\xb6y\xef\xfe\xbc\xe3\xcf\xa5\xe2R<\x81\x8a" +
	"\xb5\xaaX\xd2\x0e`\xf2\x99\x0e\x11\xd3\x915\x93_\x86" +
	"\xfd\xbe\xc6]:\xa7\xe9\xe9rE\xa3\xba\xe1\xca\xc7\xb9" +
	"\x83c\xe6\xe9_m_~\xe8\xae\x01\xc6\x9a\xa4|\x02" +
	"b\x8d+\xbb;x{\xf0L\xde\x09\x90\xde=U\xfb" +
	"\xdd\xa0\xdbjn\x96R\x15\xc6\x02\x8211m\x0a\xc6" +
	"\xda\x9a\xdcaS\xd4\xc5\x9a\x16w\xd60B&\x8f\x9a" +
	")\xfa\xc0\x949\x9c\xa9\xbb\xa2\x13x@D\xee\x92\xe7" +
	"\\\xa9Q^\xa1`\xce\xd5\"y\"\xee\xa9KO\xca" +
	"\xc3\xd9\x90=\xc1\xb6\x96\x0b\xb6\xdd\x8d\xab\x18\xac**" +
	"\xa3\xc3\xeeI\xfd\xbd\xf6\xde\x8d\xcc\xbd\xb8\x14\xfc\xff_" +
	"\xd4LI\xce:4C)\xd9\xf3[\xdd\xfc\xf7k\x89" +
	"D6\x9f\x11\xdc\x16o\x89\xb6o\xff\x0e\x00\x00\xff\xff" +
	"\xa4\x843\xc6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fcf6ac08e448a6ac,
		Nodes: []uint64{
			0x828b2823e5eeb7be,
			0x89ec8e1ef0f263f3,
			0x8a1df0335afc249a,
			0x8b1fd983f1df482d,
			0x8eb96dceb6a99ebd,
			0x8f58928e854cd4f5,
			0x957cbefc645fd307,
			0x99b232a18288d3d8,
			0x9e8120f9bb059602,
			0x9eaa92308c59a588,
			0xa404c24b5375b9e4,
			0xa97471079836f720,
			0xab133d2062f6cc53,
			0xb2029ff7b712d18a,
			0xb2250c16d3064727,
			0xbe186003ae0f0429,
			0xbe5314ed29d84c52,
			0xcabb5c85a457450b,
			0xcc2d04cc26d4f6a5,
			0xcc7efefbb528cd6c,
			0xcdcf42beb2537d20,
			0xd69d5c8bc70128bc,
			0xd6a4f298bc0e2304,
			0xd929e054f82b286c,
			0xdc88f975f5090eee,
			0xe54acc44b61fd7ef,
			0xe5b5227505fcaa99,
			0xe6df611247a8fc13,
			0xee93a663b2a23c03,
			0xf00b0072c6dcfae7,
			0xf09e5b54ee0e67fe,
			0xf1f2e144cec1f2bc,
			0xf495a555c9344000,
			0xfa28a083b87f99d0,
		},
		Compressed: true,
	})
}
